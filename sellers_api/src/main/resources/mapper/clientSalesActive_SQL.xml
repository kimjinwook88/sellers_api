<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="clientSalesActive">
	
	<!-- 고객컨택 -->
	<select id="selectClientContactList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		SELECT CONTACT.*
		FROM (
				SELECT 
					CEL.EVENT_ID, 
					CEL.CREATOR_ID, 
					CEL.CREATE_DATETIME, 
					CEL.EVENT_OWNER, 
					CEL.EVENT_DATE, 
					CEL.EVENT_CATEGORY, 
					CEL.EVENT_SUBJECT, 
					CEL.EVENT_CONTENTS, 
					CEL.FOLLOW_CONTENTS, 
					DATE_FORMAT(CEL.SYS_REGISTER_DATE, '%Y-%m-%d') AS SYS_REGISTER_DATE, 
					DATE_FORMAT(CEL.SYS_UPDATE_DATE, '%Y-%m-%d') AS SYS_UPDATE_DATE,
					DATE_FORMAT(CEL.SYS_UPDATE_DATE, '%Y-%m-%d %H:%i') AS LATELY_UPDATE_DATE,
					OMI.HAN_NAME,
					OMI.MEMBER_ID_NUM,
					OMI.MEMBER_DIVISION,
					ODI.DIVISION_NAME,
					CIL.ISSUE_ID,
					MAX(IF(CEA.RANK=1, CEA.SOLVE_DUE_DATE, "")) AS SOLVE_DUE_DATE_1,
					MAX(IF(CEA.RANK=2, CEA.SOLVE_DUE_DATE, "")) AS SOLVE_DUE_DATE_2,
					MAX(IF(CEA.RANK=3, CEA.SOLVE_DUE_DATE, "")) AS SOLVE_DUE_DATE_3,
					MAX(IF(CEA.RANK=4, CEA.SOLVE_DUE_DATE, "")) AS SOLVE_DUE_DATE_4,
					MAX(IF(CEA.RANK=5, CEA.SOLVE_DUE_DATE, "")) AS SOLVE_DUE_DATE_5,
					MAX(IF(CEA.RANK=1, CEA.SOLVE_CLOSE_DATE, "")) AS SOLVE_CLOSE_DATE_1,
					MAX(IF(CEA.RANK=2, CEA.SOLVE_CLOSE_DATE, "")) AS SOLVE_CLOSE_DATE_2,
					MAX(IF(CEA.RANK=3, CEA.SOLVE_CLOSE_DATE, "")) AS SOLVE_CLOSE_DATE_3,
					MAX(IF(CEA.RANK=4, CEA.SOLVE_CLOSE_DATE, "")) AS SOLVE_CLOSE_DATE_4,
					MAX(IF(CEA.RANK=5, CEA.SOLVE_CLOSE_DATE, "")) AS SOLVE_CLOSE_DATE_5,
					MAX(IF(CEA.RANK=1, CEA.CONTENTS, "")) AS SOLVE_CONTENTS_1,
					MAX(IF(CEA.RANK=2, CEA.CONTENTS, "")) AS SOLVE_CONTENTS_2,
					MAX(IF(CEA.RANK=3, CEA.CONTENTS, "")) AS SOLVE_CONTENTS_3,
					MAX(IF(CEA.RANK=4, CEA.CONTENTS, "")) AS SOLVE_CONTENTS_4,
					MAX(IF(CEA.RANK=5, CEA.CONTENTS, "")) AS SOLVE_CONTENTS_5,
					MAX(IF(CEA.RANK=1, CEA.SOLVE_OWNER_NAME, "")) AS SOLVE_OWNER_NAME_1,
					MAX(IF(CEA.RANK=2, CEA.SOLVE_OWNER_NAME, "")) AS SOLVE_OWNER_NAME_2,
					MAX(IF(CEA.RANK=3, CEA.SOLVE_OWNER_NAME, "")) AS SOLVE_OWNER_NAME_3,
					MAX(IF(CEA.RANK=4, CEA.SOLVE_OWNER_NAME, "")) AS SOLVE_OWNER_NAME_4,
					MAX(IF(CEA.RANK=5, CEA.SOLVE_OWNER_NAME, "")) AS SOLVE_OWNER_NAME_5,
					IFNULL(FC.FILE_COUNT,0) AS FILE_COUNT,
					(
						SELECT COUNT(*) 
						FROM COACHING_TALK AS CT 
						WHERE 1=1 AND CATEGORY='CONTACT' AND CEL.EVENT_ID = CT.ID
					)AS COACHING_TALK_COUNT,
					CSB.CUSTOMER_NAME,
					CSB.COMPANY_NAME
				FROM 
					CLIENT_EVENT_LOG AS CEL
					INNER JOIN
					OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
					INNER JOIN
					OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
					INNER JOIN
					(
						SELECT 
							SCEL.EVENT_ID,
							GROUP_CONCAT(CII.CUSTOMER_NAME ORDER BY CCL.CLIENT_LIST_ID) AS CUSTOMER_NAME,
							GROUP_CONCAT(CCI.COMPANY_NAME ORDER BY CCL.CLIENT_LIST_ID) AS COMPANY_NAME
		      			FROM 
		      			CLIENT_EVENT_LOG as SCEL
		      			INNER JOIN
						COM_CLIENT_LIST AS CCL ON CCL.LOG_ID = SCEL.EVENT_ID
		      			INNER JOIN
						CLIENT_INDIVIDUAL_INFO AS CII ON CCL.CLIENT_ID = CII.CUSTOMER_ID 
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CII.COMPANY_ID = CCI.COMPANY_ID
						WHERE 1=1 
						AND CCL.CATEGORY = '1'
		]]>
						<!-- 검색 고객사ID -->
						<if test="searchCompany != null and searchCompany != '' ">
							AND CCI.COMPANY_ID = #{searchCompany}
						</if>
						<!-- 검색 고객사 그룹 -->
						<if test="searchCompanyCategory != null and searchCompanyCategory != '' ">
							AND CCI.SEGMENT_CODE = #{searchCompanyCategory}
						</if>
						 <!-- 검색 고객사 -->
						<if test="searchCompanyName != null and searchCompanyName != '' ">
							AND CCI.COMPANY_NAME LIKE CONCAT('%', #{searchCompanyName}, '%')
						</if>
						 <!-- 검색 고객ID -->
						<if test="searchCustomerId != null and searchCustomerId != '' ">
							 AND CII.CUSTOMER_ID = #{searchCustomerId}  
						</if>
						GROUP BY SCEL.EVENT_ID
		<![CDATA[						
					) AS CSB ON CEL.EVENT_ID = CSB.EVENT_ID	
					LEFT OUTER JOIN
					OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
					LEFT OUTER JOIN
					CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
					LEFT OUTER JOIN 
					(	
						SELECT * 
						FROM (
							SELECT CEA.EVENT_ID, CEA.ACTION_ID, CEA.CONTENTS, CEA.SOLVE_DUE_DATE, CEA.SOLVE_CLOSE_DATE, OMI.HAN_NAME AS SOLVE_OWNER_NAME,
						           IF(@PREV <> CEA.EVENT_ID, @CNT := 1, @CNT := @CNT + 1) AS RANK, @PREV := CEA.EVENT_ID
						    FROM CLIENT_EVENT_ACTION AS CEA
						    INNER JOIN OUR_MEMBERS_INFO AS OMI ON CEA.SOLVE_OWNER_ID = OMI.MEMBER_ID_NUM, 
						    (SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT
						    WHERE 1=1
						    ORDER BY CEA.EVENT_ID ASC, CEA.ACTION_ID DESC
					    ) AS SUB_OHA 
						WHERE 1=1
						AND SUB_OHA.RANK <= 5 
					) AS CEA ON CEA.EVENT_ID = CEL.EVENT_ID
					LEFT OUTER JOIN
		            (
		            	SELECT COUNT(EVENT_ID) AS FILE_COUNT, EVENT_ID
		            	FROM CLIENT_EVENT_FILE_STORE
		            	GROUP BY EVENT_ID
		            ) AS FC ON FC.EVENT_ID = CEL.EVENT_ID
				WHERE 1=1
		]]>	
				<include refid="clientContactWhere" />
				
				<if test="deviceCheck == 'mobile' ">		
					<if test="searchKeyword != null and searchKeyword != '' ">
						AND
						(
						CEL.EVENT_SUBJECT LIKE CONCAT('%', #{searchKeyword}, '%')
						OR
						CSB.CUSTOMER_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
						OR
						CSB.COMPANY_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
						)
					</if>

					<if test="selVal != null and selVal != '' ">
						<choose>
							<when test="global_role_code.contains('ROLE_CEO')">
								AND ODI.DIVISION_NO = #{selVal}
							</when>
							<when test="global_role_code.contains('ROLE_DIVISION')">
								AND OMI.MEMBER_TEAM = #{selVal}
							</when>
							<when test="global_role_code.contains('ROLE_TEAM')">
								AND OMI.MEMBER_ID_NUM = #{selVal}
							</when>
							<when test="global_role_code.contains('ROLE_MEMBER')">
								AND OMI.MEMBER_ID_NUM = #{global_member_id}
							</when>
							<otherwise>
								AND ODI.DIVISION_NO = #{selVal}
							</otherwise>
						</choose>
					</if>
				</if>				
				GROUP BY CEL.EVENT_ID
				HAVING 1=1				
				<if test="searchCustomerName != null and searchCustomerName != '' ">
					AND CUSTOMER_NAME LIKE CONCAT('%', #{searchCustomerName}, '%')	 
				</if>	
		) AS CONTACT
		
		<choose>
			<when test="sortCategory != null and sortCategory != '' ">
				ORDER BY ${sortCategory}
			</when>
			<otherwise>
				ORDER BY CONTACT.LATELY_UPDATE_DATE DESC
			</otherwise>
		</choose>
			
		<choose>
			<when test="numberPagingUseYn != null and numberPagingUseYn.equalsIgnoreCase('Y')">
				<include refid="common.pagingPost2"/> 
			</when>
			<otherwise>
				<choose>
					<when test="pageStart != null and rowCount != null">
						<include refid="common.pagingPost2" />
					</when>
					<otherwise>
						<!-- LIMIT 0, 10 -->
					</otherwise>
				</choose>
			</otherwise>
		</choose>			
	</select>
	
	<select id="selectClientMasterErpCd" parameterType="hashmap" resultType="String">
		SELECT ERP_CLIENT_CODE
		FROM CLIENT_INDIVIDUAL_INFO
		WHERE 1=1
		AND CUSTOMER_ID = #{customer_id}
	</select>
	
	
	<!-- 고객컨택 카운트, 결과내 검색 활용 -->
	<select id="selectClientContactCount" parameterType="hashmap" resultType="hashmap">
				SELECT 
					COUNT(TB.EVENT_ID) AS listCount, GROUP_CONCAT(TB.EVENT_ID) AS searchPKArray
					<choose>
						<when test="global_role_code.contains('CEO')">
							, GROUP_CONCAT(DISTINCT TB.DIVISION_NO) AS searchNoArray
							, GROUP_CONCAT(DISTINCT TB.DIVISION_NAME) AS searchNameArray
						</when>
						<when test="global_role_code.contains('DIVISION')">
							, GROUP_CONCAT(DISTINCT TB.TEAM_NO) AS searchNoArray
							, GROUP_CONCAT(DISTINCT TB.TEAM_NAME) AS searchNameArray
						</when>
						<when test="global_role_code.contains('TEAM')">
							, GROUP_CONCAT(DISTINCT TB.MEMBER_ID_NUM) AS searchNoArray
							, GROUP_CONCAT(DISTINCT TB.HAN_NAME) AS searchNameArray
						</when>
						<when test="global_role_code.contains('MEMBER')">
						</when>
						<otherwise>
							, GROUP_CONCAT(DISTINCT TB.DIVISION_NO) AS searchNoArray
							, GROUP_CONCAT(DISTINCT TB.DIVISION_NAME) AS searchNameArray
						</otherwise>								
					</choose>
				FROM
				<![CDATA[
				( 
						SELECT 
								CEL.EVENT_ID
								, CSB.CUSTOMER_NAME
								, ODI.DIVISION_NO
								, ODI.DIVISION_NAME
								, OTI.TEAM_NO
								, OTI.TEAM_NAME
								, OMI.MEMBER_ID_NUM
								, OMI.HAN_NAME
						FROM
						CLIENT_EVENT_LOG AS CEL
						INNER JOIN
						OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
						INNER JOIN
						OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
						INNER JOIN
						OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
						INNER JOIN
						(
							SELECT 
								SCEL.EVENT_ID,
								GROUP_CONCAT(CII.CUSTOMER_NAME ORDER BY CCL.CLIENT_LIST_ID) AS CUSTOMER_NAME,
								GROUP_CONCAT(CCI.COMPANY_NAME ORDER BY CCL.CLIENT_LIST_ID) AS COMPANY_NAME
			      			FROM 
			      			CLIENT_EVENT_LOG as SCEL
			      			INNER JOIN
							COM_CLIENT_LIST AS CCL ON CCL.LOG_ID = SCEL.EVENT_ID
			      			INNER JOIN
							CLIENT_INDIVIDUAL_INFO AS CII ON CCL.CLIENT_ID = CII.CUSTOMER_ID 
							INNER JOIN
							CLIENT_COMPANY_INFO AS CCI ON CII.COMPANY_ID = CCI.COMPANY_ID
							WHERE 1=1 
							AND CCL.CATEGORY = '1'
	]]>							
							<!-- 검색 고객사ID -->
							<if test="searchCompany != null and searchCompany != '' ">
								AND CCI.COMPANY_ID = #{searchCompany}
							</if>
							<!-- 검색 고객사 그룹 -->
							<if test="searchCompanyCategory != null and searchCompanyCategory != '' ">
								AND CCI.SEGMENT_CODE = #{searchCompanyCategory}
							</if>
							 <!-- 검색 고객사 -->
							<if test="searchCompanyName != null and searchCompanyName != '' ">
								AND CCI.COMPANY_NAME LIKE CONCAT('%', #{searchCompanyName}, '%')
							</if>
							 <!-- 검색 고객ID -->
							<if test="searchCustomerId != null and searchCustomerId != '' ">
								 AND CII.CUSTOMER_ID = #{searchCustomerId}  
							</if>
	<![CDATA[							
							GROUP BY SCEL.EVENT_ID
						) AS CSB ON CEL.EVENT_ID = CSB.EVENT_ID	
						LEFT OUTER JOIN
						OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
						LEFT OUTER JOIN
						CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
						LEFT OUTER JOIN 
						(	
							SELECT * 
							FROM (
								SELECT EVENT_ID, ACTION_ID, CONTENTS, SOLVE_DUE_DATE, SOLVE_CLOSE_DATE,
							           IF(@PREV <> EVENT_ID, @CNT := 1, @CNT := @CNT + 1) AS RANK, @PREV := EVENT_ID
							    FROM CLIENT_EVENT_ACTION, (SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT
							    WHERE 1=1
							    ORDER BY EVENT_ID ASC, ACTION_ID DESC
						    ) AS SUB_OHA 
							WHERE 1=1
							AND SUB_OHA.RANK <= 5 
						) AS CEA ON CEA.EVENT_ID = CEL.EVENT_ID
						LEFT OUTER JOIN
			            (
			            	SELECT COUNT(EVENT_ID) AS FILE_COUNT, EVENT_ID
			            	FROM CLIENT_EVENT_FILE_STORE
			            	GROUP BY EVENT_ID
			            ) AS FC ON FC.EVENT_ID = CEL.EVENT_ID
					WHERE 1=1
	]]>					
						<include refid="clientContactWhere" />
						
						<if test="deviceCheck == 'mobile' ">
							<if test="searchKeyword != null and searchKeyword != '' ">
								AND
								(
								CEL.EVENT_SUBJECT LIKE CONCAT('%', #{searchKeyword}, '%')
								OR
								CSB.CUSTOMER_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
								OR
								CSB.COMPANY_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
								)
							</if>
				
							<if test="selVal != null and selVal != '' ">
								<choose>
									<when test="global_role_code.contains('ROLE_CEO')">
										AND ODI.DIVISION_NO = #{selVal}
									</when>
									<when test="global_role_code.contains('ROLE_DIVISION')">
										AND OMI.MEMBER_TEAM = #{selVal}
									</when>
									<when test="global_role_code.contains('ROLE_TEAM')">
										AND OMI.MEMBER_ID_NUM = #{selVal}
									</when>
									<when test="global_role_code.contains('ROLE_MEMBER')">
										AND OMI.MEMBER_ID_NUM = #{global_member_id}
									</when>
									<otherwise>
										AND ODI.DIVISION_NO = #{selVal}
									</otherwise>
								</choose>
							</if>
						</if>						
						
							GROUP BY CEL.EVENT_ID			
							HAVING 1=1
						<if test="searchCustomerName != null and searchCustomerName != '' ">
							AND CUSTOMER_NAME LIKE CONCAT('%', #{searchCustomerName}, '%')	 
						</if>	
				) AS TB
	</select>
	
	<!-- 고객컨택 리스트 검색 조건 -->
	<sql id="clientContactWhere">
		<if test="companyInfoContact != 'true' ">
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND OMI.MEMBER_DIVISION = #{global_member_division}
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
		</choose>
		</if>
		
		<if test="resultInSearch != null and resultInSearch.equalsIgnoreCase('Y')">
			<choose>
				<when test="searchPKArray != null and searchPKArray != '' ">
				AND CEL.EVENT_ID IN(${searchPKArray})
				</when>
				<otherwise>
				AND CEL.EVENT_ID IN('')
				</otherwise>
			</choose>
		</if>
		<!-- 검색 컨택목적 -->
		<if test="searchContactSubject != null and searchContactSubject != '' ">
			AND CEL.EVENT_SUBJECT LIKE CONCAT('%', #{searchContactSubject}, '%') 
		</if>
		 <!-- 검색 보고자 -->
		<if test="searchReportName != null and searchReportName != '' ">
			AND OMI.HAN_NAME LIKE CONCAT('%', #{searchReportName}, '%') 
		</if>
		 <!-- 검색 분류 -->
		<if test="searchCategory != null and searchCategory != '' ">
			AND CEL.EVENT_CATEGORY =  #{searchCategory}
		</if>
		 <!-- 부서 -->
		<if test="searchDivision != null and searchDivision != '' ">
			AND OMI.MEMBER_DIVISION =  #{searchDivision}
		</if>
		<!-- 팀 -->
		<if test="searchTeam != null and searchTeam != '' ">
			AND OMI.MEMBER_TEAM =  #{searchTeam}
		</if>
		<!-- 직원 -->
		<if test="searchMember != null and searchMember != '' ">
			AND OMI.MEMBER_ID_NUM =  #{searchMember}
		</if>
		<!-- year -->
		<if test="searchYear != null and searchYear != '' ">
			AND YEAR(CEL.SYS_REGISTER_DATE) = #{searchYear}
		</if>
		<!-- quarter -->
		<if test="searchQuarter != null and searchQuarter != '' ">
			AND QUARTER(CEL.SYS_REGISTER_DATE) = #{searchQuarter}
		</if>
		<!-- contactDate -->
		<if test="searchContactStartDate != null and searchContactStartDate != '' ">
			AND CEL.EVENT_DATE >= #{searchContactStartDate}
		</if>
		<!-- contactDate -->
		<if test="searchContactEndDate != null and searchContactEndDate != '' ">
			<![CDATA[
			AND CEL.EVENT_DATE < #{searchContactEndDate}
			]]>
		</if>
		<!-- action status -->
		<if test="searchActionStatus != null and searchActionStatus != '' ">
			AND CEA.STATUS = #{searchActionStatus}
		</if>
		<!-- 진행상황 -->
		<choose>
			<when test="searchRelate == '고객이슈' ">
				AND CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
			</when>
			<!-- 
			<when test="searchRelate == 'NCR' ">
				AND CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
			</when>
			<when test="searchRelate == '펀칭' ">
				AND CPL.EVENT_ID IS NOT NULL AND CPL.EVENT_ID != ''
			</when>
			 -->
			<when test="searchRelate == '잠재영업기회' ">
				AND OHL.EVENT_ID IS NOT NULL AND OHL.EVENT_ID != ''
			</when>
		</choose>
	</sql>
	
	<!-- 일단 주석 처리 2017 03 16 김진욱 -->
	<!-- <select id="clientContactSearchDetailGroup1" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	       SELECT 
					CEL.EVENT_CATEGORY 
			FROM 
				CLIENT_EVENT_LOG AS CEL		
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI ON CEL.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN
				OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
			WHERE 1=1
			GROUP BY CEL.EVENT_CATEGORY
		]]>
	</select>
	
	<select id="clientContactSearchDetailGroup2" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	       SELECT 
					CCI.COMPANY_NAME 
			FROM 
				CLIENT_EVENT_LOG AS CEL		
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI ON CEL.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN
				OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID= OMI.MEMBER_ID_NUM
			WHERE 1=1
			GROUP BY CCI.COMPANY_NAME
		]]>
	</select> -->
	
	<select id="selectClientContactDashBoardDivision" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	       	SELECT 
	       		OMI.MEMBER_DIVISION,
				ODI.DIVISION_NAME,
				COUNT(CEL.EVENT_ID) AS TOTAL_COUNT,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '방문'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_1,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '마케팅'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_2,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = 'SNS'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_3,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = 'E-mail'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_4,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '전화'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_5,
				SUM(CASE
					WHEN CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
					THEN 1
					ELSE 0
				END) AS ISSUE_COUNT,
				SUM(CASE
					WHEN OHL.EVENT_ID IS NOT NULL AND OHL.EVENT_ID != ''
					THEN 1
					ELSE 0
				END) AS OPP_COUNT
			FROM 
				CLIENT_EVENT_LOG AS CEL
				LEFT OUTER JOIN
				OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
				LEFT OUTER JOIN
				CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
				INNER JOIN
				OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM 
				LEFT OUTER JOIN
				OUR_DIVISION_INFO AS ODI ON OMI.MEMBER_DIVISION = ODI.DIVISION_NO
			WHERE 1=1
			AND YEAR(CEL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
			AND QUARTER(CEL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
			AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
			GROUP BY OMI.MEMBER_DIVISION WITH ROLLUP
			HAVING 1=1 
		]]>
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
			AND OMI.MEMBER_DIVISION = #{global_member_division}
			</when>
		</choose>	
	</select>
	
	<select id="selectClientContactDashBoardTeam" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	       	SELECT 
				OMI.MEMBER_DIVISION,
				OMI.MEMBER_TEAM,
				OTI.TEAM_NAME,
				COUNT(CEL.EVENT_ID) AS TOTAL_COUNT,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '방문'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_1,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '마케팅'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_2,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = 'SNS'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_3,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = 'E-mail'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_4,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '전화'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_5,
				SUM(CASE
					WHEN CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
					THEN 1
					ELSE 0
				END) AS ISSUE_COUNT,
				SUM(CASE
					WHEN OHL.EVENT_ID IS NOT NULL AND OHL.EVENT_ID != ''
					THEN 1
					ELSE 0
				END) AS OPP_COUNT
			FROM 
				CLIENT_EVENT_LOG AS CEL
				LEFT OUTER JOIN
				OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
				LEFT OUTER JOIN
				CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
				INNER JOIN
				OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
				LEFT OUTER JOIN
				OUR_TEAM_INFO AS OTI ON OMI.MEMBER_TEAM = OTI.TEAM_NO
			WHERE 1=1
			AND YEAR(CEL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
			AND QUARTER(CEL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
			AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
		]]>
		GROUP BY OMI.MEMBER_DIVISION,OMI.MEMBER_TEAM
		HAVING 1=1
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				AND OMI.MEMBER_DIVISION = #{searchDivision}
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
				AND OMI.MEMBER_DIVISION = #{searchDivision}
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND OMI.MEMBER_DIVISION = #{searchDivision}
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OMI.MEMBER_DIVISION = #{global_member_division}
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
		</choose>
	</select>
	
	<select id="selectClientContactDashBoardMember" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	       	SELECT 
				OMI.MEMBER_DIVISION,
				OMI.MEMBER_TEAM,
				OMI.MEMBER_ID_NUM,
				OMI.HAN_NAME,
				COUNT(CEL.EVENT_ID) AS TOTAL_COUNT,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '방문'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_1,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '마케팅'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_2,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = 'SNS'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_3,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = 'E-mail'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_4,
				SUM(CASE 
					WHEN CEL.EVENT_CATEGORY = '전화'
					THEN 1
					ELSE 0 
				END) AS EVENT_CATEGORY_5,
				SUM(CASE
					WHEN CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
					THEN 1
					ELSE 0
				END) AS ISSUE_COUNT,
				SUM(CASE
					WHEN OHL.EVENT_ID IS NOT NULL AND OHL.EVENT_ID != ''
					THEN 1
					ELSE 0
				END) AS OPP_COUNT
			FROM 
				CLIENT_EVENT_LOG AS CEL
				LEFT OUTER JOIN
				OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
				LEFT OUTER JOIN
				CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
				INNER JOIN
				OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
				LEFT OUTER JOIN
				OUR_TEAM_INFO AS OTI ON OMI.MEMBER_TEAM = OTI.TEAM_NO
			WHERE 1=1
			AND YEAR(CEL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
			AND QUARTER(CEL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
			AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
			]]>
			GROUP BY OMI.MEMBER_DIVISION,OMI.MEMBER_TEAM,OMI.MEMBER_ID_NUM
			HAVING 1=1
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_MEMBER')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
					<!-- AND OMI.MEMBER_ID_NUM = #{global_member_id} -->
				</when>
			</choose>
	</select>
	
	<select id="selectClientContactDashBoardCompanyGroup" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		SELECT 
			CCI.SEGMENT_CODE,
			CIS.SEGMENT_HAN_NAME,
			COUNT(CEL.EVENT_ID) AS TOTAL_COUNT,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = '방문'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_1,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = '마케팅'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_2,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = 'SNS'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_3,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = 'E-mail'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_4,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = '전화'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_5,
			SUM(CASE
				WHEN CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
				THEN 1
				ELSE 0
			END) AS ISSUE_COUNT,
			SUM(CASE
				WHEN OHL.EVENT_ID IS NOT NULL AND OHL.EVENT_ID != ''
				THEN 1
				ELSE 0
			END) AS OPP_COUNT
		FROM
			CLIENT_EVENT_LOG AS CEL
			INNER JOIN
			(
				SELECT CII.COMPANY_ID, CCL.LOG_ID
				FROM
				COM_CLIENT_LIST AS CCL
				INNER JOIN
				CLIENT_INDIVIDUAL_INFO AS CII ON CCL.CLIENT_ID = CII.CUSTOMER_ID AND CCL.CATEGORY = '1' 
				INNER JOIN
				CLIENT_COMPANY_INFO AS CCI ON CII.COMPANY_ID = CCI.COMPANY_ID
				GROUP BY CII.COMPANY_ID, CCL.LOG_ID
			) AS OUT_CCL ON OUT_CCL.LOG_ID = CEL.EVENT_ID
			INNER JOIN
			CLIENT_COMPANY_INFO AS CCI ON OUT_CCL.COMPANY_ID = CCI.COMPANY_ID 
			INNER JOIN
			CODE_INDUSTRY_SEGMENT AS CIS ON CCI.SEGMENT_CODE = CIS.SEGMENT_CODE
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON OMI.MEMBER_ID_NUM = CEL.CREATOR_ID
			LEFT OUTER JOIN
			OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
			LEFT OUTER JOIN
			CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
		WHERE 1=1
		AND YEAR(CEL.SYS_REGISTER_DATE) =   YEAR(#{searchDate})
		AND QUARTER(CEL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
		AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
		]]>
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND OMI.MEMBER_DIVISION = #{global_member_division}
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
		</choose>
		GROUP BY CCI.SEGMENT_CODE WITH ROLLUP
	</select>
	
	<select id="selectClientContactDashBoardComapny" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		SELECT 
			CCI.COMPANY_ID,
			CCI.COMPANY_NAME,
			CCI.SEGMENT_CODE,
			COUNT(CEL.EVENT_ID) AS TOTAL_COUNT,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = '방문'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_1,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = '마케팅'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_2,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = 'SNS'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_3,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = 'E-mail'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_4,
			SUM(CASE 
				WHEN CEL.EVENT_CATEGORY = '전화'
				THEN 1
				ELSE 0 
			END) AS EVENT_CATEGORY_5,
			SUM(CASE
				WHEN CIL.EVENT_ID IS NOT NULL AND CIL.EVENT_ID != ''
				THEN 1
				ELSE 0
			END) AS ISSUE_COUNT,
			SUM(CASE
				WHEN OHL.EVENT_ID IS NOT NULL AND OHL.EVENT_ID != ''
				THEN 1
				ELSE 0
			END) AS OPP_COUNT
		FROM
			CLIENT_EVENT_LOG AS CEL
			INNER JOIN
			(
				SELECT CII.COMPANY_ID, CCL.LOG_ID
				FROM
				COM_CLIENT_LIST AS CCL
				INNER JOIN
				CLIENT_INDIVIDUAL_INFO AS CII ON CCL.CLIENT_ID = CII.CUSTOMER_ID AND CCL.CATEGORY = '1' 
				INNER JOIN
				CLIENT_COMPANY_INFO AS CCI ON CII.COMPANY_ID = CCI.COMPANY_ID
				GROUP BY CII.COMPANY_ID, CCL.LOG_ID
			) AS OUT_CCL ON OUT_CCL.LOG_ID = CEL.EVENT_ID
			INNER JOIN
			CLIENT_COMPANY_INFO AS CCI ON OUT_CCL.COMPANY_ID = CCI.COMPANY_ID 
			INNER JOIN
			CODE_INDUSTRY_SEGMENT AS CIS ON CCI.SEGMENT_CODE = CIS.SEGMENT_CODE
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON OMI.MEMBER_ID_NUM = CEL.CREATOR_ID
			LEFT OUTER JOIN
			OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
			LEFT OUTER JOIN
			CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
		WHERE 1=1
		AND YEAR(CEL.SYS_REGISTER_DATE) =   YEAR(#{searchDate})
		AND QUARTER(CEL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
		AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
		]]>
	 	<if test="searchCategory != null and searchCategory != '' ">
		AND CCI.SEGMENT_CODE = #{searchCategory}
		</if>
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND OMI.MEMBER_DIVISION = #{global_member_division}
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
		</choose>
		GROUP BY CCI.COMPANY_ID
	</select>
	
	<select id="selectContactDetail" parameterType="hashmap" resultType="hashmap">
			SELECT 
				CEL.EVENT_ID, 
				CEL.CREATOR_ID, 
				CEL.CREATE_DATETIME, 
				CEL.EVENT_OWNER, 
				CEL.EVENT_DATE, 
				DATE_FORMAT(CEL.EVENT_START_TIME, '%H:%i') AS EVENT_START_TIME, 
				DATE_FORMAT(CEL.EVENT_END_TIME, '%H:%i') AS EVENT_END_TIME, 
				CEL.EVENT_CATEGORY, 
				CEL.EVENT_SUBJECT, 
				CEL.EVENT_CONTENTS, 
				CEL.FOLLOW_CONTENTS,
				CEL.CALENDAR_EVENT_ID,
				DATE_FORMAT(CEL.SYS_REGISTER_DATE, '%Y-%m-%d') AS SYS_REGISTER_DATE, 
				DATE_FORMAT(CEL.SYS_UPDATE_DATE, '%Y-%m-%d') AS SYS_UPDATE_DATE,
				DATE_FORMAT(CEL.SYS_UPDATE_DATE, '%Y-%m-%d %H:%i') AS LATELY_UPDATE_DATE,
				OMI.HAN_NAME,
				OMI.MEMBER_ID_NUM,
				GROUP_CONCAT(CCI.COMPANY_ID ORDER BY CCL.CLIENT_LIST_ID) AS COMPANY_ID,
				GROUP_CONCAT(CCI.COMPANY_NAME ORDER BY CCL.CLIENT_LIST_ID) AS COMPANY_NAME,
				GROUP_CONCAT(CII.CUSTOMER_ID ORDER BY CCL.CLIENT_LIST_ID) AS CUSTOMER_ID,
				GROUP_CONCAT(CII.CUSTOMER_NAME ORDER BY CCL.CLIENT_LIST_ID) AS CUSTOMER_NAME,
				GROUP_CONCAT(CII.POSITION ORDER BY CCL.CLIENT_LIST_ID) AS POSITION,
				CIL.ISSUE_ID,
				OHL.OPPORTUNITY_HIDDEN_ID,
				(
					SELECT COUNT(*) 
					FROM COACHING_TALK AS CT 
					WHERE 1=1 AND CATEGORY='CONTACT' AND CEL.EVENT_ID = CT.ID
				)AS COACHING_TALK_COUNT
		FROM 
			CLIENT_EVENT_LOG AS CEL		
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
			INNER JOIN
			COM_CLIENT_LIST AS CCL ON CCL.LOG_ID = CEL.EVENT_ID AND CCL.CATEGORY = '1'
			INNER JOIN
			CLIENT_INDIVIDUAL_INFO AS CII ON CCL.CLIENT_ID = CII.CUSTOMER_ID 
			INNER JOIN
			CLIENT_COMPANY_INFO AS CCI ON CII.COMPANY_ID = CCI.COMPANY_ID
			LEFT OUTER JOIN
			CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
			LEFT OUTER JOIN
			OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
		WHERE 1=1
			AND CEL.EVENT_ID = #{pkNo}
	</select>
	
	<select id="selectContactFileList" parameterType="java.util.List" resultType="hashmap">
		SELECT 
			FILE_ID, 
			EVENT_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			FILE_NAME, 
			FILE_PATH, 
			FILE_TYPE, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE
		FROM CLIENT_EVENT_FILE_STORE
		WHERE 1=1
		AND EVENT_ID = #{pkNo}
	</select>
	
	<select id="gridActionPlanContact" parameterType="java.util.List" resultType="hashmap">
		SELECT 
			CEA.ACTION_ID, 
			CEA.EVENT_ID, 
			CEA.CREATOR_ID, 
			CEA.ACTION_ITEM, 
			CEA.CONTENTS, 
			CEA.SOLVE_OWNER_ID,
			OMI.HAN_NAME AS SOLVE_OWNER,
			OMI.POSITION_STATUS AS SOLVE_OWNER_POSITION, 
			CEA.SOLVE_DUE_DATE, 
			CEA.SOLVE_CLOSE_DATE, 
			CASE 
				WHEN CEA.SOLVE_CLOSE_DATE IS NOT NULL AND CEA.SOLVE_CLOSE_DATE != ''
				THEN 'green'
				WHEN CEA.SOLVE_DUE_DATE >= CURRENT_DATE()
				THEN 'yellow' 
				WHEN CURRENT_DATE() >  CEA.SOLVE_DUE_DATE
				THEN 'red' 
			END AS STATUS_COLOR, 
			CEA.SYS_REGISTER_DATE, 
			CEA.SYS_UPDATE_DATE, 
			CEA.STATUS,
			CEA.STATUS AS HIDDEN_STATUS
		FROM 
		CLIENT_EVENT_ACTION as CEA
		LEFT OUTER JOIN
		OUR_MEMBERS_INFO AS OMI ON CEA.SOLVE_OWNER_ID = OMI.MEMBER_ID_NUM
		WHERE 1=1
		AND EVENT_ID = #{pkNo}
		ORDER BY CEA.ACTION_ID ASC
	</select>
	
	<select id="clientContactFileList" parameterType="java.util.List" resultType="hashmap">
		SELECT 
			FILE_ID, 
			EVENT_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			FILE_NAME, 
			FILE_PATH, 
			FILE_TYPE, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE
		FROM CLIENT_EVENT_FILE_STORE
		<choose>
			<when test="filePKArray != null and filePKArray != '' ">
			WHERE EVENT_ID IN(${filePKArray})
			</when>
			<otherwise>
			WHERE EVENT_ID IN('')
			</otherwise>
		</choose>
		<!-- <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
	        #{item.BIZ_ID}
	  	</foreach> -->
	</select>
	
	 <insert id="insertClientContact" parameterType="hashmap">
	        INSERT INTO CLIENT_EVENT_LOG
	        (
	        	CREATOR_ID, 
	        	CREATE_DATETIME, 
	        	EVENT_DATE, 
	        	EVENT_START_TIME,
	        	EVENT_END_TIME,
	        	EVENT_CATEGORY, 
	        	EVENT_SUBJECT, 
	        	EVENT_CONTENTS, 
	        	FOLLOW_CONTENTS,
	        	FOLLOW_MANAGER_ID,
	        	FOLLOW_DATE,
	        	CALENDAR_EVENT_ID
	        )
			VALUES
			(
				#{hiddenModalCreatorId}, 
				CURRENT_TIMESTAMP, 
				#{textModalEventDate}, 
				#{selectModalStartDateTime}, 
				#{selectModalEndDateTime}, 
				#{selectModalCategory}, 
				#{textModalSubject}, 
				#{textareaModalEventContents},
				#{textareaFollowUpAction}, 
				#{hiddenModalFollowManagerId},
				#{textModalFollowUpDate},
				#{CALENDAR_EVENT_ID}
			);
		<selectKey keyProperty="filePK" resultType="Integer" order="AFTER">
        	SELECT LAST_INSERT_ID();
    	</selectKey>
	</insert>
	
	<update id="updateClientContact" parameterType="hashmap">
       UPDATE CLIENT_EVENT_LOG
       SET 
       	EVENT_DATE = #{textModalEventDate}, 
       	EVENT_START_TIME = #{selectModalStartDateTime},
       	EVENT_END_TIME = #{selectModalEndDateTime},
       	EVENT_CATEGORY = #{selectModalCategory}, 
       	EVENT_SUBJECT = #{textModalSubject}, 
       	EVENT_CONTENTS = #{textareaModalEventContents},
       	FOLLOW_CONTENTS = #{textareaFollowUpAction},
       	FOLLOW_MANAGER_ID = #{hiddenModalFollowManagerId},
       	FOLLOW_DATE = #{textModalFollowUpDate},
       	<if test="hiddenModalCalendarEventId != null and hiddenModalCalendarEventId != '' ">
					CALENDAR_EVENT_ID = #{hiddenModalCalendarEventId},
				</if>
				SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE EVENT_ID=#{hiddenModalPK};
	</update>
	
	<update id="updateClientMasterErpCd" parameterType="hashmap">
	        UPDATE CLIENT_INDIVIDUAL_INFO
	        SET 
	        	ERP_CLIENT_CODE = #{clientErpCd} 
			WHERE CUSTOMER_ID=#{customer_id};
	</update>
	
	
	<delete id="deleteClientContact" parameterType="hashmap">
		DELETE FROM CLIENT_EVENT_FILE_STORE WHERE EVENT_ID=#{hiddenModalPK};
		DELETE FROM CLIENT_EVENT_LOG WHERE EVENT_ID=#{hiddenModalPK};
	</delete>
	
	
	<select id="gridContactActionItems" parameterType="hashmap" resultType="hashmap">
	    <![CDATA[
	        SELECT 
	        	@ROWNUM := @ROWNUM +1 AS ROWNUM,	
	        	ACTION_ID, 
	        	EVENT_ID, 
	        	CREATOR_ID, 
	        	ACTION_ITEM, 
	        	CONTENTS, 
	        	SOLVE_OWNER_ID,
	        	SOLVE_OWNER, 
	        	SOLVE_DUE_DATE, 
	        	SOLVE_CLOSE_DATE, 
	        	SYS_REGISTER_DATE, 
	        	SYS_UPDATE_DATE, 
	        	STATUS
			FROM CLIENT_EVENT_ACTION ,  (SELECT @ROWNUM:=0) AS ROWNUM	
			WHERE 1=1
			AND EVENT_ID = #{hiddenModalPK}
			ORDER BY ACTION_ID ASC;
		]]>
	</select>
	
	<insert id="insertContactActionItem" parameterType="hashmap">
	 	INSERT INTO CLIENT_EVENT_ACTION
		(
			EVENT_ID, 
			CREATOR_ID, 
			ACTION_ITEM, 
			CONTENTS,
			SOLVE_OWNER_ID,
			SOLVE_OWNER, 
			SOLVE_DUE_DATE, 
			SOLVE_CLOSE_DATE, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE, 
			STATUS
		)
		VALUES
		(
			#{hiddenModalPK}, 
			#{hiddenModalCreatorId}, 
			#{ACTION_ITEM}, 
			#{CONTENTS}, 
			#{SOLVE_OWNER_ID},
			#{SOLVE_OWNER}, 
			<choose>
				<when test="SOLVE_DUE_DATE != null and SOLVE_DUE_DATE != '' ">
					#{SOLVE_DUE_DATE},
				</when>
				<otherwise>
					NULL,
				</otherwise>
			</choose> 
			<choose>
				<when test="SOLVE_CLOSE_DATE != null and SOLVE_CLOSE_DATE != '' ">
					#{SOLVE_CLOSE_DATE},
				</when>
				<otherwise>
					NULL,
				</otherwise>
			</choose> 
			CURRENT_TIMESTAMP, 
			CURRENT_TIMESTAMP, 
			#{HIDDEN_STATUS}
		);
	</insert>
	
	<update id="updateContactActionItem" parameterType="hashmap">
	        UPDATE CLIENT_EVENT_ACTION
	        SET 
	        	ACTION_ITEM	=      #{ACTION_ITEM},      
				CONTENTS	=         #{CONTENTS},
				SOLVE_OWNER_ID	=	#{SOLVE_OWNER_ID},       
				SOLVE_OWNER	=         #{SOLVE_OWNER},
				<choose>
					<when test="SOLVE_DUE_DATE != null and SOLVE_DUE_DATE != '' ">
						SOLVE_DUE_DATE= #{SOLVE_DUE_DATE},
					</when>
					<otherwise>
						SOLVE_DUE_DATE = NULL,
					</otherwise>
				</choose> 
				<choose>
					<when test="SOLVE_CLOSE_DATE != null and SOLVE_CLOSE_DATE != '' ">
						SOLVE_CLOSE_DATE= #{SOLVE_CLOSE_DATE},
					</when>
					<otherwise>
						SOLVE_CLOSE_DATE = NULL,
					</otherwise>
				</choose>
				STATUS= #{HIDDEN_STATUS},
				SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE 1=1
			AND EVENT_ID=#{hiddenModalPK}
			AND ACTION_ID = #{ACTION_ID}
	</update>
	
	<delete id="deleteContactActionItem" parameterType="hashmap">
		DELETE FROM CLIENT_EVENT_ACTION WHERE EVENT_ID=#{hiddenModalPK} AND ACTION_ID = #{action_id};
	</delete>
	
	<delete id="deleteActionPlanHiddenOpportunity" parameterType="hashmap">
		DELETE FROM opportunity_hidden_action WHERE OPPORTUNITY_HIDDEN_ID=#{hiddenModalPK} AND ACTION_ID = #{action_id};
	</delete>
	
	<select id="selectHiddenOpportunityActionStatus" parameterType="hashmap" resultType="hashmap">
		SELECT 
		OPPORTUNITY_HIDDEN_ID, 
		STATUS 
		FROM OPPORTUNITY_HIDDEN_ACTION 
		WHERE OPPORTUNITY_HIDDEN_ID = #{OPPORTUNITY_HIDDEN_ID}
	</select>
	
	
	<select id="selectHiddenOpportunity" parameterType="hashmap" resultType="hashmap">
			<![CDATA[
			SELECT HOPP.*
			FROM (				
				SELECT 
						OHL.OPPORTUNITY_HIDDEN_ID, 
						OHL.SUBJECT, 
						OHL.DETAIL_CONENTS, 
						OHL.CATEGORY, 
						OHL.OPPORTUNITY_AMOUNT, 
						OHL.SALESMAN_ID, 
						OHL.CONTRACT_START_DATE, 
						OHL.SALES_CHANGE_DATE,
						OHL.SALES_RESULT, 
						OHL.CUSTOMER_ID, 
						OHL.CREATOR_ID, 
						OHL.EVENT_ID,
						(
							SELECT 
								TEAM_NAME
							FROM OUR_TEAM_INFO
							WHERE TEAM_NO = (
								SELECT 
									MEMBER_TEAM 
								FROM  OUR_MEMBERS_INFO 
								WHERE MEMBER_ID_NUM = OHL.SALESMAN_ID
							)
						) AS TEAM_NAME,
						CASE 
							WHEN OL.OPPORTUNITY_ID IS NOT NULL AND OL.OPPORTUNITY_ID != ''
							THEN '#1ab394'
							WHEN OHL.SALES_CHANGE_DATE >= DATE_FORMAT(NOW(), '%Y-%m-%d')
							THEN '#ffc000' 
							WHEN OHL.SALES_CHANGE_DATE < DATE_FORMAT(NOW(), '%Y-%m-%d')
							THEN '#f20056' 
						END AS STATUS,
						DATE_FORMAT(OHL.SYS_REGISTER_DATE, '%Y-%m-%d') AS SYS_REGISTER_DATE, 
						DATE_FORMAT(OHL.SYS_UPDATE_DATE, '%Y-%m-%d') AS SYS_UPDATE_DATE,
						DATE_FORMAT(OHL.SYS_UPDATE_DATE, '%Y-%m-%d %H:%i') AS LATELY_UPDATE_DATE,
						CCI2.COMPANY_NAME AS CUSTOMER_NAME,
						OMI.HAN_NAME,
						OMI2.HAN_NAME AS SALESMAN_NAME,
						CCI.COMPANY_ID,
						CCI.COMPANY_NAME,
						OL.OPPORTUNITY_ID,
						OMI2.POSITION_STATUS AS SALESMAN_POSITION,
						MAX(IF(OHA.RANK=1, OHA.DUE_DATE, "")) AS DUE_DATE_1,
						MAX(IF(OHA.RANK=2, OHA.DUE_DATE, "")) AS DUE_DATE_2,
						MAX(IF(OHA.RANK=3, OHA.DUE_DATE, "")) AS DUE_DATE_3,
						MAX(IF(OHA.RANK=4, OHA.DUE_DATE, "")) AS DUE_DATE_4,
						MAX(IF(OHA.RANK=5, OHA.DUE_DATE, "")) AS DUE_DATE_5,
						MAX(IF(OHA.RANK=1, OHA.CLOSE_DATE, "")) AS CLOSE_DATE_1,
						MAX(IF(OHA.RANK=2, OHA.CLOSE_DATE, "")) AS CLOSE_DATE_2,
						MAX(IF(OHA.RANK=3, OHA.CLOSE_DATE, "")) AS CLOSE_DATE_3,
						MAX(IF(OHA.RANK=4, OHA.CLOSE_DATE, "")) AS CLOSE_DATE_4,
						MAX(IF(OHA.RANK=5, OHA.CLOSE_DATE, "")) AS CLOSE_DATE_5,
						MAX(IF(OHA.RANK=1, OHA.DETAIL_CONENTS, "")) AS CONTENTS_1,
						MAX(IF(OHA.RANK=2, OHA.DETAIL_CONENTS, "")) AS CONTENTS_2,
						MAX(IF(OHA.RANK=3, OHA.DETAIL_CONENTS, "")) AS CONTENTS_3,
						MAX(IF(OHA.RANK=4, OHA.DETAIL_CONENTS, "")) AS CONTENTS_4,
						MAX(IF(OHA.RANK=5, OHA.DETAIL_CONENTS, "")) AS CONTENTS_5,
						(
							SELECT COUNT(*) 
							FROM COACHING_TALK AS CT 
							WHERE 1=1 AND CATEGORY='HOPP' AND OHL.OPPORTUNITY_HIDDEN_ID = CT.ID
						)AS COACHING_TALK_COUNT
				FROM 
					OPPORTUNITY_HIDDEN_LOG AS OHL		
					LEFT OUTER JOIN
					CLIENT_COMPANY_INFO AS CCI ON OHL.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN 
					OUR_MEMBERS_INFO AS OMI ON OHL.CREATOR_ID = OMI.MEMBER_ID_NUM
					LEFT OUTER JOIN 
					OUR_MEMBERS_INFO AS OMI2 ON OHL.SALESMAN_ID = OMI2.MEMBER_ID_NUM
					LEFT OUTER JOIN
					CLIENT_COMPANY_INFO AS CCI2 ON OHL.CUSTOMER_ID = CCI2.COMPANY_ID
					LEFT OUTER JOIN
					OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID AND OL.TEMP_FLAG = 'N'
					LEFT OUTER JOIN
					( 
						SELECT * 
						FROM (
							SELECT OPPORTUNITY_HIDDEN_ID, ACTION_ID, DETAIL_CONENTS, DUE_DATE, CLOSE_DATE,
						           IF(@PREV <> OPPORTUNITY_HIDDEN_ID, @CNT := 1, @CNT := @CNT + 1) AS RANK, @PREV := OPPORTUNITY_HIDDEN_ID	
						    FROM OPPORTUNITY_HIDDEN_ACTION, (SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT
						    WHERE 1=1
						    ORDER BY OPPORTUNITY_HIDDEN_ID ASC, ACTION_ID DESC
					    ) AS SUB_OHA 
						WHERE 1=1
						AND SUB_OHA.RANK <= 5
					) AS OHA ON OHL.OPPORTUNITY_HIDDEN_ID = OHA.OPPORTUNITY_HIDDEN_ID
				WHERE 1=1
				]]>		
				<include refid="hiddenOpportunityWhere" />
				
				<if test="deviceCheck == 'mobile' ">
					<if test="searchKeyword != null and searchKeyword != '' ">
						AND
						(
						OHL.SUBJECT LIKE CONCAT('%', #{searchKeyword}, '%')
						OR
						CCI.COMPANY_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
						OR
						CCI2.COMPANY_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
						)
					</if>
				
					<if test="textTeamNameList != null and textTeamNameList != '' ">
						<choose>
							<when test="global_role_code.contains('ROLE_CEO')">
								AND OMI2.MEMBER_DIVISION = #{textTeamNameList}
							</when>
							<when test="global_role_code.contains('ROLE_DIVISION')">
								AND OMI2.MEMBER_TEAM = #{textTeamNameList}
							</when>
							<when test="global_role_code.contains('ROLE_TEAM')">
								AND OMI2.MEMBER_ID_NUM = #{textTeamNameList}
							</when>
							<when test="global_role_code.contains('ROLE_MEMBER')">
								AND OMI2.MEMBER_ID_NUM = #{global_member_id}
							</when>
							<otherwise>
								AND OMI2.MEMBER_DIVISION = #{textTeamNameList}
							</otherwise>
						</choose>
					</if>
					
					<choose>
						<when test="textSituationList == 'all' ">
						</when>
						<when test="textSituationList == 'change' ">
							AND OL.OPPORTUNITY_ID IS NOT NULL AND OL.OPPORTUNITY_ID != ''
						</when>
						<when test="textSituationList == 'ing' ">
							AND NULLIF(OL.OPPORTUNITY_ID,'') IS NULL
							AND OHL.SALES_CHANGE_DATE >= DATE_FORMAT(NOW(), '%Y-%m-%d')
						</when>
						<when test="textSituationList == 'delay' ">
							AND NULLIF(OL.OPPORTUNITY_ID,'') IS NULL
				    	<![CDATA[
				    		AND OHL.SALES_CHANGE_DATE < DATE_FORMAT(NOW(), '%Y-%m-%d')
				    		]]>
						</when>
					</choose>		
				</if>				
				
				GROUP BY OHL.OPPORTUNITY_HIDDEN_ID
			) AS HOPP
				
			<choose>
				<when test="sortCategory != null and sortCategory != '' ">
					ORDER BY ${sortCategory}
				</when>
				<otherwise>
					ORDER BY HOPP.LATELY_UPDATE_DATE DESC
				</otherwise>
			</choose>
			
			<include refid="common.pagingPost2"/>
	</select>
	
	<select id="selectHiddenOpportunityCount" parameterType="hashmap" resultType="hashmap">
				SELECT 
					COUNT(*) AS listCount
					, GROUP_CONCAT(OHL.OPPORTUNITY_HIDDEN_ID) AS searchPKArray
					<!-- 모바일에서 검색조건으로 사용 -->
					<choose>
						<when test="global_role_code.contains('CEO')">
							, GROUP_CONCAT(DISTINCT ODI.DIVISION_NO) AS searchNoArray
							, GROUP_CONCAT(DISTINCT ODI.DIVISION_NAME) AS searchNameArray
						</when>
						<when test="global_role_code.contains('DIVISION')">
							, GROUP_CONCAT(DISTINCT OTI.TEAM_NO) AS searchNoArray
							, GROUP_CONCAT(DISTINCT OTI.TEAM_NAME) AS searchNameArray
						</when>
						<when test="global_role_code.contains('TEAM')">
							, GROUP_CONCAT(DISTINCT OMI2.MEMBER_ID_NUM) AS searchNoArray
							, GROUP_CONCAT(DISTINCT OMI2.HAN_NAME) AS searchNameArray
						</when>
						<when test="global_role_code.contains('MEMBER')">
						</when>
						<otherwise>
							, GROUP_CONCAT(DISTINCT ODI.DIVISION_NO) AS searchNoArray
							, GROUP_CONCAT(DISTINCT ODI.DIVISION_NAME) AS searchNameArray
						</otherwise>								
					</choose>	
				FROM
				<![CDATA[ 
					OPPORTUNITY_HIDDEN_LOG AS OHL		
					LEFT OUTER JOIN
					CLIENT_COMPANY_INFO AS CCI ON OHL.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN 
					OUR_MEMBERS_INFO AS OMI ON OHL.CREATOR_ID = OMI.MEMBER_ID_NUM
					LEFT OUTER JOIN 
					OUR_MEMBERS_INFO AS OMI2 ON OHL.SALESMAN_ID = OMI2.MEMBER_ID_NUM
					LEFT OUTER JOIN
					CLIENT_COMPANY_INFO AS CCI2 ON OHL.CUSTOMER_ID = CCI2.COMPANY_ID
					LEFT OUTER JOIN
					OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID AND OL.TEMP_FLAG = 'N'
					LEFT OUTER JOIN
					OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI2.MEMBER_DIVISION
					LEFT OUTER JOIN
					OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI2.MEMBER_TEAM
					LEFT OUTER JOIN
					( 
						SELECT * 
						FROM (
							SELECT OPPORTUNITY_HIDDEN_ID, ACTION_ID, DETAIL_CONENTS, DUE_DATE, CLOSE_DATE,
						           IF(@PREV <> OPPORTUNITY_HIDDEN_ID, @CNT := 1, @CNT := @CNT + 1) AS RANK, @PREV := OPPORTUNITY_HIDDEN_ID	
						    FROM OPPORTUNITY_HIDDEN_ACTION, (SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT
						    WHERE 1=1
						    ORDER BY OPPORTUNITY_HIDDEN_ID ASC, ACTION_ID DESC
					    ) AS SUB_OHA 
						WHERE 1=1
						AND SUB_OHA.RANK <= 5
					) AS OHA ON OHL.OPPORTUNITY_HIDDEN_ID = OHA.OPPORTUNITY_HIDDEN_ID
				WHERE 1=1
			]]>		
			<!-- 모바일에서 검색 시 조건체크 -->
		  <if test="deviceCheck == 'mobile' ">
		  	<if test="searchKeyword != null and searchKeyword != '' ">
					AND
					(
					OHL.SUBJECT LIKE CONCAT('%', #{searchKeyword}, '%')
					OR
					CCI.COMPANY_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
					OR
					CCI2.COMPANY_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
					)
				</if>
		  
		  	<if test="textTeamNameList != null and textTeamNameList != '' ">
					<choose>
						<when test="global_role_code.contains('ROLE_CEO')">
							AND OMI2.MEMBER_DIVISION = #{textTeamNameList}
						</when>
						<when test="global_role_code.contains('ROLE_DIVISION')">
							AND OMI2.MEMBER_TEAM = #{textTeamNameList}
						</when>
						<when test="global_role_code.contains('ROLE_TEAM')">
							AND OMI2.MEMBER_ID_NUM = #{textTeamNameList}
						</when>
						<when test="global_role_code.contains('ROLE_MEMBER')">
							AND OMI2.MEMBER_ID_NUM = #{global_member_id}
						</when>
						<otherwise>
							AND OMI2.MEMBER_DIVISION = #{textTeamNameList}
						</otherwise>
					</choose>
				</if>	 
		  	 	
		  	<choose>
					<when test="textSituationList == 'all' ">
					</when>
					<when test="textSituationList == 'change' ">
						AND OL.OPPORTUNITY_ID IS NOT NULL AND OL.OPPORTUNITY_ID != ''
					</when>
					<when test="textSituationList == 'ing' ">
						AND NULLIF(OL.OPPORTUNITY_ID,'') IS NULL
						AND OHL.SALES_CHANGE_DATE >= DATE_FORMAT(NOW(), '%Y-%m-%d')
					</when>
					<when test="textSituationList == 'delay' ">
						AND NULLIF(OL.OPPORTUNITY_ID,'') IS NULL
			    	<![CDATA[
			    		AND OHL.SALES_CHANGE_DATE < DATE_FORMAT(NOW(), '%Y-%m-%d')
			    		]]>
					</when>
		  	</choose>
		  </if>			
			<include refid="hiddenOpportunityWhere" />
	</select>
	
	<sql id="hiddenOpportunityWhere">
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND OMI2.MEMBER_DIVISION = #{global_member_division}
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OMI2.MEMBER_DIVISION = #{global_member_division}
				AND OMI2.MEMBER_TEAM = #{global_member_team}
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND OMI2.MEMBER_DIVISION = #{global_member_division}
				AND OMI2.MEMBER_TEAM = #{global_member_team}
				<!-- AND OMI2.MEMBER_ID_NUM = #{global_member_id} -->
			</when>
		</choose>
		
		<if test="resultInSearch != null and resultInSearch.equalsIgnoreCase('Y')">
			<choose>
				<when test="searchPKArray != null and searchPKArray != '' ">
				AND OHL.OPPORTUNITY_HIDDEN_ID IN(${searchPKArray})
				</when>
				<otherwise>
				AND OHL.OPPORTUNITY_HIDDEN_ID IN('')
				</otherwise>
			</choose>
		</if>
		
		<!-- 부서 -->
		<if test="searchDivision != null and searchDivision != '' ">
			AND OMI2.MEMBER_DIVISION = #{searchDivision}
		</if>
		<!-- 팀 -->
		<if test="searchTeam != null and searchTeam != '' ">
			AND OMI2.MEMBER_TEAM = #{searchTeam}
		</if>
		<!-- 개인 -->
		<if test="searchMember != null and searchMember != '' ">
			AND OMI2.MEMBER_ID_NUM = #{searchMember}
		</if>
		
		<!-- year -->
		<if test="searchYear != null and searchYear != '' ">
			AND YEAR(OHL.SYS_REGISTER_DATE) = #{searchYear}
		</if>
		<!-- quarter -->
		<if test="searchQuarter != null and searchQuarter != '' ">
			AND QUARTER(OHL.SYS_REGISTER_DATE) = #{searchQuarter}
		</if>
		
		<choose>
			<!-- 영업기회 전환 -->
			<when test="searchEtc == 'op' ">
			AND OL.OPPORTUNITY_HIDDEN_ID = OHL.OPPORTUNITY_HIDDEN_ID
			</when>
			
			<!-- Overdue -->
			<when test="searchEtc == 'od' ">
			<![CDATA[
			AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d')
			]]>		
			</when>
			
			<!-- 주간신규 -->
			<when test="searchEtc == 'mn' ">
			AND DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') >= DATE_FORMAT(NOW() ,'%Y-%m-01') 
			AND LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
			</when>
			
			<otherwise>
			</otherwise>
		</choose>
		
		<!-- 검색 고객사 -->
		<if test="searchCompanyName != null and searchCompanyName != '' ">
			AND CCI.COMPANY_NAME LIKE CONCAT('%', #{searchCompanyName}, '%')
		</if>
		<!-- 검색 고객명 -->
		<if test="searchCustomerName != null and searchCustomerName != '' ">
			AND CCI2.COMPANY_NAME LIKE CONCAT('%', #{searchCustomerName}, '%') 
		</if>
		<!-- 검색 고객사 그룹 -->
		<if test="searchCompanyCategory != null and searchCompanyCategory != '' ">
			AND CCI.SEGMENT_CODE = #{searchCompanyCategory}
		</if>
		<!--  검색 stauts -->
		<if test="searchStatus != null and searchStatus != '' ">
			<![CDATA[
			AND CASE 
						WHEN OL.OPPORTUNITY_ID IS NOT NULL AND OL.OPPORTUNITY_ID != ''
						THEN 'G'
						WHEN OHL.SALES_CHANGE_DATE >= DATE_FORMAT(NOW(), '%Y-%m-%d')
						THEN 'Y' 
						WHEN OHL.SALES_CHANGE_DATE < DATE_FORMAT(NOW(), '%Y-%m-%d')
						THEN 'R' 
					END  = #{searchStatus}
			]]>
		</if>
		<!--  검색 Action 상태 -->
		<if test="searchActionStatus != null and searchActionStatus != '' ">
			AND OHA.STATUS = #{searchActionStatus}
		</if>
	</sql>
	
	<select id="selectHiddenOpportunityDetail" parameterType="hashmap" resultType="hashmap">
		SELECT 
				OHL.OPPORTUNITY_HIDDEN_ID, 
				OHL.SUBJECT, 
				OHL.DETAIL_CONENTS, 
				OHL.CATEGORY, 
				OHL.OPPORTUNITY_AMOUNT, 
				OHL.SALESMAN_ID, 
				OHL.CONTRACT_START_DATE, 
				OHL.SALES_CHANGE_DATE, 
				OHL.SALES_RESULT, 
				OHL.CUSTOMER_ID, 
				OHL.CREATOR_ID, 
				OHL.EVENT_ID,
				<![CDATA[
				CASE 
					WHEN OL.OPPORTUNITY_ID IS NOT NULL AND OL.OPPORTUNITY_ID != ''
					THEN '#1ab394'
					WHEN OHL.SALES_CHANGE_DATE >= DATE_FORMAT(NOW(), '%Y-%m-%d')
					THEN '#ffc000' 
					WHEN OHL.SALES_CHANGE_DATE < DATE_FORMAT(NOW(), '%Y-%m-%d')
					THEN '#f20056' 
				END AS STATUS,
				]]>		
				DATE_FORMAT(OHL.SYS_REGISTER_DATE, '%Y-%m-%d') AS SYS_REGISTER_DATE, 
				DATE_FORMAT(OHL.SYS_UPDATE_DATE, '%Y-%m-%d') AS SYS_UPDATE_DATE,
				DATE_FORMAT(OHL.SYS_UPDATE_DATE, '%Y-%m-%d %H:%i') AS LATELY_UPDATE_DATE,
				CCI2.COMPANY_NAME AS CUSTOMER_NAME,
				OMI.HAN_NAME,
				OMI.MEMBER_ID_NUM,
				OMI2.HAN_NAME AS SALESMAN_NAME,
				OMI2.MEMBER_DIVISION AS SALESMAN_DIVISION,
				IFNULL(OMI2.POSITION_STATUS, '') AS SALESMAN_POSITION,
				CCI.COMPANY_ID,
				CCI.COMPANY_NAME,
				OL.OPPORTUNITY_ID,
				(
					SELECT COUNT(*) 
					FROM COACHING_TALK AS CT 
					WHERE 1=1 AND CATEGORY='HOPP' AND OHL.OPPORTUNITY_HIDDEN_ID = CT.ID
				)AS COACHING_TALK_COUNT
		FROM 
			OPPORTUNITY_HIDDEN_LOG AS OHL		
			LEFT OUTER JOIN
			CLIENT_COMPANY_INFO AS CCI ON OHL.COMPANY_ID = CCI.COMPANY_ID
			LEFT OUTER JOIN 
			OUR_MEMBERS_INFO AS OMI ON OHL.CREATOR_ID = OMI.MEMBER_ID_NUM
			LEFT OUTER JOIN 
			OUR_MEMBERS_INFO AS OMI2 ON OHL.SALESMAN_ID = OMI2.MEMBER_ID_NUM
			LEFT OUTER JOIN
			CLIENT_COMPANY_INFO AS CCI2 ON OHL.CUSTOMER_ID = CCI2.COMPANY_ID
			LEFT OUTER JOIN
			OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID AND OL.TEMP_FLAG = 'N'
		WHERE 1=1
		AND OHL.OPPORTUNITY_HIDDEN_ID = #{pkNo}
	</select>
	
	<select id="gridActionPlanHiddenOpportunity" parameterType="java.util.List" resultType="hashmap">
		SELECT 
			OHA.ACTION_ID, 
			OHA.OPPORTUNITY_HIDDEN_ID, 
			OHA.CATEGORY, 
			OHA.DETAIL_CONENTS, 
			OMI.HAN_NAME AS ACTION_OWNER,
			OMI.POSITION_STATUS AS ACTION_OWNER_POSITION,
			OHA.ACTION_OWNER_ID,
			OHA.DUE_DATE, 
			OHA.CLOSE_DATE, 
			OHA.CREATOR_ID, 
			OHA.SYS_REGISTER_DATE, 
			OHA.SYS_UPDATE_DATE,
			<!-- IF(DUE_DATE IS NULL AND DATE_FORMAT(NOW(), '%Y-%m-%d') > CLOSE_DATE, 'R', STATUS) AS STATUS, -->
			<!-- IF(DUE_DATE IS NULL AND DATE_FORMAT(NOW(), '%Y-%m-%d') > CLOSE_DATE, 'R', STATUS) AS HIDDEN_STATUS -->
			CASE 
				WHEN OHA.CLOSE_DATE IS NOT NULL AND OHA.CLOSE_DATE != ''
				THEN 'G'
				WHEN OHA.DUE_DATE >= CURRENT_DATE()
				THEN 'Y' 
				WHEN CURRENT_DATE() >  OHA.DUE_DATE
				THEN 'R' 
			END AS STATUS,
			
			
			CASE 
				WHEN OHA.CLOSE_DATE IS NOT NULL AND OHA.CLOSE_DATE != ''
				THEN 'G'
				WHEN OHA.DUE_DATE >= CURRENT_DATE()
				THEN 'Y' 
				WHEN CURRENT_DATE() >  OHA.DUE_DATE
				THEN 'R' 
			END AS HIDDEN_STATUS
			
		FROM OPPORTUNITY_HIDDEN_ACTION as OHA
		LEFT OUTER JOIN OUR_MEMBERS_INFO AS OMI 
			ON OHA.ACTION_OWNER_ID = OMI.MEMBER_ID_NUM
		WHERE 1=1
		AND OPPORTUNITY_HIDDEN_ID = #{pkNo}
	</select>
	
	<select id="selectHiddenOpportunityFileList" parameterType="java.util.List" resultType="hashmap">
		SELECT 
			FILE_ID, 
			EVENT_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			FILE_NAME, 
			FILE_PATH, 
			FILE_TYPE, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE
		FROM CLIENT_EVENT_FILE_STORE
		WHERE 1=1
		AND EVENT_ID = #{pkNo}
	</select>
	
	<insert id="insertHiddenOpportunity" parameterType="hashmap">
	        INSERT INTO OPPORTUNITY_HIDDEN_LOG
			(
				SUBJECT, 
				DETAIL_CONENTS, 
				OPPORTUNITY_AMOUNT, 
				SALESMAN_ID, 
				<!-- CONTRACT_START_DATE, -->
				<if test="textModalSalesChangeDate != null and textModalSalesChangeDate != '' "> 
				SALES_CHANGE_DATE,
				</if>
				SALES_RESULT, 
				COMPANY_ID, 
				CUSTOMER_ID, 
				CREATOR_ID, 
				<if test="hiddenModalContactId != null and hiddenModalContactId != '' ">
				EVENT_ID,
				</if>
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE
			)
			VALUES
			(
				#{textModalSubject}, 
				#{textareaModalDetail}, 
				#{hiddenModalAmount}, 
				#{hiddenModalSalesId}, 
				<!-- #{textModalStartDate}, -->
				<if test="textModalSalesChangeDate != null and textModalSalesChangeDate != '' ">  
				#{textModalSalesChangeDate},
				</if>
				#{selectModalSalesResult},
				#{hiddenModalCompanyId}, 
				#{hiddenModalCustomerId}, 
				#{hiddenModalCreatorId},
				<if test="hiddenModalContactId != null and hiddenModalContactId != '' ">
				#{hiddenModalContactId},
				</if> 
				CURRENT_TIMESTAMP, 
				CURRENT_TIMESTAMP
			);
		<selectKey keyProperty="filePK" resultType="Integer" order="AFTER">
        	SELECT LAST_INSERT_ID();
    	</selectKey>
	</insert>
		
	<update id="updateHiddenOpportunity" parameterType="hashmap">
			UPDATE OPPORTUNITY_HIDDEN_LOG
				SET 
					SUBJECT = #{textModalSubject}, 
					DETAIL_CONENTS = #{textareaModalDetail}, 
					OPPORTUNITY_AMOUNT = #{hiddenModalAmount}, 
					SALESMAN_ID = #{hiddenModalSalesId}, 
					<!-- CONTRACT_START_DATE, -->
					<choose>
					<when test="textModalSalesChangeDate != null and textModalSalesChangeDate != '' ">
						SALES_CHANGE_DATE = #{textModalSalesChangeDate},
					</when>
					<otherwise>
						SALES_CHANGE_DATE = NULL,
					</otherwise>
					</choose> 
					SALES_RESULT = #{selectModalSalesResult}, 
					COMPANY_ID = #{hiddenModalCompanyId}, 
					CUSTOMER_ID = #{hiddenModalCustomerId}, 
					SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE OPPORTUNITY_HIDDEN_ID = #{hiddenModalPK}
	</update>
	
	<insert id="insertContactFollowUpAction" parameterType="hashmap">
			INSERT INTO CLIENT_EVENT_ACTION
			(
				EVENT_ID, 
				CREATOR_ID, 
				CONTENTS,
				SOLVE_OWNER_ID,
				SOLVE_OWNER, 
				SOLVE_DUE_DATE, 
				SOLVE_CLOSE_DATE, 
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE, 
				STATUS
			)
			VALUES
			(
				#{pkNo},
				#{hiddenModalCreatorId}, 
				#{CONTENTS},
				#{SOLVE_OWNER_ID},
				#{SOLVE_OWNER}, 
				<choose>
					<when test="SOLVE_DUE_DATE != null and SOLVE_DUE_DATE != '' ">
						#{SOLVE_DUE_DATE},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose> 
				<choose>
					<when test="SOLVE_CLOSE_DATE != null and SOLVE_CLOSE_DATE != '' ">
						#{SOLVE_CLOSE_DATE},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose> 
				CURRENT_TIMESTAMP, 
				CURRENT_TIMESTAMP, 
				#{HIDDEN_STATUS}
			);
	</insert>
	
	<update id="updateContactFollowUpAction" parameterType="hashmap">
			UPDATE CLIENT_EVENT_ACTION
				SET 
					<!-- CATEGORY='', --> 
					CONTENTS=#{CONTENTS},
					SOLVE_OWNER_ID = #{SOLVE_OWNER_ID},
					<!-- SOLVE_OWNER=#{SOLVE_OWNER}, -->  
					<choose>
					<when test="SOLVE_DUE_DATE != null and SOLVE_DUE_DATE != '' ">
						SOLVE_DUE_DATE = #{SOLVE_DUE_DATE}, 
					</when>
					<otherwise>
						SOLVE_DUE_DATE = NULL,
					</otherwise>
				</choose> 
				<choose>
					<when test="SOLVE_CLOSE_DATE != null and SOLVE_CLOSE_DATE != '' ">
						SOLVE_CLOSE_DATE = #{SOLVE_CLOSE_DATE}, 
					</when>
					<otherwise>
						SOLVE_CLOSE_DATE = NULL,
					</otherwise>
				</choose> 
					<!-- STATUS=#{HIDDEN_STATUS}, -->
					SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE ACTION_ID = #{ACTION_ID};
	</update>
	
	<insert id="insertHiddenOpportunityActionPlan" parameterType="hashmap">
	        INSERT INTO OPPORTUNITY_HIDDEN_ACTION
			(
				OPPORTUNITY_HIDDEN_ID, 
				<!-- CATEGORY, --> 
				DETAIL_CONENTS, 
				ACTION_OWNER,
				ACTION_OWNER_ID,
				DUE_DATE, 
				CLOSE_DATE, 
				STATUS,
				CREATOR_ID, 
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE
			)
			VALUES
			(
				#{returnPK}, 
				#{DETAIL_CONENTS}, 
				#{ACTION_OWNER}, 
				#{ACTION_OWNER_ID}, 
				<choose>
					<when test="DUE_DATE != null and DUE_DATE != '' ">
						#{DUE_DATE},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose> 
				<choose>
					<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
						#{CLOSE_DATE},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose> 
				#{HIDDEN_STATUS}, 
				#{hiddenModalCreatorId}, 
				CURRENT_TIMESTAMP, 
				CURRENT_TIMESTAMP
			);
	</insert>
	
	<update id="updateHiddenOpportunityActionPlan" parameterType="hashmap">
			UPDATE OPPORTUNITY_HIDDEN_ACTION
				SET 
					<!-- CATEGORY='', --> 
					DETAIL_CONENTS=#{DETAIL_CONENTS}, 
					ACTION_OWNER=#{ACTION_OWNER},  
					ACTION_OWNER_ID=#{ACTION_OWNER_ID},  
					<choose>
					<when test="DUE_DATE != null and DUE_DATE != '' ">
						DUE_DATE = #{DUE_DATE}, 
					</when>
					<otherwise>
						DUE_DATE = NULL,
					</otherwise>
				</choose> 
				<choose>
					<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
						CLOSE_DATE = #{CLOSE_DATE}, 
					</when>
					<otherwise>
						CLOSE_DATE = NULL,
					</otherwise>
				</choose> 
					STATUS=#{HIDDEN_STATUS},
					SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE ACTION_ID = #{ACTION_ID};
	</update>
	
	
	
	
	<!-- 영업기회 -->
	<select id="opportunitySearchDetailGroup1" parameterType="hashmap" resultType="hashmap">
		SELECT OMI.MEMBER_DIVISION, ODI.DIVISION_NAME
		FROM
		OPPORTUNITY_LOG AS OL
		INNER JOIN
		OUR_MEMBERS_INFO AS OMI ON (OMI.MEMBER_ID_NUM = OL.EXEC_ID) OR (OMI.MEMBER_ID_NUM = OL.OWNER_ID) OR (OMI.MEMBER_ID_NUM = OL.IDENTIFIER_ID)
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI ON OMI.MEMBER_DIVISION = ODI.DIVISION_NO 
		GROUP BY OMI.MEMBER_DIVISION
		HAVING 1=1
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<otherwise>
				AND OMI.MEMBER_DIVISION = #{global_member_division}
			</otherwise>
		</choose>
	</select>
	
	<select id="opportunitySearchDetailGroup2" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
		SELECT CCI.COMPANY_ID, CCI.COMPANY_NAME
	    FROM
	    OPPORTUNITY_LOG AS OL
	   	INNER JOIN
	    CLIENT_COMPANY_INFO AS CCI ON OL.COMPANY_ID = CCI.COMPANY_ID
	    GROUP BY CCI.COMPANY_ID, CCI.COMPANY_NAME
		]]>	
	</select>
	
	<select id="opportunitySearchDetailGroup3" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
		SELECT 
			DIVISION_NO, 
			DIVISION_NAME, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE
		FROM OUR_DIVISION_INFO
		WHERE 1=1
		AND USE_YN = 'Y' 
		]]>	
	</select>
	
	<select id="selectOpportunityCount" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		]]>
			SELECT COUNT(*) AS listCount, GROUP_CONCAT(OL.OPPORTUNITY_ID) AS searchPKArray
			FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				(
					SELECT T1.OPPORTUNITY_ID
					FROM
					OPPORTUNITY_LOG AS T1
					LEFT OUTER JOIN
					OPPORTUNITY_AMOUNT as T2 on T1.OPPORTUNITY_ID = T2.OPPORTUNITY_ID
					WHERE 1=1
					<if test=" searchEndDate != null and searchEndDate != '' ">
					<![CDATA[
					AND ((T2.BASIS_MONTH BETWEEN #{searchStartDate} AND #{searchEndDate}) OR BASIS_MONTH IS NULL)
					]]>
					</if>
					GROUP BY T2.OPPORTUNITY_ID
				)AS SELECT_OPP ON OL.OPPORTUNITY_ID = SELECT_OPP.OPPORTUNITY_ID
				LEFT OUTER JOIN
			    (
			    	SELECT COUNT(OPPORTUNITY_ID) AS FILE_COUNT, OPPORTUNITY_ID
			    	FROM OPPORTUNITY_FILE_STORE
			    	GROUP BY OPPORTUNITY_ID
			    ) AS OFS ON OL.OPPORTUNITY_ID = OFS.OPPORTUNITY_ID   
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI ON OL.CREATOR_ID = OMI.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI2 ON OL.EXEC_ID = OMI2.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI3 ON OL.OWNER_ID = OMI3.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI4 ON OL.IDENTIFIER_ID = OMI4.MEMBER_ID_NUM
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI ON OL.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI2 ON OL.CUSTOMER_ID = CCI2.COMPANY_ID
			WHERE 1=1
			AND OL.TEMP_FLAG = 'N'
			<if test="companyInfoOpp != 'true' ">
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND (OMI2.MEMBER_DIVISION = #{global_member_division} OR OMI3.MEMBER_DIVISION = #{global_member_division} OR OMI4.MEMBER_DIVISION = #{global_member_division})
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND (OMI2.MEMBER_DIVISION = #{global_member_division} OR OMI3.MEMBER_DIVISION = #{global_member_division} OR OMI4.MEMBER_DIVISION = #{global_member_division})
					AND (OMI2.MEMBER_TEAM = #{global_member_team} OR OMI3.MEMBER_TEAM = #{global_member_team} OR OMI4.MEMBER_TEAM = #{global_member_team})
				</when>
				<when test="global_role_code.contains('ROLE_MEMBER')">
					AND (OMI2.MEMBER_DIVISION = #{global_member_division} OR OMI3.MEMBER_DIVISION = #{global_member_division} OR OMI4.MEMBER_DIVISION = #{global_member_division})
					AND (OMI2.MEMBER_TEAM = #{global_member_team} OR OMI3.MEMBER_TEAM = #{global_member_team} OR OMI4.MEMBER_TEAM = #{global_member_team})
					<!-- AND (OMI2.MEMBER_ID_NUM = #{global_member_id} OR OMI3.MEMBER_ID_NUM = #{global_member_id} OR OMI4.MEMBER_ID_NUM = #{global_member_id}) -->
				</when>
			</choose>
			</if>
			<if test="resultInSearch != null and resultInSearch.equalsIgnoreCase('Y')">
				<choose>
					<when test="searchPKArray != null and searchPKArray != '' ">
					AND OL.OPPORTUNITY_ID IN(${searchPKArray})
					</when>
					<otherwise>
					AND OL.OPPORTUNITY_ID IN('')
					</otherwise>
				</choose>
			</if>
			
			<!-- 모바일 -->
			<if test="deviceCheck == 'mobile' ">
				<if test="textSearchKeyword != null and textSearchKeyword != '' ">
					AND (
						OL.SUBJECT LIKE CONCAT('%', #{textSearchKeyword}, '%') 
						OR OMI2.HAN_NAME LIKE CONCAT('%', #{textSearchKeyword}, '%')
						OR OMI3.HAN_NAME LIKE CONCAT('%', #{textSearchKeyword}, '%')
						OR OMI4.HAN_NAME LIKE CONCAT('%', #{textSearchKeyword}, '%')
					)
				</if>
			</if>
			
			<!-- 부서 -->
			<if test="searchDivision != null and searchDivision != '' ">
				AND (OMI2.MEMBER_DIVISION = #{searchDivision} OR OMI3.MEMBER_DIVISION = #{searchDivision} OR OMI4.MEMBER_DIVISION = #{searchDivision})
			</if>
			<!-- 팀 -->
			<if test="searchTeam != null and searchTeam != '' ">
				AND (OMI2.MEMBER_TEAM = #{searchTeam} OR OMI3.MEMBER_TEAM = #{searchTeam} OR OMI4.MEMBER_TEAM = #{searchTeam})
			</if>
			<!-- 개인 -->
			<if test="searchMember != null and searchMember != '' ">
				AND (OMI2.MEMBER_ID_NUM = #{searchMember} OR OMI3.MEMBER_ID_NUM = #{searchMember} OR OMI4.MEMBER_ID_NUM = #{searchMember})
			</if>
		    
			<if test=" searchContractStartDate != null and searchContractStartDate != '' ">
		      AND OL.SYS_REGISTER_DATE >= #{searchContractStartDate}
		    </if>
		    
			<if test=" searchContractEndDate != null and searchContractEndDate != '' ">
			 <![CDATA[
		      AND OL.SYS_REGISTER_DATE <= #{searchContractEndDate}
		      ]]>	
		    </if>
		    
		    <if test=" searchTitle != null and searchTitle != '' ">
		      AND OL.SUBJECT LIKE CONCAT('%', #{searchTitle}, '%')
		    </if>
		    
		    <!-- end user = 고객사인데 고객사명 = CUSTOMER_NAME -->
		    <if test=" searchCompany != null and searchCompany != '' ">
		      AND CCI2.COMPANY_NAME LIKE CONCAT('%', #{searchCompany}, '%')
		    </if>
		    
		    <if test=" searchOwner != null and searchOwner != '' ">
		      AND OMI3.HAN_NAME LIKE CONCAT('%', #{searchOwner}, '%')
		    </if>
		    
		    <if test=" searchSalesMan != null and searchSalesMan != '' ">
		      AND OMI4.HAN_NAME LIKE CONCAT('%', #{searchSalesMan}, '%')
		    </if>
		    
		    <if test=" searchProjectCd != null and searchProjectCd != '' ">
	      AND OL.ERP_PROJECT_CODE = #{searchProjectCd}
	    </if>
	    
		    <if test=" searchForecast != null and searchForecast != '' ">
		      AND OL.FORECAST_YN = #{searchForecast}
		    </if>
		    
		    <choose>
		    	<when test=" searchSalesCycle != null and searchSalesCycle != '' ">
		    			<choose>
		    				<when test="searchSalesCycle == 1">
		    					AND OL.SALES_CYCLE != '5'
		    					AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')
		    				</when>
		    				<when test="searchSalesCycle == 2">
		    					AND OL.SALES_CYCLE = '5'
		    				</when>
		    				<when test="searchSalesCycle == 3">
		    					AND OL.OPPORTUNITY_ID IN (SELECT OPPORTUNITY_ID FROM OPPORTUNITY_AMOUNT_SPLIT)
		    				</when>
		    				<when test="searchSalesCycle == 4">
		    					AND OL.REBATE_YN = 'Y'
		    				</when>
		    				<when test="searchSalesCycle == 5">
		    					AND OL.SALES_CYCLE != '5'
		    					AND (OL.CLOSE_CATEGORY = '2' OR OL.CLOSE_CATEGORY = '3')
		    				</when>
		    			</choose>
		    	</when>
		    	<otherwise>
		    		<!-- AND OL.SALES_CYCLE != '4' -->
		    		<!-- AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1') -->
		    	</otherwise>
		    </choose>
		    
		    <if test=" searchContractAmount != null and searchContractAmount != '' ">
		      AND OL.CONTRACT_AMOUNT >= #{searchContractAmount}
		    </if>
		    
		    <if test=" searchKeyDeal != null and searchKeyDeal != '' ">
		      AND OL.KEY_DEAL_YN = #{searchKeyDeal}
		    </if>
		    
		    <if test=" companyId != null and companyId != '' ">
		      AND OL.CUSTOMER_ID = #{companyId}
		    </if>
	</select>
	
	<select id="selectOpportunitySum" parameterType="hashmap" resultType="hashmap">
		SELECT 
			 IFNULL(SUM(OP.CONTRACT_AMOUNT),0) AS SUM_CONTRACT_AMOUNT,
             SUM(OA.SUM_REV) AS SUM_REV,
             SUM(OA.SUM_GP) AS SUM_GP
		FROM 
		(
			SELECT OPPORTUNITY_ID, ROUND(CONTRACT_AMOUNT/1000000,1) AS CONTRACT_AMOUNT FROM OPPORTUNITY_LOG
			WHERE 1=1
			AND TEMP_FLAG = 'N'
			AND FORECAST_YN = 'In'
			AND OPPORTUNITY_ID IN 
			<foreach collection="searchPKArray" item="item" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		) AS OP
		LEFT OUTER JOIN
		(
			SELECT 
				OPPORTUNITY_ID,
                IFNULL(ROUND(SUM(BASIS_PLAN_REVENUE_AMOUNT)/1000000,1),0) AS SUM_REV,
				IFNULL(ROUND(SUM(BASIS_PLAN_GP_AMOUNT)/1000000,1),0) AS SUM_GP
			FROM OPPORTUNITY_AMOUNT
			WHERE 1=1
			AND OPPORTUNITY_ID IN 
			<foreach collection="searchPKArray" item="item" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
			<![CDATA[
			AND BASIS_MONTH BETWEEN #{searchStartDate} AND #{searchEndDate}
			]]>
			GROUP BY OPPORTUNITY_ID
		) OA on OP.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
	</select>
	
	<select id="gridOpportunity" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		]]>
			SELECT 
					OL.OPPORTUNITY_ID, 
					OL.EXEC_ID, 
					OMI2.HAN_NAME AS EXEC_NAME,
					OL.OWNER_ID,
					OMI3.HAN_NAME AS OWNER_NAME,
					OL.IDENTIFIER_ID,
					OMI4.HAN_NAME AS IDENTIFIER_NAME,
					CCI2.COMPANY_NAME AS CUSTOMER_NAME,
					CCI2.COMPANY_ID AS CUSTOMER_ID,
					OL.SUBJECT, 
					IFNULL(ROUND(OL.CONTRACT_AMOUNT/1000000,1),0) AS CONTRACT_AMOUNT, 
					FORMAT(IFNULL(OL.CONTRACT_AMOUNT,0),0) AS CONTRACT_AMOUNT_OR, 
					OL.GP_AMOUNT, 
					OL.PARTNER_ROLE, 
					OL.CONTRACT_DATE, 
					OL.SALES_CYCLE, 
					OL.FORECAST_YN, 
					OL.ROUTE, 
					OL.SALES_PARTNER, 
					OL.DETAIL_CONENTS, 
					OL.CURRENT_MILESTONE, 
					OL.CLOSE_CATEGORY, 
					OL.CLOSE_DETAIL,
					OL.CONTRACT_TERM,
					OL.ERP_PROJECT_CODE,
					OL.ERP_OPP_CD,
					OL.DISCRIMINATE_VALUE,
					OL.KEY_DEAL_YN,
					OL.BUY_CD,
					DATE_FORMAT(OL.SYS_REGISTER_DATE, '%Y-%m-%d') AS SYS_REGISTER_DATE, 
					DATE_FORMAT(OL.SYS_UPDATE_DATE, '%Y-%m-%d') AS SYS_UPDATE_DATE,
					IFNULL(DATE_FORMAT(OL.SYS_UPDATE_DATE, '%Y-%m-%d %H:%i'),NOW()) AS LATELY_UPDATE_DATE,
					OMI.HAN_NAME,
					OMI.MEMBER_ID_NUM,
					OMI.MEMBER_TEAM,
					OMI.MEMBER_DIVISION,
					OMI2.MEMBER_TEAM AS EXEC_TEAM,
					CCI.COMPANY_NAME,
					CCI.COMPANY_ID,
					IFNULL(ROUND(SALES_PLAN.REV/1000000,1),0) AS AMOUNT_REV,
					IFNULL(ROUND(SALES_PLAN.GP/1000000,1),0) AS AMOUNT_GP,
					CASE 
						WHEN OC.STATUS1 = 'G' THEN 'green'
						WHEN OC.STATUS1 = 'Y' THEN 'yellow'
						WHEN OC.STATUS1 = 'R' THEN 'red'
					 	ELSE NULL
					 END AS STATUS1,
					CASE 
						WHEN OC.STATUS2 = 'G' THEN 'green'
						WHEN OC.STATUS2 = 'Y' THEN 'yellow'
						WHEN OC.STATUS2 = 'R' THEN 'red'
					 	ELSE NULL
					 END AS STATUS2,
					CASE 
						WHEN OC.STATUS3 = 'G' THEN 'green'
						WHEN OC.STATUS3 = 'Y' THEN 'yellow'
						WHEN OC.STATUS3 = 'R' THEN 'red'
					 	ELSE NULL
					 END AS STATUS3,
					CASE 
						WHEN OC.STATUS4 = 'G' THEN 'green'
						WHEN OC.STATUS4 = 'Y' THEN 'yellow'
						WHEN OC.STATUS4 = 'R' THEN 'red'
					 	ELSE NULL
					 END AS STATUS4,
					MAX(IF(MILESTONE.RANK=1, MILESTONE.DUE_DATE, "")) AS MS_DUE_DATE_1,
					MAX(IF(MILESTONE.RANK=2, MILESTONE.DUE_DATE, "")) AS MS_DUE_DATE_2,
					MAX(IF(MILESTONE.RANK=3, MILESTONE.DUE_DATE, "")) AS MS_DUE_DATE_3,
					MAX(IF(MILESTONE.RANK=4, MILESTONE.DUE_DATE, "")) AS MS_DUE_DATE_4,
					MAX(IF(MILESTONE.RANK=5, MILESTONE.DUE_DATE, "")) AS MS_DUE_DATE_5,
					MAX(IF(MILESTONE.RANK=1, MILESTONE.CLOSE_DATE, "")) AS MS_CLOSE_DATE_1,
					MAX(IF(MILESTONE.RANK=2, MILESTONE.CLOSE_DATE, "")) AS MS_CLOSE_DATE_2,
					MAX(IF(MILESTONE.RANK=3, MILESTONE.CLOSE_DATE, "")) AS MS_CLOSE_DATE_3,
					MAX(IF(MILESTONE.RANK=4, MILESTONE.CLOSE_DATE, "")) AS MS_CLOSE_DATE_4,
					MAX(IF(MILESTONE.RANK=5, MILESTONE.CLOSE_DATE, "")) AS MS_CLOSE_DATE_5,
					MAX(IF(MILESTONE.RANK=1, MILESTONE.KEY_MILESTONE, "")) AS KEY_MILESTONE_1,
					MAX(IF(MILESTONE.RANK=2, MILESTONE.KEY_MILESTONE, "")) AS KEY_MILESTONE_2,
					MAX(IF(MILESTONE.RANK=3, MILESTONE.KEY_MILESTONE, "")) AS KEY_MILESTONE_3,
					MAX(IF(MILESTONE.RANK=4, MILESTONE.KEY_MILESTONE, "")) AS KEY_MILESTONE_4,
					MAX(IF(MILESTONE.RANK=5, MILESTONE.KEY_MILESTONE, "")) AS KEY_MILESTONE_5,
					IFNULL(OFS.FILE_COUNT,0) AS FILE_COUNT,
					(
						SELECT COUNT(*) 
						FROM COACHING_TALK AS CT 
						WHERE 1=1 AND CATEGORY='OPP' AND OL.OPPORTUNITY_ID = CT.ID
					)AS COACHING_TALK_COUNT
			FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				(
					SELECT T1.OPPORTUNITY_ID
					FROM
					OPPORTUNITY_LOG AS T1
					LEFT OUTER JOIN
					OPPORTUNITY_AMOUNT as T2 on T1.OPPORTUNITY_ID = T2.OPPORTUNITY_ID
					WHERE 1=1
					<if test=" searchEndDate != null and searchEndDate != '' ">
					<![CDATA[
					AND ((T2.BASIS_MONTH BETWEEN #{searchStartDate} AND #{searchEndDate}) OR BASIS_MONTH IS NULL)
					]]>
					</if>
					GROUP BY T2.OPPORTUNITY_ID
				)AS SELECT_OPP ON OL.OPPORTUNITY_ID = SELECT_OPP.OPPORTUNITY_ID
				LEFT OUTER JOIN 
				(
					SELECT MILESTONE_ID,OPPORTUNITY_ID, DUE_DATE, CLOSE_DATE, STATUS, KEY_MILESTONE,
						<![CDATA[
                         IF(@PREV <> OPPORTUNITY_ID, @CNT := 1, @CNT := @CNT + 1) AS RANK, @PREV := OPPORTUNITY_ID
                         ]]>
                    FROM OPPORTUNITY_MILESTONE, (SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT
                    WHERE 1=1
                    ORDER BY OPPORTUNITY_ID ASC, MILESTONE_ID ASC  
				) AS MILESTONE ON OL.OPPORTUNITY_ID = MILESTONE.OPPORTUNITY_ID
				LEFT OUTER JOIN
				(
					SELECT 
						OPPORTUNITY_ID,
						MAX(IF(CHECKLIST_SEQ=1,STATUS,NULL)) AS STATUS1,
						MAX(IF(CHECKLIST_SEQ=2,STATUS,NULL)) AS STATUS2,
						MAX(IF(CHECKLIST_SEQ=3,STATUS,NULL)) AS STATUS3,
						MAX(IF(CHECKLIST_SEQ=4,STATUS,NULL)) AS STATUS4
					FROM OPPORTUNITY_CHECKLIST_OWNER
					GROUP BY OPPORTUNITY_ID
				)AS OC ON OL.OPPORTUNITY_ID = OC.OPPORTUNITY_ID
				LEFT OUTER JOIN
			    (
			    	SELECT COUNT(OPPORTUNITY_ID) AS FILE_COUNT, OPPORTUNITY_ID
			    	FROM OPPORTUNITY_FILE_STORE
			    	GROUP BY OPPORTUNITY_ID
			    ) AS OFS ON OL.OPPORTUNITY_ID = OFS.OPPORTUNITY_ID   
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI ON OL.CREATOR_ID = OMI.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI2 ON OL.EXEC_ID = OMI2.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI3 ON OL.OWNER_ID = OMI3.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI4 ON OL.IDENTIFIER_ID = OMI4.MEMBER_ID_NUM
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI ON OL.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI2 ON OL.CUSTOMER_ID = CCI2.COMPANY_ID
				LEFT OUTER JOIN
				(
					SELECT
						OPPORTUNITY_ID,
						IFNULL(SUM(BASIS_PLAN_REVENUE_AMOUNT),0) as REV,
						IFNULL(SUM(BASIS_PLAN_GP_AMOUNT),0) as GP
					FROM
					OPPORTUNITY_AMOUNT
					WHERE 1=1
					<![CDATA[
					AND BASIS_MONTH BETWEEN #{searchStartDate} AND #{searchEndDate}
					]]>
					GROUP BY OPPORTUNITY_ID
				)AS SALES_PLAN ON OL.OPPORTUNITY_ID = SALES_PLAN.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
		<if test="companyInfoOpp != 'true' ">
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND (OMI2.MEMBER_DIVISION = #{global_member_division} OR OMI3.MEMBER_DIVISION = #{global_member_division} OR OMI4.MEMBER_DIVISION = #{global_member_division})
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND (OMI2.MEMBER_DIVISION = #{global_member_division} OR OMI3.MEMBER_DIVISION = #{global_member_division} OR OMI4.MEMBER_DIVISION = #{global_member_division})
					AND (OMI2.MEMBER_TEAM = #{global_member_team} OR OMI3.MEMBER_TEAM = #{global_member_team} OR OMI4.MEMBER_TEAM = #{global_member_team})
				</when>
				<when test="global_role_code.contains('ROLE_MEMBER')">
					AND (OMI2.MEMBER_DIVISION = #{global_member_division} OR OMI3.MEMBER_DIVISION = #{global_member_division} OR OMI4.MEMBER_DIVISION = #{global_member_division})
					AND (OMI2.MEMBER_TEAM = #{global_member_team} OR OMI3.MEMBER_TEAM = #{global_member_team} OR OMI4.MEMBER_TEAM = #{global_member_team})
					<!-- AND (OMI2.MEMBER_ID_NUM = #{global_member_id} OR OMI3.MEMBER_ID_NUM = #{global_member_id} OR OMI4.MEMBER_ID_NUM = #{global_member_id}) -->
				</when>
			</choose>
		</if>
		
		<!-- 모바일 -->
		<if test="deviceCheck == 'mobile' ">
			<if test="textSearchKeyword != null and textSearchKeyword != '' ">
				AND (
					OL.SUBJECT LIKE CONCAT('%', #{textSearchKeyword}, '%') 
					OR OMI2.HAN_NAME LIKE CONCAT('%', #{textSearchKeyword}, '%')
					OR OMI3.HAN_NAME LIKE CONCAT('%', #{textSearchKeyword}, '%')
					OR OMI4.HAN_NAME LIKE CONCAT('%', #{textSearchKeyword}, '%')
				)
			</if>
		</if>
		
		<if test="resultInSearch != null and resultInSearch.equalsIgnoreCase('Y')">
			<choose>
				<when test="searchPKArray != null and searchPKArray != '' ">
				AND OL.OPPORTUNITY_ID IN(${searchPKArray})
				</when>
				<otherwise>
				AND OL.OPPORTUNITY_ID IN('')
				</otherwise>
			</choose>
		</if>
		
		<!-- 부서 -->
		<if test="searchDivision != null and searchDivision != '' ">
			AND (OMI2.MEMBER_DIVISION = #{searchDivision} OR OMI3.MEMBER_DIVISION = #{searchDivision} OR OMI4.MEMBER_DIVISION = #{searchDivision})
		</if>
		<!-- 팀 -->
		<if test="searchTeam != null and searchTeam != '' ">
			AND (OMI2.MEMBER_TEAM = #{searchTeam} OR OMI3.MEMBER_TEAM = #{searchTeam} OR OMI4.MEMBER_TEAM = #{searchTeam})
		</if>
		<!-- 개인 -->
		<if test="searchMember != null and searchMember != '' ">
			AND (OMI2.MEMBER_ID_NUM = #{searchMember} OR OMI3.MEMBER_ID_NUM = #{searchMember} OR OMI4.MEMBER_ID_NUM = #{searchMember})
		</if>
	    
		<if test=" searchContractStartDate != null and searchContractStartDate != '' ">
	      AND OL.SYS_REGISTER_DATE >= #{searchContractStartDate}
	    </if>
	    
		<if test=" searchContractEndDate != null and searchContractEndDate != '' ">
		 <![CDATA[
	      AND OL.SYS_REGISTER_DATE <= #{searchContractEndDate}
	      ]]>	
	    </if>
	    
	    <if test=" companyId != null and companyId != '' ">
	      AND OL.CUSTOMER_ID = #{companyId}
	    </if>
	    
	    <if test=" searchTitle != null and searchTitle != '' ">
	      AND OL.SUBJECT LIKE CONCAT('%', #{searchTitle}, '%')
	    </if>
		
		<!-- end user = 고객사인데 고객사명 = CUSTOMER_NAME -->
	    <if test=" searchCompany != null and searchCompany != '' ">
	      AND CCI2.COMPANY_NAME LIKE CONCAT('%', #{searchCompany}, '%')
	    </if>
	    
	    <!-- 검색 고객사 그룹 -->
		<if test="searchCompanyCategory != null and searchCompanyCategory != '' ">
			AND CCI.SEGMENT_CODE = #{searchCompanyCategory}
		</if>
		
	    <if test=" searchOwner != null and searchOwner != '' ">
	      AND OMI3.HAN_NAME LIKE CONCAT('%', #{searchOwner}, '%')
	    </if>
	    
	    <if test=" searchSalesMan != null and searchSalesMan != '' ">
	      AND OMI4.HAN_NAME LIKE CONCAT('%', #{searchSalesMan}, '%')
	    </if>
	    
	    <if test=" searchProjectCd != null and searchProjectCd != '' ">
	      AND OL.ERP_PROJECT_CODE = #{searchProjectCd}
	    </if>
	    
	    <if test=" searchForecast != null and searchForecast != '' ">
	      AND OL.FORECAST_YN = #{searchForecast}
	    </if>
	    
	    <choose>
	    	<when test=" searchSalesCycle != null and searchSalesCycle != '' ">
	    			<choose>
	    				<when test="searchSalesCycle == 1">
	    					AND OL.SALES_CYCLE != '5'
	    					AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')
	    				</when>
	    				<when test="searchSalesCycle == 2">
	    					AND OL.SALES_CYCLE = '5'
	    				</when>
	    				<when test="searchSalesCycle == 3">
	    					AND OL.OPPORTUNITY_ID IN (SELECT OPPORTUNITY_ID FROM OPPORTUNITY_AMOUNT_SPLIT)
	    				</when>
	    				<when test="searchSalesCycle == 4">
	    					AND OL.REBATE_YN = 'Y'
	    				</when>
	    				<when test="searchSalesCycle == 5">
	    					AND OL.SALES_CYCLE != '5'
	    					AND (OL.CLOSE_CATEGORY = '2' OR OL.CLOSE_CATEGORY = '3')
	    				</when>
	    			</choose>
	    	</when>
	    	<otherwise>
	    		<!-- AND OL.SALES_CYCLE != '4' -->
	    		<!-- AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1') -->
	    	</otherwise>
	    </choose>
	    
	    <if test=" searchContractAmount != null and searchContractAmount != '' ">
	      AND OL.CONTRACT_AMOUNT >= #{searchContractAmount}
	    </if>
	    
	    <if test=" searchKeyDeal != null and searchKeyDeal != '' ">
	      AND OL.KEY_DEAL_YN = #{searchKeyDeal}
	    </if>
	    
	    GROUP BY OL.OPPORTUNITY_ID
		<!-- ORDER BY OL.SYS_UPDATE_DATE DESC -->
		<!-- ORDER BY ABS(DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'), OL.CONTRACT_DATE)) ASC -->
		<choose>
			<when test="sortCategory != null and sortCategory != '' ">
				ORDER BY ${sortCategory}
			</when>
			<otherwise>
				<!-- ORDER BY OL.SYS_UPDATE_DATE DESC -->
				ORDER BY CASE WHEN (SALES_CYCLE = '5') THEN 1 ELSE 0 END, LATELY_UPDATE_DATE DESC
			</otherwise>
		</choose>
		
		<choose>
			<when test="numberPagingUseYn != null and numberPagingUseYn.equalsIgnoreCase('Y')">
				<include refid="common.pagingPost2"/>
			</when>
			<otherwise>
				<!-- <include refid="common.pagingPost2"/> -->
			</otherwise>
		</choose>
	</select>
	
	<!-- 유니용 영업기회 매출계획 -->
	<select id="selectOpportunitySalesPlanList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			AMOUNT_ID, 
			OPPORTUNITY_ID, 
			CREATOR_ID, 
			BASIS_MONTH, 
			BASIS_MONTH_C, 
			BASIS_PLAN_REVENUE_AMOUNT, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE, 
			BASIS_PLAN_GP_AMOUNT, 
			MEMBER_ID_NUM, 
			ERP_REV, 
			ERP_GP
		FROM OPPORTUNITY_AMOUNT
		WHERE 1=1
		AND OPPORTUNITY_ID = #{pkNo}
		ORDER BY BASIS_MONTH is null ASC, BASIS_MONTH
	</select>
	
	<!-- 유니용 영업기회 매출계획 스플릿 -->
	<select id="selectOpportunitySalesSplitList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			OAS.SPLIT_ID, 
			OAS.OPPORTUNITY_ID, 
			OAS.MEMBER_ID_NUM, 
			OAS.SPLIT_DATE, 
			OAS.SPLIT_REV, 
			OAS.SPLIT_GP, 
			OAS.SYS_REGISTER_DATE, 
			OAS.SYS_UPDATE_DATE,
			OMI.HAN_NAME,
			OMI.POSITION_STATUS
		FROM 
		OPPORTUNITY_AMOUNT_SPLIT AS OAS
		LEFT OUTER JOIN
		OUR_MEMBERS_INFO AS OMI ON OAS.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		WHERE 1=1
		AND OPPORTUNITY_ID = #{pkNo}
		ORDER BY OAS.SPLIT_DATE IS NULL ASC, OAS.MEMBER_ID_NUM
	</select>
	
	<!-- 영업단계 체크항목 -->
	<select id="selectOpportunityScCheckList" parameterType="hashmap" resultType="hashmap">
		SELECT OSC_ID, OPPORTUNITY_ID, CHECK_YN, CHECK_SEQ, SYS_REGISTER_DATE, SYS_UPDATE_DATE
		FROM OPPORTUNITY_SALESCYCLE_CHECK
		WHERE 1=1
		AND OPPORTUNITY_ID = #{pkNo}
		ORDER BY CHECK_SEQ
	</select>
	
	<!-- 영업기회 리스트 마우스 오버 마일스톤 -->
	<select id="selectOpportunityMilestonesList" parameterType="hashmap" resultType="hashmap">
		SELECT MILESTONE_ID, OPPORTUNITY_ID, CREATOR_ID, KEY_MILESTONE, MILESTONE_SEQ, DUE_DATE, CLOSE_DATE, SYS_REGISTER_DATE, SYS_UPDATE_DATE, STATUS, ACT_ID, ACT_NAME
		FROM OPPORTUNITY_MILESTONE
		WHERE 1=1
		AND OPPORTUNITY_ID = #{pkNo}
		ORDER BY MILESTONE_ID
	</select>
	
	<select id="selectOpportunitySalesPlan" parameterType="hashmap" resultType="hashmap">
		SELECT 
			OMI.MEMBER_ID_NUM,
			OMI.HAN_NAME,
			OA.AMOUNT_ID,
			OA.BASIS_MONTH,
			OA.BASIS_PLAN_REVENUE_AMOUNT AS REV,
			OA.BASIS_PLAN_GP_AMOUNT AS GP,
			OA.ERP_REV,
			OA.ERP_GP
		FROM 
			OPPORTUNITY_AMOUNT AS OA 
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON OMI.MEMBER_ID_NUM= OA.MEMBER_ID_NUM
		WHERE 1=1
		AND OPPORTUNITY_ID = #{opportunity_id}
        <!-- 검색 고객사 그룹 -->
        <!-- <if test="basis_month != null and basis_month != '' ">
            AND BASIS_MONTH LIKE CONCAT('%', #{basis_month}, '%') 
        </if> -->
        <if test="basis_month != null and basis_month != '' ">
            AND YEAR(BASIS_MONTH) = YEAR(#{basis_month}) 
            AND QUARTER(BASIS_MONTH) = QUARTER(#{basis_month}) 
        </if>
		ORDER BY OMI.MEMBER_ID_NUM, OA.BASIS_MONTH;
	</select>
	
	<select id="selectSalesPlanCount" parameterType="hashmap" resultType="hashmap">
		SELECT OMI.MEMBER_ID_NUM,OMI.HAN_NAME
		FROM 
			OPPORTUNITY_AMOUNT AS OA 
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON OMI.MEMBER_ID_NUM= OA.MEMBER_ID_NUM
		WHERE 1=1
		AND OA.OPPORTUNITY_ID = #{opportunity_id}
		GROUP BY OMI.MEMBER_ID_NUM
		ORDER BY OMI.MEMBER_ID_NUM
	</select>
	
	
	<select id="selectOpportunityDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				OL.OPPORTUNITY_ID, 
				OL.EXEC_ID, 
				OMI2.HAN_NAME AS EXEC_NAME,
				OMI2.POSITION_STATUS AS EXEC_POSITION,
				OL.OWNER_ID,
				OMI3.HAN_NAME AS OWNER_NAME,
				OMI3.POSITION_STATUS AS OWNER_POSITION,
				OL.IDENTIFIER_ID,
				OMI4.HAN_NAME AS IDENTIFIER_NAME,
				OMI4.POSITION_STATUS AS IDENTIFIER_POSITION,
				CCI2.COMPANY_NAME AS CUSTOMER_NAME,
				CCI2.COMPANY_ID AS CUSTOMER_ID,
				CCI2.ERP_REG_CODE AS ERP_CUSTOMER_ID,
				OL.SUBJECT, 
				OL.CONTRACT_AMOUNT, 
				OL.GP_AMOUNT, 
				OL.PARTNER_ROLE, 
				OL.CONTRACT_DATE, 
				OL.SALES_CYCLE, 
				OL.FORECAST_YN, 
				OL.ROUTE, 
				OL.SALES_PARTNER, 
				OL.DETAIL_CONENTS, 
				OL.CURRENT_MILESTONE, 
				OL.CLOSE_CATEGORY, 
				OL.CLOSE_DETAIL,
				OL.CONTRACT_TERM,
				OL.DISCRIMINATE_VALUE,
				OL.ERP_OPP_CD,
				OL.ERP_CHANGE_DATE,
				(
					SELECT CODE_NAME
					FROM COM_CODE
					WHERE 1=1
					AND USE_YN = 'Y'
					AND PARENT_CODE_ID = 'TPSO'
					AND CODE_ID = OL.CATEGORY_CD
					AND CODE_NAME NOT LIKE '%사용금지%'
				) AS CATEGORY_CD_NAME,
				OL.CATEGORY_CD,
				OL.ISSUE_STATUS_CD,
				OL.CLOSE_DATE,
				OL.TYPE_CD,
				OL.PROJECT_FORM_CD,
				(
					SELECT CODE_NAME
					FROM COM_CODE
					WHERE 1=1
					AND USE_YN = 'Y'
					AND PARENT_CODE_ID = 'PROJECT'
					AND CODE_ID = OL.PROJECT_FORM_CD
					AND CODE_NAME NOT LIKE '%사용금지%'
				) AS PROJECT_FORM_CD_NAME,
				OL.OPP_STATUS_CD,
				OL.PROBABILITY_CD,
				OL.CONTRACT_ST_DATE,
				OL.CONTRACT_ED_DATE,
				OL.ERP_CLIENT_DECISION_CD,
				OL.TEMP_FLAG,
				CII2.CUSTOMER_NAME AS ERP_CLIENT_DECISION_NAME,
				CCI4.COMPANY_NAME AS ERP_CLIENT_DECISION_COMPANY_NAME,
				OL.X_LOG_CD,
				OL.OMM_CD,
				OL.PROGRESS_CD,
				OL.ERP_CLIENT_CD,
				OL.BUY_CD,
				CII.CUSTOMER_NAME AS ERP_CLIENT_NAME,
				CII.ERP_CLIENT_CODE AS ERP_CLIENT_CODE,
				CII.COMPANY_ID AS ERP_CLIENT_COMPANY_CODE,
				CCI3.COMPANY_NAME AS ERP_CLIENT_COMPANY_NAME,
				CCI3.ERP_REG_CODE AS ERP_CLIENT_COMPANY_CODE_2,
				OL.ERP_CLIENT_CATEGORY_CD,
				OL.ERP_INST_CD,
				OL.ERP_PROJECT_CODE,
				DATE_FORMAT(OL.SYS_REGISTER_DATE, '%Y-%m-%d') AS SYS_REGISTER_DATE, 
				DATE_FORMAT(OL.SYS_UPDATE_DATE, '%Y-%m-%d') AS SYS_UPDATE_DATE,
				IFNULL(DATE_FORMAT(OL.SYS_UPDATE_DATE, '%Y-%m-%d %H:%i'),NOW()) AS LATELY_UPDATE_DATE,
				OMI.HAN_NAME,
				OMI.MEMBER_ID_NUM,
				CCI.COMPANY_NAME,
				CCI.COMPANY_ID,
				CCI.ERP_REG_CODE AS ERP_COMPANY_ID,
				ODI.ERP_DIVISION_CD AS IDEN_ERP_DIVISION_CD,
				OTI.ERP_TEAM_CD AS IDEN_ERP_TEAM_CD,
				(
					SELECT COUNT(*) 
					FROM COACHING_TALK AS CT 
					WHERE 1=1 AND CATEGORY='OPP' AND OL.OPPORTUNITY_ID = CT.ID
				)AS COACHING_TALK_COUNT,
				OL.KEY_DEAL_YN
			FROM 
				OPPORTUNITY_LOG AS OL
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI ON OL.CREATOR_ID = OMI.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI2 ON OL.EXEC_ID = OMI2.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI3 ON OL.OWNER_ID = OMI3.MEMBER_ID_NUM
				LEFT OUTER JOIN 
				OUR_MEMBERS_INFO AS OMI4 ON OL.IDENTIFIER_ID = OMI4.MEMBER_ID_NUM
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI ON OL.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI2 ON OL.CUSTOMER_ID = CCI2.COMPANY_ID
				LEFT OUTER JOIN
				CLIENT_INDIVIDUAL_INFO AS CII ON OL.ERP_CLIENT_CD = CII.CUSTOMER_ID
				LEFT OUTER JOIN
				CLIENT_INDIVIDUAL_INFO AS CII2 ON OL.ERP_CLIENT_DECISION_CD = CII2.CUSTOMER_ID
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI3 ON CII.COMPANY_ID = CCI3.COMPANY_ID
				LEFT OUTER JOIN
				CLIENT_COMPANY_INFO AS CCI4 ON CII2.COMPANY_ID = CCI4.COMPANY_ID
				LEFT OUTER JOIN
				OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI4.MEMBER_DIVISION 
				LEFT OUTER JOIN
				OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI4.MEMBER_TEAM
			WHERE 1=1
		AND OL.OPPORTUNITY_ID = #{pkNo}
		]]>
	</select>
	
	
	<select id="opportunityFileList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			FILE_ID, 
			OPPORTUNITY_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			FILE_NAME, 
			FILE_PATH, 
			FILE_TYPE, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE
		FROM OPPORTUNITY_FILE_STORE
		<choose>
			<when test="filePKArray != null and filePKArray != '' ">
			WHERE OPPORTUNITY_ID IN(${filePKArray})
			</when>
			<otherwise>
			WHERE OPPORTUNITY_ID IN('')
			</otherwise>
		</choose>
		<!-- <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
	        #{item.BIZ_ID}
	  	</foreach> -->
	</select>
	
	
	<select id="selectOpportunityFileList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			FILE_ID, 
			OPPORTUNITY_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			FILE_NAME, 
			FILE_PATH, 
			FILE_TYPE, 
			SYS_REGISTER_DATE, 
			SYS_UPDATE_DATE
		FROM OPPORTUNITY_FILE_STORE
		WHERE 1=1
		AND OPPORTUNITY_ID = #{pkNo}
	</select>
	
	<select id="selectOpportunityProductSalesList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			OSPL.OSPL_ID, 
			OSPL.OPPORTUNITY_ID, 
			OSPL.PRODUCT_ORDER, 
			OSPL.PRODUCT_CD, 
			OSPL.PRODUCT_PRICE, 
			OSPL.PRODUCT_YN, 
			OSPL.PRODUCT_COUNT, 
			OSPL.SYS_REGISTER_DATE, 
			OSPL.SYS_UPDATE_DATE, 
			OSPL.WORKS_CD,
			OPI.PRODUCT_NAME,
			OPI.PRODUCT_STANDARD
		FROM 
		OPPORTUNITY_SALES_PRODUCT_LIST AS OSPL
		LEFT OUTER JOIN
		OUR_PRODUCT_INFO AS OPI ON OSPL.PRODUCT_CD = OPI.PRODUCT_CODE
		WHERE 1=1
		AND OSPL.OPPORTUNITY_ID = #{pkNo}
		ORDER BY OSPL.PRODUCT_ORDER
	</select>
	
	<select id="selectOpportunityProductPsList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			OPPL.OPPL_ID, 
			OPPL.OPPORTUNITY_ID, 
			OPPL.PRODUCT_ORDER, 
			OPPL.PRODUCT_CD, 
			OPPL.PRODUCT_PRICE, 
			OPPL.PRODUCT_COUNT, 
			OPPL.PURCHASE_ENTER_CD, 
			OPPL.PURCHASE_DATE, 
			OPPL.SYS_REGISTER_DATE, 
			OPPL.SYS_UPDATE_DATE, 
			OPPL.WORKS_CD,
			OPI.PRODUCT_NAME,
			OPI.PRODUCT_STANDARD,
			CCI.COMPANY_ID,
			CCI.COMPANY_NAME,
			CCI.ERP_REG_CODE
		FROM 
		OPPORTUNITY_PURCHASE_PRODUCT_LIST AS OPPL
		LEFT OUTER JOIN
		OUR_PRODUCT_INFO AS OPI ON OPPL.PRODUCT_CD = OPI.PRODUCT_CODE
		LEFT OUTER JOIN
		CLIENT_COMPANY_INFO AS CCI ON OPPL.PURCHASE_ENTER_CD = CCI.COMPANY_ID
		WHERE 1=1
		AND OPPL.OPPORTUNITY_ID = #{pkNo}
		ORDER BY OPPL.PRODUCT_ORDER
	</select>
	
	<insert id="insertOpportunity" parameterType="hashmap">
	       INSERT INTO OPPORTUNITY_LOG
			(
				CREATOR_ID,
				EXEC_ID, 
				COMPANY_ID, 
				CUSTOMER_ID, 
				SUBJECT, 
				CONTRACT_AMOUNT, 
				PARTNER_ROLE, 
				CONTRACT_DATE, 
				OWNER_ID, 
				FORECAST_YN, 
				ROUTE, 
				SALES_PARTNER, 
				DETAIL_CONENTS,
				CONTRACT_ST_DATE, 
				CONTRACT_ED_DATE, 
				SALES_CYCLE,
				CLOSE_CATEGORY,
				CLOSE_DETAIL,
				IDENTIFIER_ID,
				DISCRIMINATE_VALUE,
				CATEGORY_CD,
				CLOSE_DATE,
				TYPE_CD,
				PROJECT_FORM_CD,
				PROBABILITY_CD,
				X_LOG_CD,
				OMM_CD,
				ERP_CLIENT_CD,
				ERP_CLIENT_DECISION_CD,
				ERP_CLIENT_CATEGORY_CD,
				BUY_CD,
				TEMP_FLAG,
				OPPORTUNITY_HIDDEN_ID
			)
				VALUES
			(
				#{hiddenModalCreatorId}, 
				#{hiddenModalExecId}, 
				#{hiddenModalCompanyId},	
				<choose>
					<when test="hiddenModalCustomerId != null and hiddenModalCustomerId != '' ">
						#{hiddenModalCustomerId},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose>
				#{textModalSubject}, 
				<choose>
					<when test="hiddenModalContractAmount != null and hiddenModalContractAmount != '' ">
						#{hiddenModalContractAmount},
					</when>
					<otherwise>
						0,
					</otherwise>
				</choose>
				#{textModalPartnerRole}, 
				<choose>
					<when test="textModalContractDate != null and textModalContractDate != '' ">
						#{textModalContractDate},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose>
				#{hiddenModalOwnerId}, 
				#{checkModalForecastYN}, 
				#{textModalRoute}, 
				#{hiddenModalPartnerId}, 
				#{textareaModalDetailConents},
				<choose>
					<when test="textModalContractStDate != null and textModalContractStDate != '' ">
						#{textModalContractStDate},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose>
				<choose>
					<when test="textModalContractEdDate != null and textModalContractEdDate != '' ">
						#{textModalContractEdDate},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose>
				#{hiddenModalSalesCycle},
				<choose>
					<when test="hiddenModalSalesCycle == '4'  or hiddenModalSalesCycle.equalsIgnoreCase('4') ">
						#{selectSalesCloseCategory},
						#{textareaSalesCloseDetail},
					</when>
					<otherwise>
						NULL,
						NULL,
					</otherwise>
				</choose>
				#{hiddenModalIdentifierId},
				#{textareaModalDiscriminateValue},
				#{selectModalCategoryCd},
				<choose>
					<when test="textModalContractDate != null and textModalContractDate != '' ">
						#{textModalContractDate},
					</when>
					<otherwise>
						NULL,
					</otherwise>
				</choose>
				#{selectModalTypeCd},
				#{selectModalProjectForm},
				1, <!-- 수주확률 high -->
				'N',
				'N',
				#{hiddenModalClientMaster},
				#{hiddenModalClientDecision},
				#{selectModalClientCategoryCd},
				#{selectModalBuyCd},
				#{hiddenModalTempFlag},
				<choose>
					<when test="hiddenModalOpportunityhiddenId != null and hiddenModalOpportunityhiddenId != '' ">
						#{hiddenModalOpportunityhiddenId}
					</when>
					<otherwise>
						NULL
					</otherwise>
				</choose>
			);
		<selectKey keyProperty="filePK" resultType="Integer" order="AFTER">
        	SELECT LAST_INSERT_ID();
    	</selectKey>
	</insert>
	
	<insert id="insertOpportunityProductSales" parameterType="hashmap">
	 	<![CDATA[
			INSERT INTO OPPORTUNITY_SALES_PRODUCT_LIST
			(
				OPPORTUNITY_ID, 
				PRODUCT_ORDER, 
				PRODUCT_CD, 
				PRODUCT_PRICE, 
				PRODUCT_YN, 
				PRODUCT_COUNT, 
				WORKS_CD
			)
			VALUES
			(
					#{pkNo}, 
					#{product_order}, 
					#{product_cd}, 
					#{product_price}, 
					#{product_yn}, 
					#{product_count}, 
					#{works_cd}
			);
		]]>
	</insert>
	
	<insert id="insertOpportunityProductPs" parameterType="hashmap">
	 	<![CDATA[
			INSERT INTO OPPORTUNITY_PURCHASE_PRODUCT_LIST
			(
				OPPORTUNITY_ID, 
				PRODUCT_ORDER, 
				PRODUCT_CD, 
				PRODUCT_PRICE, 
				PRODUCT_COUNT, 
				WORKS_CD,
				PURCHASE_ENTER_CD, 
				PURCHASE_DATE 
			)
			VALUES
			(
					#{pkNo}, 
					#{product_order}, 
					#{product_cd}, 
					#{product_price}, 
					#{product_count}, 
					#{works_cd},
					#{purchase_enter_cd}, 
			]]>
				<choose>
					<when test="purchase_date != null and purchase_date != '' ">
						#{purchase_date}
					</when>
					<otherwise>
						NULL
					</otherwise>
				</choose>
			);
	</insert>
	
	<delete id="deleteOpportunityProductSales" parameterType="hashmap">
	 	<![CDATA[
			DELETE FROM OPPORTUNITY_SALES_PRODUCT_LIST
			WHERE 1=1
			AND OPPORTUNITY_ID=#{hiddenModalPK}
		]]>
	</delete>
	
	<delete id="deleteOpportunityProductPs" parameterType="hashmap">
	 	<![CDATA[
			DELETE FROM OPPORTUNITY_PURCHASE_PRODUCT_LIST
			WHERE 1=1
			AND OPPORTUNITY_ID=#{hiddenModalPK}
		]]>
	</delete>
	
	<insert id="insertOpportunitySalesActual" parameterType="hashmap">
	       INSERT INTO ERP_SALES_ACTUAL
			(
				MEMBER_ID_NUM, 
				BASIS_DATE, 
				BOOKING_TYPE, 
				ACTUAL_TCV_AMOUNT, 
				ACTUAL_REV_AMOUNT, 
				ACTUAL_GP_AMOUNT, 
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE, 
				OPPORTUNITY_ID
			)
			VALUES
			(
				#{member_id_num}, 
				#{basisMonth}, 
				'', 
				0, 
				#{amount_r}, 
				#{amount_g}, 
				CURRENT_TIMESTAMP, 
				CURRENT_TIMESTAMP, 
				#{opportunity_id}
			)
	</insert>
	
	<insert id="deleteOpportunitySalesActual" parameterType="Integer">
	       DELETE FROM ERP_SALES_ACTUAL 
	       WHERE 1=1
	       AND OPPORTUNITY_ID = #{opportunity_id}
	</insert>
	
	<insert id="insertOpportunitySalesPlan" parameterType="hashmap">
			INSERT INTO OPPORTUNITY_AMOUNT
			(
				OPPORTUNITY_ID, 
				CREATOR_ID, 
				BASIS_MONTH, 
				BASIS_MONTH_C, 
				BASIS_PLAN_REVENUE_AMOUNT, 
				BASIS_PLAN_GP_AMOUNT, 
				MEMBER_ID_NUM,
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE
			)
			VALUES
			(
				#{pkNo}, 
				#{hiddenModalCreatorId}, 
				<choose>
					<when test="basisMonth_s != null and basisMonth_s != '' ">
					 #{basisMonth_s},
					</when>
					<otherwise>
					 NULL,
					</otherwise>
				</choose> 
				<choose>
					<when test="basisMonth_c != null and basisMonth_c != '' ">
					 #{basisMonth_c},
					</when>
					<otherwise>
					 NULL,
					</otherwise>
				</choose>
				<choose>
					<when test="amount_r != null and amount_r != '' ">
					 #{amount_r},
					</when>
					<otherwise>
					 0,
					</otherwise>
				</choose>
				<choose>
					<when test="amount_g != null and amount_g != '' ">
					 #{amount_g},
					</when>
					<otherwise>
					 0,
					</otherwise>
				</choose>
				#{hiddenModalOwnerId}, 
				CURRENT_TIMESTAMP, 
				CURRENT_TIMESTAMP
			);
	</insert>
	
	<delete id="deleteOpportunitySalesPlan" parameterType="hashmap">
	 	<![CDATA[
			DELETE FROM OPPORTUNITY_AMOUNT
			WHERE 1=1
			AND OPPORTUNITY_ID=#{hiddenModalPK}
		]]>
	</delete>
	
	<insert id="insertOpportunitySalesSplit" parameterType="hashmap">
			INSERT INTO OPPORTUNITY_AMOUNT_SPLIT
			(
				OPPORTUNITY_ID, 
				MEMBER_ID_NUM, 
				SPLIT_DATE, 
				SPLIT_REV, 
				SPLIT_GP, 
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE
			)
			VALUES
			(
				#{pkNo}, 
				#{member_id_num}, 
				<choose>
					<when test="split_date != null and split_date != '' ">
					 #{split_date},
					</when>
					<otherwise>
					 NULL,
					</otherwise>
				</choose> 
				#{split_r}, 
				#{split_g},
				CURRENT_TIMESTAMP, 
				CURRENT_TIMESTAMP
			);
	</insert>
	
	<delete id="deleteOpportunitySalesSplit" parameterType="hashmap">
	 	<![CDATA[
			DELETE FROM OPPORTUNITY_AMOUNT_SPLIT
			WHERE 1=1
			AND OPPORTUNITY_ID=#{hiddenModalPK}
		]]>
	</delete>
	
	<insert id="insertHistoryOpportunity" parameterType="hashmap">
		INSERT INTO OPPORTUNITY_LOG_UPDATE_HISTORY
		(OPPORTUNITY_ID, EXEC_ID, COMPANY_ID, CUSTOMER_ID, SUBJECT, CONTRACT_AMOUNT, BIZ_MIX, CONTRACT_DATE, OWNER_ID, SALES_CYCLE, FORECAST_YN, ROUTE, SALES_PARTNER, DETAIL_CONENTS, CURRENT_MILESTONE, CLOSE_CATEGORY, CLOSE_DETAIL, SYS_REGISTER_DATE, SYS_UPDATE_DATE, CREATOR_ID, CONTRACT_TERM, DISCRIMINATE_VALUE, IDENTIFIER_ID, OPPORTUNITY_HIDDEN_ID, PARTNER_ROLE, GP_AMOUNT, HISTORY_CREATOR_ID, HISTORY_SYS_REGISTER_DATE)
		SELECT OPPORTUNITY_ID, EXEC_ID, COMPANY_ID, CUSTOMER_ID, SUBJECT, CONTRACT_AMOUNT, BIZ_MIX, CONTRACT_DATE, OWNER_ID, SALES_CYCLE, FORECAST_YN, ROUTE, SALES_PARTNER, DETAIL_CONENTS, CURRENT_MILESTONE, CLOSE_CATEGORY, CLOSE_DETAIL, SYS_REGISTER_DATE, SYS_UPDATE_DATE, CREATOR_ID, CONTRACT_TERM, DISCRIMINATE_VALUE, IDENTIFIER_ID, OPPORTUNITY_HIDDEN_ID, PARTNER_ROLE, GP_AMOUNT,#{hiddenModalCreatorId},CURRENT_TIMESTAMP
		FROM OPPORTUNITY_LOG
		WHERE 1=1
		AND OPPORTUNITY_ID=#{hiddenModalPK};
		
		INSERT INTO OPPORTUNITY_AMOUNT_UPDATE_HISTORY
		(AMOUNT_ID, OPPORTUNITY_ID, CREATOR_ID, BASIS_MONTH, BASIS_PLAN_REVENUE_AMOUNT, SYS_REGISTER_DATE, SYS_UPDATE_DATE, BASIS_PLAN_GP_AMOUNT, MEMBER_ID_NUM, HISTORY_CREATOR_ID, HISTORY_SYS_REGISTER_DATE)
		SELECT AMOUNT_ID, OPPORTUNITY_ID, CREATOR_ID, BASIS_MONTH, BASIS_PLAN_REVENUE_AMOUNT, SYS_REGISTER_DATE, SYS_UPDATE_DATE, BASIS_PLAN_GP_AMOUNT, MEMBER_ID_NUM,#{hiddenModalCreatorId},CURRENT_TIMESTAMP
		FROM OPPORTUNITY_AMOUNT
		WHERE 1=1
		AND OPPORTUNITY_ID=#{hiddenModalPK};
	</insert>
	
	<update id="updateOpportunity" parameterType="hashmap">
	       UPDATE OPPORTUNITY_LOG
	        SET 
	        	EXEC_ID						=      #{hiddenModalExecId}, 
				COMPANY_ID				= 		#{hiddenModalCompanyId},	
				<if test="hiddenModalCustomerId != null and hiddenModalCustomerId != '' ">
				CUSTOMER_ID				=      #{hiddenModalCustomerId}, 
				</if>			
				SUBJECT=                  				#{textModalSubject}, 
				CONTRACT_AMOUNT=          				#{hiddenModalContractAmount}, 
				<!-- GP_AMOUNT=          				#{hiddenModalGPAmount}, --> 
				PARTNER_ROLE=                  				#{textModalPartnerRole},
				<if test="textModalContractDate != null and textModalContractDate != '' ">
				CONTRACT_DATE=            				#{textModalContractDate}, 
				</if>
				OWNER_ID=                				#{hiddenModalOwnerId}, 
				FORECAST_YN=              				#{checkModalForecastYN}, 
				ROUTE=                    				#{textModalRoute}, 
				SALES_PARTNER=            				#{hiddenModalPartnerId}, 
				DETAIL_CONENTS=           				#{textareaModalDetailConents},
				CONTRACT_TERM = 			#{selectModalContractTerm},
				IDENTIFIER_ID =  #{hiddenModalIdentifierId},
				DISCRIMINATE_VALUE = #{textareaModalDiscriminateValue},
				SALES_CYCLE = #{hiddenModalSalesCycle},
				ERP_CLIENT_DECISION_CD = #{hiddenModalClientDecision},
				<choose>
					<when test="hiddenModalSalesCycle == '4'  or hiddenModalSalesCycle.equalsIgnoreCase('4') ">
					CLOSE_CATEGORY = #{selectSalesCloseCategory},
					CLOSE_DETAIL = #{textareaSalesCloseDetail},
					</when>
					<otherwise>
					CLOSE_CATEGORY = NULL,
					CLOSE_DETAIL = NULL,
					</otherwise>
				</choose>
				<if test="textModalContractStDate != null and textModalContractStDate != '' ">
				CONTRACT_ST_DATE = #{textModalContractStDate},
				</if>
				<if test="textModalContractEdDate != null and textModalContractEdDate != '' ">
				CONTRACT_ED_DATE = #{textModalContractEdDate},
				</if>
				CATEGORY_CD = 	#{selectModalCategoryCd},
				CLOSE_DATE = #{textModalContractDate},
				TYPE_CD = #{selectModalTypeCd},
				PROJECT_FORM_CD = #{selectModalProjectForm},
				ERP_CLIENT_CD = #{hiddenModalClientMaster},
				ERP_CLIENT_CATEGORY_CD = #{selectModalClientCategoryCd},
				BUY_CD = #{selectModalBuyCd},
				TEMP_FLAG = #{hiddenModalTempFlag},
				SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE OPPORTUNITY_ID=#{hiddenModalPK};
	</update>
	
	<delete id="deleteOpportunity" parameterType="hashmap">
		DELETE FROM CLIENT_EVENT_FILE_STORE WHERE EVENT_ID=#{hiddenModalPK};
		DELETE FROM CLIENT_EVENT_LOG WHERE EVENT_ID=#{hiddenModalPK};
	</delete>
	
	
	<insert id="insertOpportunityMilestone" parameterType="hashmap">
		INSERT INTO OPPORTUNITY_MILESTONE
		(
			OPPORTUNITY_ID, 
			CREATOR_ID, 
			KEY_MILESTONE, 
			DUE_DATE, 
			CLOSE_DATE, 
			STATUS, 
			ACT_ID,
			ACT_NAME
		)
		VALUES
		(
			#{pkNo}, 
			#{hiddenModalCreatorId},  
			#{KEY_MILESTONE}, 
			<choose>
				<when test="DUE_DATE != null and DUE_DATE != '' ">
				 #{DUE_DATE},
				</when>
				<otherwise>
				 NULL,
				</otherwise>
			</choose>  
			<choose>
				<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
				#{CLOSE_DATE},
				</when>
				<otherwise>
				NULL, 
				</otherwise>
			</choose>  
			#{HIDDEN_STATUS}, 
			#{ACT_ID},
			#{ACT_NAME}
			
		);
	</insert>
	
	<delete id="deleteOpportunityMilestone" parameterType="hashmap">
		DELETE FROM OPPORTUNITY_MILESTONE
		WHERE 1=1
		AND OPPORTUNITY_ID = #{filePK}
	</delete>
	
	<update id="updateOpportunityMilestone" parameterType="hashmap">
		UPDATE OPPORTUNITY_MILESTONE
			SET
				KEY_MILESTONE = #{KEY_MILESTONE}, 
				<choose>
					<when test="DUE_DATE != null and DUE_DATE != '' ">
					DUE_DATE = #{DUE_DATE}, 
					</when>
					<otherwise>
					DUE_DATE = NULL, 
					</otherwise>
				</choose>
				<choose>
					<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
					CLOSE_DATE = #{CLOSE_DATE}, 
					</when>
					<otherwise>
					CLOSE_DATE = NULL, 
					</otherwise>
				</choose>
				STATUS = #{HIDDEN_STATUS},
				ACT_ID = #{ACT_ID},
				ACT_NAME = #{ACT_NAME},
				SYS_UPDATE_DATE = CURRENT_TIMESTAMP
		WHERE  1=1
		AND MILESTONE_ID = #{MILESTONE_ID}
	</update>
	
	<select id="selectOpportunityMilestons" parameterType="hashmap" resultType="hashmap">
			SELECT 
				@ROWNUM := @ROWNUM +1 AS ROWNUM,	
				OM.MILESTONE_ID, 
				OM.OPPORTUNITY_ID, 
				OM.CREATOR_ID, 
				OM.KEY_MILESTONE, 
				OM.MILESTONE_SEQ, 
				IFNULL(OM.DUE_DATE,'') AS DUE_DATE, 
				IFNULL(OM.CLOSE_DATE,'') AS CLOSE_DATE, 
				OM.SYS_REGISTER_DATE, 
				OM.SYS_UPDATE_DATE, 
				OM.STATUS,
				OM.ACT_ID,
				OMI.HAN_NAME AS ACT_NAME,
				OMI.POSITION_STATUS AS ACT_POSITION
			FROM 
			OPPORTUNITY_MILESTONE AS OM 
			LEFT OUTER JOIN
			OUR_MEMBERS_INFO AS OMI ON OM.ACT_ID = OMI.MEMBER_ID_NUM,(SELECT @ROWNUM:=0) AS ROWNUM
			WHERE 1=1
			AND OM.OPPORTUNITY_ID = #{pkNo}
			ORDER BY OM.MILESTONE_ID ASC;
	</select>
	
	<select id="saleCount" parameterType="hashmap" resultType="Integer">
		SELECT IFNULL(SUM(CHECKLIST_ID),0) AS CHECKLIST_ID 
		FROM OPPORTUNITY_CHECKLIST
		WHERE 1=1
		AND OPPORTUNITY_ID = #{hiddenModalPK}
		AND CHECKLIST_SEQ = #{CHECKLIST_SEQ}
	</select>
	
	<select id="saleCountOwner" parameterType="hashmap" resultType="Integer">
		SELECT IFNULL(SUM(CHECKLIST_ID),0) AS CHECKLIST_ID 
		FROM OPPORTUNITY_CHECKLIST_OWNER
		WHERE 1=1
		AND OPPORTUNITY_ID = #{hiddenModalPK}
		AND CHECKLIST_SEQ = #{CHECKLIST_SEQ}
	</select>
	
	<select id="gridSalesCheckList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				CHECKLIST_SEQ,
				CHECKLIST_ID,
				OPPORTUNITY_ID,
				CASE 
					WHEN CHECKLIST_SEQ = 1 THEN '일정/예산'
					WHEN CHECKLIST_SEQ = 2 THEN '벤더등록'
					WHEN CHECKLIST_SEQ = 3 THEN 'tech bidding'
					WHEN CHECKLIST_SEQ = 4 THEN '가격'
				END AS CATEGORY,
				STATUS,
				MEMO
			FROM OPPORTUNITY_CHECKLIST
			WHERE OPPORTUNITY_ID = #{hiddenModalPK}
			ORDER BY CHECKLIST_SEQ
		]]>
		<!-- ORDER BY OC.CHECKLIST_SEQ ASC; -->
	</select>
	
	<select id="gridSalesCheckListOwner" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				CHECKLIST_SEQ,
				CHECKLIST_ID,
				OPPORTUNITY_ID,
				CASE 
					WHEN CHECKLIST_SEQ = 1 THEN '일정/예산'
					WHEN CHECKLIST_SEQ = 2 THEN '벤더등록'
					WHEN CHECKLIST_SEQ = 3 THEN 'tech bidding'
					WHEN CHECKLIST_SEQ = 4 THEN '가격'
				END AS CATEGORY,
				STATUS,
				MEMO
			FROM OPPORTUNITY_CHECKLIST_OWNER
			WHERE OPPORTUNITY_ID = #{hiddenModalPK}
			ORDER BY CHECKLIST_SEQ
		]]>
		<!-- ORDER BY OC.CHECKLIST_SEQ ASC; -->
	</select>
	
	<select id="gridOpportunityCheckList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				TMP.*,
				@ROWNUM := @ROWNUM + 1 AS ROWNUM,
				CASE 
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 1 THEN TMP.CHECKLIST_SEQ_1
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 2 THEN TMP.CHECKLIST_SEQ_2
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 3 THEN TMP.CHECKLIST_SEQ_3
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 4 THEN TMP.CHECKLIST_SEQ_4
					  ELSE 0
				END AS attr
			FROM
			(
				SELECT 
					OAP.ACTION_ID, 
					OAP.OPPORTUNITY_ID, 
					OAP.CREATOR_ID, 
					OAP.CREATE_DATETIME, 
					OAP.ACTION_PLAN_NAME, 
					OAP.ITEMS_TO_BE_FIXED, 
					OAP.ACTION_OWNER, 
					OMI.HAN_NAME AS ACTION_OWNER_NAME, 
					OMI.POSITION_STATUS AS ACTION_OWNER_POSITION,
					OAP.SOLVE_OWNER_ID,
					OAP.DUE_DATE, 
					OAP.CLOSE_DATE, 
					OAP.SYS_REGISTER_DATE, 
					OAP.SYS_UPDATE_DATE, 
					OC.STATUS,
					OC.STATUS AS HIDDEN_STATUS,						
					OC.CHECKLIST_ID, 
					OC.CHECKLIST_NAME, 
					OC.CHECKLIST_SEQ,
					OC.MEMO,
					SUM_TMP.CHECKLIST_SEQ_1,
					SUM_TMP.CHECKLIST_SEQ_2,
					SUM_TMP.CHECKLIST_SEQ_3,
					SUM_TMP.CHECKLIST_SEQ_4,
					 IF(@PREV <> OC.CHECKLIST_SEQ , @CNT := 1, @CNT := @CNT + 1) AS RANK,
					 @PREV := OC.CHECKLIST_SEQ
				FROM 
				OPPORTUNITY_CHECKLIST AS OC 
				LEFT OUTER JOIN	
				OPPORTUNITY_ACTION_PLAN AS OAP ON OAP.CHECKLIST_ID = OC.CHECKLIST_ID AND OAP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID
				LEFT OUTER JOIN
				OUR_MEMBERS_INFO AS OMI ON OAP.ACTION_OWNER = OMI.MEMBER_ID_NUM 
				INNER JOIN
				(
					SELECT OC.OPPORTUNITY_ID, OC.CHECKLIST_SEQ,
					 SUM(IF(OC.CHECKLIST_SEQ= 1,1,0)) AS CHECKLIST_SEQ_1,
					 SUM(IF(OC.CHECKLIST_SEQ= 2,1,0)) AS CHECKLIST_SEQ_2,
					 SUM(IF(OC.CHECKLIST_SEQ= 3,1,0)) AS CHECKLIST_SEQ_3,
					 SUM(IF(OC.CHECKLIST_SEQ= 4,1,0)) AS CHECKLIST_SEQ_4
					FROM 
					OPPORTUNITY_CHECKLIST AS OC 
					LEFT OUTER JOIN	
					OPPORTUNITY_ACTION_PLAN AS OAP ON OAP.CHECKLIST_ID = OC.CHECKLIST_ID AND OAP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID
					GROUP BY OC.OPPORTUNITY_ID, OC.CHECKLIST_SEQ
				) AS SUM_TMP ON SUM_TMP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID AND OC.CHECKLIST_SEQ = SUM_TMP.CHECKLIST_SEQ
				,(SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT	
				WHERE 1=1
				AND OC.OPPORTUNITY_ID = #{hiddenModalPK}
			) AS TMP
			WHERE 1=1
			AND TMP.ACTION_ID IS NOT NULL
			ORDER BY TMP.CHECKLIST_SEQ, TMP.RANK
		]]>
	</select>
	
	
	<delete id="deleteSalesCheckList" parameterType="hashmap">
		DELETE FROM OPPORTUNITY_ACTION_PLAN WHERE OPPORTUNITY_ID = #{filePK};
		DELETE FROM OPPORTUNITY_CHECKLIST WHERE OPPORTUNITY_ID = #{filePK};
	</delete>
	
	<delete id="deleteSalesWinList" parameterType="hashmap">
		DELETE FROM OPPORTUNITY_WIN_PLAN WHERE OPPORTUNITY_ID = #{filePK};
		DELETE FROM OPPORTUNITY_CHECKLIST_OWNER WHERE OPPORTUNITY_ID = #{filePK};
	</delete>
	
	
	<insert id="insertCheckList" parameterType="hashmap">
		<![CDATA[
		INSERT INTO OPPORTUNITY_CHECKLIST
		(
			OPPORTUNITY_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			CHECKLIST_NAME, 
			CHECKLIST_SEQ, 
			MEMO, 
			STATUS
		)
		VALUES
		(
			#{filePK}, 
			#{hiddenModalCreatorId}, 
			CURRENT_TIMESTAMP, 
			#{NAME},
			#{SEQ}, 
			#{MEMO},
			#{STATUS}
		);
		]]>
	</insert>
	
	<insert id="insertCheckListOwner" parameterType="hashmap">
	<![CDATA[
		INSERT INTO OPPORTUNITY_CHECKLIST_OWNER
		(
			OPPORTUNITY_ID, 
			CREATOR_ID, 
			CREATE_DATETIME, 
			CHECKLIST_NAME, 
			CHECKLIST_SEQ, 
			STATUS
		)
		VALUES
		(
			#{filePK}, 
			#{hiddenModalCreatorId}, 
			CURRENT_TIMESTAMP, 
			#{NAME},
			#{SEQ}, 
			#{STATUS}
		);
		]]>
	</insert>
	
	<insert id="insertSalesCycleActionPlan" parameterType="hashmap">
	 INSERT INTO OPPORTUNITY_ACTION_PLAN
	(
		OPPORTUNITY_ID, 
		CHECKLIST_ID, 
		CREATOR_ID, 
		CREATE_DATETIME,
		ACTION_PLAN_NAME, 
		ITEMS_TO_BE_FIXED,
		ACTION_OWNER, 
		SOLVE_OWNER_ID,
		DUE_DATE, 
		CLOSE_DATE, 
		STATUS
	)
	VALUES
	(
		#{hiddenModalPK}, 
		(SELECT CHECKLIST_ID FROM OPPORTUNITY_CHECKLIST where 1=1 and OPPORTUNITY_ID = #{hiddenModalPK} and CHECKLIST_SEQ = #{SEQ}),
		#{hiddenModalCreatorId}, 
		CURRENT_TIMESTAMP,
		#{ACTION_PLAN_NAME},
		#{ITEMS_TO_BE_FIXED}, 
		#{ACTION_OWNER},
		#{SOLVE_OWNER_ID},
		<choose>
			<when test="DUE_DATE != null and DUE_DATE != '' ">
				#{DUE_DATE},
			</when>
			<otherwise>
				NULL,
			</otherwise>
		</choose> 
		 
		 <choose>
			<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
				#{CLOSE_DATE},
			</when>
			<otherwise>
				NULL,
			</otherwise>
		</choose> 
		#{STATUS}
	);
	</insert>
	
	
	<insert id="insertSalesCycleWinPlan" parameterType="hashmap">
	INSERT INTO OPPORTUNITY_WIN_PLAN
	(
		OPPORTUNITY_ID, 
		CHECKLIST_ID, 
		CREATOR_ID, 
		CREATE_DATETIME, 
		ITEM_2BE_FIXED, 
		ACTION_PLAN_NAME, 
		ACTION_OWNER, 
		SOLVE_OWNER_ID,
		DUE_DATE, 
		CLOSE_DATE, 
		STATUS
	)
	VALUES
	(
		#{hiddenModalPK},  
		(SELECT CHECKLIST_ID FROM OPPORTUNITY_CHECKLIST_OWNER where 1=1 and OPPORTUNITY_ID = #{hiddenModalPK} and CHECKLIST_SEQ = #{SEQ}),
		#{hiddenModalCreatorId}, 
		CURRENT_TIMESTAMP, 
		#{ITEM_2BE_FIXED}, 
		#{ACTION_PLAN_NAME}, 
		#{ACTION_OWNER},
		#{SOLVE_OWNER_ID}, 
		<choose>
			<when test="DUE_DATE != null and DUE_DATE != '' ">
				#{DUE_DATE},
			</when>
			<otherwise>
				NULL,
			</otherwise>
		</choose> 
		 <choose>
			<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
				#{CLOSE_DATE},
			</when>
			<otherwise>
				NULL,
			</otherwise>
		</choose>  
		#{HIDDEN_STATUS}
	);
	</insert>
	
	<update id="updateSalesCheckList" parameterType="hashmap">
			UPDATE OPPORTUNITY_CHECKLIST
					SET 
						STATUS=#{HIDDEN_STATUS},
						MEMO = #{MEMO}, 
						SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE 1=1
			AND OPPORTUNITY_ID = #{hiddenModalPK}
			AND CHECKLIST_ID=#{CHECKLIST_ID};
	</update>
	
	<update id="updateSalesCheckListOwner" parameterType="hashmap">
			UPDATE OPPORTUNITY_CHECKLIST_OWNER
					SET 
						STATUS=#{HIDDEN_STATUS}, 
						MEMO = #{MEMO},
						SYS_UPDATE_DATE=CURRENT_TIMESTAMP
			WHERE 1=1
			AND OPPORTUNITY_ID = #{hiddenModalPK}
			AND CHECKLIST_ID=#{CHECKLIST_ID};
	</update>
	
	<update id="updateSalesCycleActionPlan" parameterType="hashmap">
		UPDATE OPPORTUNITY_ACTION_PLAN OAP INNER JOIN OPPORTUNITY_CHECKLIST OC ON OAP.CHECKLIST_ID = OC.CHECKLIST_ID AND OAP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID
		SET 
			<!-- OC.CHECKLIST_NAME = #{CHECKLIST_NAME}, --> 
			<!-- OAP.CHECKLIST_ID = #{CHECKLIST_ID}, -->  
			<!-- OAP.STATUS = #{HIDDEN_STATUS}, -->
			OAP.ACTION_PLAN_NAME  = #{ACTION_PLAN_NAME},
			OAP.ITEMS_TO_BE_FIXED  = #{ITEMS_TO_BE_FIXED},
			OAP.ACTION_OWNER= #{ACTION_OWNER},
			OAP.SOLVE_OWNER_ID = #{SOLVE_OWNER_ID},
			<choose>
				<when test="DUE_DATE != null and DUE_DATE != '' ">
					OAP.DUE_DATE= #{DUE_DATE},
				</when>
				<otherwise>
					OAP.DUE_DATE = NULL,
				</otherwise>
			</choose> 
			 
			 <choose>
				<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
					OAP.CLOSE_DATE= #{CLOSE_DATE},
				</when>
				<otherwise>
					OAP.CLOSE_DATE = NULL,
				</otherwise>
			</choose>
			OAP.SYS_UPDATE_DATE = CURRENT_TIMESTAMP, 
			OC.SYS_UPDATE_DATE = CURRENT_TIMESTAMP
		WHERE 1=1
		AND OC.OPPORTUNITY_ID = #{hiddenModalPK}
		AND OAP.ACTION_ID = #{ACTION_ID}
	</update>
	
	<update id="updateSalesCycleWinPlan" parameterType="hashmap">
		UPDATE 
			OPPORTUNITY_WIN_PLAN OWP INNER JOIN OPPORTUNITY_CHECKLIST_OWNER OC ON OWP.CHECKLIST_ID = OC.CHECKLIST_ID AND OWP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID
		SET 
			<!-- OC.CHECKLIST_NAME = #{CHECKLIST_NAME}, --> 
			<!-- OWP.CHECKLIST_ID = #{CHECKLIST_ID}, --> 
			<!-- OWP.STATUS = #{HIDDEN_STATUS}, -->
			OWP.ITEM_2BE_FIXED = #{ITEM_2BE_FIXED},
			OWP.ACTION_PLAN_NAME  = #{ACTION_PLAN_NAME},
			OWP.ACTION_OWNER= #{ACTION_OWNER},
			OWP.SOLVE_OWNER_ID = #{SOLVE_OWNER_ID},
			<choose>
				<when test="DUE_DATE != null and DUE_DATE != '' ">
					OWP.DUE_DATE= #{DUE_DATE},
				</when>
				<otherwise>
					OWP.DUE_DATE = NULL,
				</otherwise>
			</choose> 
			 
			 <choose>
				<when test="CLOSE_DATE != null and CLOSE_DATE != '' ">
					OWP.CLOSE_DATE= #{CLOSE_DATE},
				</when>
				<otherwise>
					OWP.CLOSE_DATE = NULL,
				</otherwise>
			</choose> 
		OWP.SYS_UPDATE_DATE = CURRENT_TIMESTAMP,
		OC.SYS_UPDATE_DATE = CURRENT_TIMESTAMP
		WHERE 1=1
		AND OC.OPPORTUNITY_ID = #{hiddenModalPK}
		AND OWP.WINPLAN_ID = #{WINPLAN_ID}
	</update>
	
	<update id="completeSaleCycle" parameterType="hashmap">
		UPDATE OPPORTUNITY_LOG
		 SET SALES_CYCLE = #{SALES_CYCLE_NO}
		WHERE OPPORTUNITY_ID = #{hiddenModalPK}
	</update>
	
	<update id="updateSalesCycleStep" parameterType="hashmap">
		UPDATE OPPORTUNITY_LOG
		 SET SALES_CYCLE = #{selectModalSalesCycleStep}
		WHERE OPPORTUNITY_ID = #{hiddenModalPK}
	</update>
	
	<update id="updateSaleCycleClose" parameterType="hashmap">
		UPDATE OPPORTUNITY_LOG
		 SET 
		 	CLOSE_CATEGORY = #{CLOSE_CATEGORY},
		 	CLOSE_DETAIL = #{CLOSE_DETAIL}
		WHERE OPPORTUNITY_ID = #{hiddenModalPK}
	</update>
	
	<delete id="deleteSalesCycleActionPlan" parameterType="hashmap">
		DELETE FROM OPPORTUNITY_ACTION_PLAN
		WHERE 1=1
		AND OPPORTUNITY_ID = #{hiddenModalPK}
		AND ACTION_ID = #{actionId}
	</delete>
	
	<delete id="deleteSalesCycleWinPlan" parameterType="hashmap">
		DELETE FROM OPPORTUNITY_WIN_PLAN
		WHERE 1=1
		AND OPPORTUNITY_ID = #{hiddenModalPK}
		AND WINPLAN_ID = #{winplan_id}
	</delete>
	
	<select id="selectTempCountOpp" parameterType="hashmap" resultType="Integer">
		SELECT OPPORTUNITY_ID
		FROM OPPORTUNITY_LOG 
		WHERE 1=1
		AND TEMP_FLAG = 'Y'
		AND CREATOR_ID = #{member_id_num}  
	</select>
	
	<select id="gridSalesCycleWinPlan" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				TMP.*,
				@ROWNUM := @ROWNUM + 1 AS ROWNUM,
				CASE 
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 1 THEN TMP.CHECKLIST_SEQ_1
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 2 THEN TMP.CHECKLIST_SEQ_2
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 3 THEN TMP.CHECKLIST_SEQ_3
					  WHEN TMP.RANK = 1 AND TMP.CHECKLIST_SEQ = 4 THEN TMP.CHECKLIST_SEQ_4
					  ELSE 0
				END AS attr
			FROM
			(
				SELECT 
					OWP.WINPLAN_ID, 
					OWP.OPPORTUNITY_ID, 
					OWP.CREATOR_ID, 
					OWP.CREATE_DATETIME, 
					OWP.ITEM_2BE_FIXED, 
					OWP.ACTION_PLAN_NAME, 
					OWP.ACTION_OWNER,
					OMI.HAN_NAME AS ACTION_OWNER_NAME, 
					OMI.POSITION_STATUS AS ACTION_OWNER_POSITION, 
					OWP.SOLVE_OWNER_ID,
					OWP.DUE_DATE, 
					OWP.CLOSE_DATE, 
					OWP.SYS_REGISTER_DATE, 
					OWP.SYS_UPDATE_DATE,
					OC.STATUS AS STATUS,
					OC.STATUS AS HIDDEN_STATUS, 
					OC.CHECKLIST_ID,
					OC.CHECKLIST_NAME,
					OC.CHECKLIST_SEQ,
					OC.MEMO,
					SUM_TMP.CHECKLIST_SEQ_1,
					SUM_TMP.CHECKLIST_SEQ_2,
					SUM_TMP.CHECKLIST_SEQ_3,
					SUM_TMP.CHECKLIST_SEQ_4,
					 IF(@PREV <> OC.CHECKLIST_SEQ , @CNT := 1, @CNT := @CNT + 1) AS RANK,
					 @PREV := OC.CHECKLIST_SEQ
				FROM 
				OPPORTUNITY_CHECKLIST_OWNER AS OC 
				LEFT OUTER JOIN	
				OPPORTUNITY_WIN_PLAN AS OWP ON OC.OPPORTUNITY_ID = OWP.OPPORTUNITY_ID AND OC.CHECKLIST_ID = OWP.CHECKLIST_ID
				LEFT OUTER JOIN
				OUR_MEMBERS_INFO AS OMI ON OWP.ACTION_OWNER = OMI.MEMBER_ID_NUM
				INNER JOIN
				(
					SELECT OC.OPPORTUNITY_ID, OC.CHECKLIST_SEQ,
					 SUM(IF(OC.CHECKLIST_SEQ= 1,1,0)) AS CHECKLIST_SEQ_1,
					 SUM(IF(OC.CHECKLIST_SEQ= 2,1,0)) AS CHECKLIST_SEQ_2,
					 SUM(IF(OC.CHECKLIST_SEQ= 3,1,0)) AS CHECKLIST_SEQ_3,
					 SUM(IF(OC.CHECKLIST_SEQ= 4,1,0)) AS CHECKLIST_SEQ_4
					FROM 
					OPPORTUNITY_CHECKLIST_OWNER AS OC 
					LEFT OUTER JOIN	
					OPPORTUNITY_WIN_PLAN AS OWP ON OWP.CHECKLIST_ID = OC.CHECKLIST_ID AND OWP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID
					GROUP BY OC.OPPORTUNITY_ID, OC.CHECKLIST_SEQ
				) AS SUM_TMP ON SUM_TMP.OPPORTUNITY_ID = OC.OPPORTUNITY_ID AND OC.CHECKLIST_SEQ = SUM_TMP.CHECKLIST_SEQ
				,(SELECT @PREV := NULL) AS PREV, (SELECT @CNT := 0) AS CNT	
				WHERE 1=1
				AND OC.OPPORTUNITY_ID = #{pkNo}
			) AS TMP
			WHERE 1=1
			AND TMP.WINPLAN_ID IS NOT NULL
			ORDER BY TMP.CHECKLIST_SEQ, TMP.RANK
		]]>
	</select>
	
	
	
	<!-- 영업기회 대시보드 _본부 -->
	<select id="selectOpportunityDashBoardDivision" parameterType="hashmap" resultType="hashmap">
			SELECT 
				OMI.MEMBER_DIVISION,
				ODI.DIVISION_NAME,
				
				SUM(IFNULL(ESP.TARGET_REV,0)) AS TARGET_REV,
				SUM(IFNULL(ESP.TARGET_GP,0)) AS TARGET_GP,
				
				SUM(IFNULL(OA_CLOSE.REV_FC_IN,0)) AS REV_CLOSE_FC_IN,
				SUM(IFNULL(OA_CLOSE.REV_FC_OUT,0)) AS REV_CLOSE_FC_OUT,
				SUM(IFNULL(OA_CLOSE.GP_FC_IN,0)) AS GP_CLOSE_FC_IN,
				SUM(IFNULL(OA_CLOSE.GP_FC_OUT,0)) AS GP_CLOSE_FC_OUT,
				
				SUM(IFNULL(OA_ING.REV_FC_IN,0)) AS REV_ING_FC_IN,
				SUM(IFNULL(OA_ING.REV_FC_OUT,0)) AS REV_ING_FC_OUT,
				SUM(IFNULL(OA_ING.GP_FC_IN,0)) AS GP_ING_FC_IN,
				SUM(IFNULL(OA_ING.GP_FC_OUT,0)) AS GP_ING_FC_OUT,
				
				SUM(IFNULL(OAS_CLOSE.REV_FC_IN,0)) AS REV_CLOSE_SPLIT_FC_IN,
				SUM(IFNULL(OAS_CLOSE.REV_FC_OUT,0)) AS REV_CLOSE_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_CLOSE.GP_FC_IN,0)) AS GP_CLOSE_SPLIT_FC_IN,
				SUM(IFNULL(OAS_CLOSE.GP_FC_OUT,0)) AS GP_CLOSE_SPLIT_FC_OUT,
				
				SUM(IFNULL(OAS_ING.REV_FC_IN,0)) AS REV_ING_SPLIT_FC_IN,
				SUM(IFNULL(OAS_ING.REV_FC_OUT,0)) AS REV_ING_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_ING.GP_FC_IN,0)) AS GP_ING_SPLIT_FC_IN,
				SUM(IFNULL(OAS_ING.GP_FC_OUT,0)) AS GP_ING_SPLIT_FC_OUT,
				
				SUM(IFNULL(OA_THIS.REV_FC_IN,0)) AS REV_THIS_FC_IN,
				SUM(IFNULL(OA_THIS.REV_FC_OUT,0)) AS REV_THIS_FC_OUT,
				SUM(IFNULL(OA_THIS.GP_FC_IN,0)) AS GP_THIS_FC_IN,
				SUM(IFNULL(OA_THIS.GP_FC_OUT,0)) AS GP_THIS_FC_OUT,
				
				SUM(IFNULL(OAS_THIS.REV_FC_IN,0)) AS REV_THIS_SPLIT_FC_IN,
				SUM(IFNULL(OAS_THIS.REV_FC_OUT,0)) AS REV_THIS_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_THIS.GP_FC_IN,0)) AS GP_THIS_SPLIT_FC_IN,
				SUM(IFNULL(OAS_THIS.GP_FC_OUT,0)) AS GP_THIS_SPLIT_FC_OUT,
				
				SUM(IFNULL(OA_LAST.REV_FC_IN,0)) AS REV_LAST_FC_IN,
				SUM(IFNULL(OA_LAST.REV_FC_OUT,0)) AS REV_LAST_FC_OUT,
				SUM(IFNULL(OA_LAST.GP_FC_IN,0)) AS GP_LAST_FC_IN,
				SUM(IFNULL(OA_LAST.GP_FC_OUT,0)) AS GP_LAST_FC_OUT,
				
				SUM(IFNULL(OAS_LAST.REV_FC_IN,0)) AS REV_LAST_SPLIT_FC_IN,
				SUM(IFNULL(OAS_LAST.REV_FC_OUT,0)) AS REV_LAST_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_LAST.GP_FC_IN,0)) AS GP_LAST_SPLIT_FC_IN,
				SUM(IFNULL(OAS_LAST.GP_FC_OUT,0)) AS GP_LAST_SPLIT_FC_OUT
		FROM 
			(
				SELECT IOMI.MEMBER_DIVISION,IOMI.MEMBER_TEAM,IOMI.MEMBER_ID_NUM,IOMI.HAN_NAME
				FROM OUR_MEMBERS_INFO AS IOMI
				WHERE 1=1 
				AND ( IOMI.STOP_DATE IS NULL OR IOMI.STOP_DATE >= #{startDate} ) 
				UNION
				SELECT IOMI.MEMBER_DIVISION,IOMI.MEMBER_TEAM,IOMI.MEMBER_ID_NUM,IOMI.HAN_NAME
				FROM 
				OUR_MEMBERS_INFO AS IOMI
				INNER JOIN
				OPPORTUNITY_AMOUNT AS IOA ON IOMI.MEMBER_ID_NUM = IOA.MEMBER_ID_NUM 
				AND IOMI.STOP_DATE IS NOT NULL 
				AND IOA.BASIS_MONTH BETWEEN #{startDate} AND #{endDate}   
				GROUP BY MEMBER_DIVISION,MEMBER_TEAM,MEMBER_ID_NUM,HAN_NAME  
			) AS OMI  
			INNER JOIN
			OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION AND ODI.DIVISION_TYPE = 'S' -- AND OMI.POSITION_TYPE = '영업직' 
			LEFT OUTER JOIN  
			(
				SELECT 
					MEMBER_ID_NUM,
					SUM(TARGET_REVENUE_AMOUNT) AS TARGET_REV,
					SUM(TARGET_GP_AMOUNT) AS TARGET_GP
				FROM ERP_SALES_PLAN
				WHERE 1=1
				AND BASIS_MONTH BETWEEN #{startDate} AND  #{endDate}
				GROUP BY MEMBER_ID_NUM
			) AS ESP ON ESP.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM -- Target
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OL.SALES_CYCLE = '5' 
				AND CLOSE_CATEGORY = '1'
				AND YEAR(OA.BASIS_MONTH) = YEAR(#{startDate})
				<![CDATA[
				AND OA.BASIS_MONTH <= #{endDate}
				]]>
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_CLOSE ON OMI.MEMBER_ID_NUM = OA_CLOSE.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
						ELSE 0
					END) AS REV_FC_OUT,				
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In' 
						THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)  
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out'  
						THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND BASIS_MONTH BETWEEN #{startDate} AND  #{endDate}
				AND OL.SALES_CYCLE != '5' 
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_ING ON OMI.MEMBER_ID_NUM = OA_ING.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OL.SALES_CYCLE = '5' 
				AND OL.CLOSE_CATEGORY = '1'
				AND YEAR(OAS.SPLIT_DATE) = YEAR(#{startDate})
				<![CDATA[
				AND OAS.SPLIT_DATE <= #{endDate}
				]]>
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_CLOSE ON OMI.MEMBER_ID_NUM = OAS_CLOSE.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OAS.SPLIT_DATE BETWEEN #{startDate} AND #{endDate}
				AND OL.SALES_CYCLE != '5'
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_ING ON OMI.MEMBER_ID_NUM = OAS_ING.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OA.BASIS_MONTH BETWEEN #{startDate} AND #{endDate}
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_THIS ON OMI.MEMBER_ID_NUM = OA_THIS.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OAS.SPLIT_DATE BETWEEN #{startDate} AND #{endDate}
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_THIS ON OMI.MEMBER_ID_NUM = OAS_THIS.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				<choose>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('y') ">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 YEAR and #{endDate} - INTERVAL 1 YEAR
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('q')">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('m') ">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 MONTH and #{endDate} - INTERVAL 1 MONTH
					</when>
					<otherwise>
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</otherwise>
				</choose>
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_LAST ON OMI.MEMBER_ID_NUM = OA_LAST.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				<choose>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('y') ">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 YEAR and #{endDate} - INTERVAL 1 YEAR
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('q')">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('m') ">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 MONTH and #{endDate} - INTERVAL 1 MONTH
					</when>
					<otherwise>
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</otherwise>
				</choose>
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_LAST ON OMI.MEMBER_ID_NUM = OAS_LAST.MEMBER_ID_NUM
			GROUP BY OMI.MEMBER_DIVISION, ODI.DIVISION_NAME
			HAVING 1=1
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
			</choose>
	</select>
	
	<!-- 영업기회 대시보드 _팀 -->
	<select id="selectOpportunityDashBoardTeam" parameterType="hashmap" resultType="hashmap">
		SELECT 
			OMI.MEMBER_DIVISION,
			ODI.DIVISION_NAME,
			OMI.MEMBER_TEAM,
			OTI.TEAM_NAME,
			
			SUM(IFNULL(ESP.TARGET_REV,0)) AS TARGET_REV,
			SUM(IFNULL(ESP.TARGET_GP,0)) AS TARGET_GP,
			
			SUM(IFNULL(OA_CLOSE.REV_FC_IN,0)) AS REV_CLOSE_FC_IN,
			SUM(IFNULL(OA_CLOSE.REV_FC_OUT,0)) AS REV_CLOSE_FC_OUT,
			SUM(IFNULL(OA_CLOSE.GP_FC_IN,0)) AS GP_CLOSE_FC_IN,
			SUM(IFNULL(OA_CLOSE.GP_FC_OUT,0)) AS GP_CLOSE_FC_OUT,
			
			SUM(IFNULL(OA_ING.REV_FC_IN,0)) AS REV_ING_FC_IN,
			SUM(IFNULL(OA_ING.REV_FC_OUT,0)) AS REV_ING_FC_OUT,
			SUM(IFNULL(OA_ING.GP_FC_IN,0)) AS GP_ING_FC_IN,
			SUM(IFNULL(OA_ING.GP_FC_OUT,0)) AS GP_ING_FC_OUT,
			
			SUM(IFNULL(OAS_CLOSE.REV_FC_IN,0)) AS REV_CLOSE_SPLIT_FC_IN,
			SUM(IFNULL(OAS_CLOSE.REV_FC_OUT,0)) AS REV_CLOSE_SPLIT_FC_OUT,
			SUM(IFNULL(OAS_CLOSE.GP_FC_IN,0)) AS GP_CLOSE_SPLIT_FC_IN,
			SUM(IFNULL(OAS_CLOSE.GP_FC_OUT,0)) AS GP_CLOSE_SPLIT_FC_OUT,
			
			SUM(IFNULL(OAS_ING.REV_FC_IN,0)) AS REV_ING_SPLIT_FC_IN,
			SUM(IFNULL(OAS_ING.REV_FC_OUT,0)) AS REV_ING_SPLIT_FC_OUT,
			SUM(IFNULL(OAS_ING.GP_FC_IN,0)) AS GP_ING_SPLIT_FC_IN,
			SUM(IFNULL(OAS_ING.GP_FC_OUT,0)) AS GP_ING_SPLIT_FC_OUT,
			
			SUM(IFNULL(OA_THIS.REV_FC_IN,0)) AS REV_THIS_FC_IN,
			SUM(IFNULL(OA_THIS.REV_FC_OUT,0)) AS REV_THIS_FC_OUT,
			SUM(IFNULL(OA_THIS.GP_FC_IN,0)) AS GP_THIS_FC_IN,
			SUM(IFNULL(OA_THIS.GP_FC_OUT,0)) AS GP_THIS_FC_OUT,
			
			SUM(IFNULL(OAS_THIS.REV_FC_IN,0)) AS REV_THIS_SPLIT_FC_IN,
			SUM(IFNULL(OAS_THIS.REV_FC_OUT,0)) AS REV_THIS_SPLIT_FC_OUT,
			SUM(IFNULL(OAS_THIS.GP_FC_IN,0)) AS GP_THIS_SPLIT_FC_IN,
			SUM(IFNULL(OAS_THIS.GP_FC_OUT,0)) AS GP_THIS_SPLIT_FC_OUT,
			
			SUM(IFNULL(OA_LAST.REV_FC_IN,0)) AS REV_LAST_FC_IN,
			SUM(IFNULL(OA_LAST.REV_FC_OUT,0)) AS REV_LAST_FC_OUT,
			SUM(IFNULL(OA_LAST.GP_FC_IN,0)) AS GP_LAST_FC_IN,
			SUM(IFNULL(OA_LAST.GP_FC_OUT,0)) AS GP_LAST_FC_OUT,
			
			SUM(IFNULL(OAS_LAST.REV_FC_IN,0)) AS REV_LAST_SPLIT_FC_IN,
			SUM(IFNULL(OAS_LAST.REV_FC_OUT,0)) AS REV_LAST_SPLIT_FC_OUT,
			SUM(IFNULL(OAS_LAST.GP_FC_IN,0)) AS GP_LAST_SPLIT_FC_IN,
			SUM(IFNULL(OAS_LAST.GP_FC_OUT,0)) AS GP_LAST_SPLIT_FC_OUT
		FROM 
			(
				SELECT IOMI.MEMBER_DIVISION,IOMI.MEMBER_TEAM,IOMI.MEMBER_ID_NUM,IOMI.HAN_NAME
				FROM OUR_MEMBERS_INFO AS IOMI
				WHERE 1=1 
				AND ( IOMI.STOP_DATE IS NULL OR IOMI.STOP_DATE >= #{startDate} ) 
				UNION
				SELECT IOMI.MEMBER_DIVISION,IOMI.MEMBER_TEAM,IOMI.MEMBER_ID_NUM,IOMI.HAN_NAME
				FROM 
				OUR_MEMBERS_INFO AS IOMI
				INNER JOIN
				OPPORTUNITY_AMOUNT AS IOA ON IOMI.MEMBER_ID_NUM = IOA.MEMBER_ID_NUM 
				AND IOMI.STOP_DATE IS NOT NULL 
				AND IOA.BASIS_MONTH BETWEEN #{startDate} AND #{endDate}   
				GROUP BY MEMBER_DIVISION,MEMBER_TEAM,MEMBER_ID_NUM,HAN_NAME  
			) AS OMI 
			INNER JOIN
			OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION AND ODI.DIVISION_TYPE = 'S' -- AND OMI.POSITION_TYPE = '영업직' 
			INNER JOIN
			OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM AND OTI.TEAM_TYPE = 'S'
			LEFT OUTER JOIN  
			(
				SELECT 
					MEMBER_ID_NUM,
					SUM(TARGET_REVENUE_AMOUNT) AS TARGET_REV,
					SUM(TARGET_GP_AMOUNT) AS TARGET_GP
				FROM ERP_SALES_PLAN
				WHERE 1=1
				AND BASIS_MONTH BETWEEN #{startDate} AND  #{endDate}
				GROUP BY MEMBER_ID_NUM
			) AS ESP ON ESP.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM -- Target
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OL.SALES_CYCLE = '5' 
				AND CLOSE_CATEGORY = '1'
				AND YEAR(OA.BASIS_MONTH) = YEAR(#{startDate})
				<![CDATA[
				AND OA.BASIS_MONTH <= #{endDate}
				]]>
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_CLOSE ON OMI.MEMBER_ID_NUM = OA_CLOSE.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
						ELSE 0
					END) AS REV_FC_OUT,				
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In' 
						THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)  
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out'  
						THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND BASIS_MONTH BETWEEN #{startDate} AND  #{endDate}
				AND OL.SALES_CYCLE != '5' 
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_ING ON OMI.MEMBER_ID_NUM = OA_ING.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OL.SALES_CYCLE = '5' 
				AND OL.CLOSE_CATEGORY = '1'
				AND YEAR(OAS.SPLIT_DATE) = YEAR(#{startDate})
				<![CDATA[
				AND OAS.SPLIT_DATE <= #{endDate}
				]]>
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_CLOSE ON OMI.MEMBER_ID_NUM = OAS_CLOSE.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OAS.SPLIT_DATE BETWEEN #{startDate} AND #{endDate}
				AND OL.SALES_CYCLE != '5'
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_ING ON OMI.MEMBER_ID_NUM = OAS_ING.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OA.BASIS_MONTH BETWEEN #{startDate} AND #{endDate}
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_THIS ON OMI.MEMBER_ID_NUM = OA_THIS.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OAS.SPLIT_DATE BETWEEN #{startDate} AND #{endDate}
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_THIS ON OMI.MEMBER_ID_NUM = OAS_THIS.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				<choose>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('y') ">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 YEAR and #{endDate} - INTERVAL 1 YEAR
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('q')">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('m') ">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 MONTH and #{endDate} - INTERVAL 1 MONTH
					</when>
					<otherwise>
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</otherwise>
				</choose>
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_LAST ON OMI.MEMBER_ID_NUM = OA_LAST.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				<choose>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('y') ">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 YEAR and #{endDate} - INTERVAL 1 YEAR
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('q')">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('m') ">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 MONTH and #{endDate} - INTERVAL 1 MONTH
					</when>
					<otherwise>
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</otherwise>
				</choose>
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_LAST ON OMI.MEMBER_ID_NUM = OAS_LAST.MEMBER_ID_NUM
			GROUP BY OMI.MEMBER_DIVISION, ODI.DIVISION_NAME,OMI.MEMBER_TEAM,OTI.TEAM_NAME
			HAVING 1=1
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
			</choose>
	</select>
	
	<!-- 영업기회 대시보드 _직원 -->
	<select id="selectOpportunityDashBoardMember" parameterType="hashmap" resultType="hashmap">
		 SELECT 
				OMI.MEMBER_DIVISION,
				ODI.DIVISION_NAME,
				OMI.MEMBER_TEAM,
				OTI.TEAM_NAME,
				OMI.MEMBER_ID_NUM,
				OMI.HAN_NAME,
				
				SUM(IFNULL(ESP.TARGET_REV,0)) AS TARGET_REV,
				SUM(IFNULL(ESP.TARGET_GP,0)) AS TARGET_GP,
				
				SUM(IFNULL(OA_CLOSE.REV_FC_IN,0)) AS REV_CLOSE_FC_IN,
				SUM(IFNULL(OA_CLOSE.REV_FC_OUT,0)) AS REV_CLOSE_FC_OUT,
				SUM(IFNULL(OA_CLOSE.GP_FC_IN,0)) AS GP_CLOSE_FC_IN,
				SUM(IFNULL(OA_CLOSE.GP_FC_OUT,0)) AS GP_CLOSE_FC_OUT,
				
				SUM(IFNULL(OA_ING.REV_FC_IN,0)) AS REV_ING_FC_IN,
				SUM(IFNULL(OA_ING.REV_FC_OUT,0)) AS REV_ING_FC_OUT,
				SUM(IFNULL(OA_ING.GP_FC_IN,0)) AS GP_ING_FC_IN,
				SUM(IFNULL(OA_ING.GP_FC_OUT,0)) AS GP_ING_FC_OUT,
				
				SUM(IFNULL(OAS_CLOSE.REV_FC_IN,0)) AS REV_CLOSE_SPLIT_FC_IN,
				SUM(IFNULL(OAS_CLOSE.REV_FC_OUT,0)) AS REV_CLOSE_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_CLOSE.GP_FC_IN,0)) AS GP_CLOSE_SPLIT_FC_IN,
				SUM(IFNULL(OAS_CLOSE.GP_FC_OUT,0)) AS GP_CLOSE_SPLIT_FC_OUT,
				
				SUM(IFNULL(OAS_ING.REV_FC_IN,0)) AS REV_ING_SPLIT_FC_IN,
				SUM(IFNULL(OAS_ING.REV_FC_OUT,0)) AS REV_ING_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_ING.GP_FC_IN,0)) AS GP_ING_SPLIT_FC_IN,
				SUM(IFNULL(OAS_ING.GP_FC_OUT,0)) AS GP_ING_SPLIT_FC_OUT,
				
				SUM(IFNULL(OA_THIS.REV_FC_IN,0)) AS REV_THIS_FC_IN,
				SUM(IFNULL(OA_THIS.REV_FC_OUT,0)) AS REV_THIS_FC_OUT,
				SUM(IFNULL(OA_THIS.GP_FC_IN,0)) AS GP_THIS_FC_IN,
				SUM(IFNULL(OA_THIS.GP_FC_OUT,0)) AS GP_THIS_FC_OUT,
				
				SUM(IFNULL(OAS_THIS.REV_FC_IN,0)) AS REV_THIS_SPLIT_FC_IN,
				SUM(IFNULL(OAS_THIS.REV_FC_OUT,0)) AS REV_THIS_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_THIS.GP_FC_IN,0)) AS GP_THIS_SPLIT_FC_IN,
				SUM(IFNULL(OAS_THIS.GP_FC_OUT,0)) AS GP_THIS_SPLIT_FC_OUT,
				
				SUM(IFNULL(OA_LAST.REV_FC_IN,0)) AS REV_LAST_FC_IN,
				SUM(IFNULL(OA_LAST.REV_FC_OUT,0)) AS REV_LAST_FC_OUT,
				SUM(IFNULL(OA_LAST.GP_FC_IN,0)) AS GP_LAST_FC_IN,
				SUM(IFNULL(OA_LAST.GP_FC_OUT,0)) AS GP_LAST_FC_OUT,
				
				SUM(IFNULL(OAS_LAST.REV_FC_IN,0)) AS REV_LAST_SPLIT_FC_IN,
				SUM(IFNULL(OAS_LAST.REV_FC_OUT,0)) AS REV_LAST_SPLIT_FC_OUT,
				SUM(IFNULL(OAS_LAST.GP_FC_IN,0)) AS GP_LAST_SPLIT_FC_IN,
				SUM(IFNULL(OAS_LAST.GP_FC_OUT,0)) AS GP_LAST_SPLIT_FC_OUT
		FROM 
			(
				SELECT IOMI.MEMBER_DIVISION,IOMI.MEMBER_TEAM,IOMI.MEMBER_ID_NUM,IOMI.HAN_NAME
				FROM OUR_MEMBERS_INFO AS IOMI
				WHERE 1=1 
				AND ( IOMI.STOP_DATE IS NULL OR IOMI.STOP_DATE >= #{startDate} ) 
				UNION
				SELECT IOMI.MEMBER_DIVISION,IOMI.MEMBER_TEAM,IOMI.MEMBER_ID_NUM,IOMI.HAN_NAME
				FROM 
				OUR_MEMBERS_INFO AS IOMI
				INNER JOIN
				OPPORTUNITY_AMOUNT AS IOA ON IOMI.MEMBER_ID_NUM = IOA.MEMBER_ID_NUM 
				AND IOMI.STOP_DATE IS NOT NULL 
				AND IOA.BASIS_MONTH BETWEEN #{startDate} AND #{endDate}   
				GROUP BY MEMBER_DIVISION,MEMBER_TEAM,MEMBER_ID_NUM,HAN_NAME  
			) AS OMI  
			INNER JOIN
			OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION AND ODI.DIVISION_TYPE = 'S' -- AND OMI.POSITION_TYPE = '영업직' 
			INNER JOIN
			OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM AND OTI.TEAM_TYPE = 'S'
			LEFT OUTER JOIN  
			(
				SELECT 
					MEMBER_ID_NUM,
					SUM(TARGET_REVENUE_AMOUNT) AS TARGET_REV,
					SUM(TARGET_GP_AMOUNT) AS TARGET_GP
				FROM ERP_SALES_PLAN
				WHERE 1=1
				AND BASIS_MONTH BETWEEN #{startDate} AND  #{endDate}
				GROUP BY MEMBER_ID_NUM
			) AS ESP ON ESP.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM -- Target
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OL.SALES_CYCLE = '5' 
				AND CLOSE_CATEGORY = '1'
				AND YEAR(OA.BASIS_MONTH) = YEAR(#{startDate})
				<![CDATA[
				AND OA.BASIS_MONTH <= #{endDate}
				]]>
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_CLOSE ON OMI.MEMBER_ID_NUM = OA_CLOSE.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
						ELSE 0
					END) AS REV_FC_OUT,				
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In' 
						THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)  
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out'  
						THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND BASIS_MONTH BETWEEN #{startDate} AND  #{endDate}
				AND OL.SALES_CYCLE != '5' 
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_ING ON OMI.MEMBER_ID_NUM = OA_ING.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OL.SALES_CYCLE = '5' 
				AND OL.CLOSE_CATEGORY = '1'
				AND YEAR(OAS.SPLIT_DATE) = YEAR(#{startDate})
				<![CDATA[
				AND OAS.SPLIT_DATE <= #{endDate}
				]]>
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_CLOSE ON OMI.MEMBER_ID_NUM = OAS_CLOSE.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OAS.SPLIT_DATE BETWEEN #{startDate} AND #{endDate}
				AND OL.SALES_CYCLE != '5'
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_ING ON OMI.MEMBER_ID_NUM = OAS_ING.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OA.BASIS_MONTH BETWEEN #{startDate} AND #{endDate}
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_THIS ON OMI.MEMBER_ID_NUM = OA_THIS.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				AND OAS.SPLIT_DATE BETWEEN #{startDate} AND #{endDate}
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_THIS ON OMI.MEMBER_ID_NUM = OAS_THIS.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OA.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OA.BASIS_PLAN_GP_AMOUNT 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				<choose>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('y') ">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 YEAR and #{endDate} - INTERVAL 1 YEAR
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('q')">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('m') ">
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 MONTH and #{endDate} - INTERVAL 1 MONTH
					</when>
					<otherwise>
						AND OA.BASIS_MONTH BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</otherwise>
				</choose>
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OA.MEMBER_ID_NUM
			) AS OA_LAST ON OMI.MEMBER_ID_NUM = OA_LAST.MEMBER_ID_NUM
			LEFT OUTER JOIN
			(
				SELECT 
					OAS.MEMBER_ID_NUM,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_REV
						ELSE 0
					END) AS REV_FC_OUT,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'In'  
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_IN,
					SUM(CASE 
						WHEN OL.FORECAST_YN = 'Out' 
						THEN OAS.SPLIT_GP 
						ELSE 0
					END) AS GP_FC_OUT
				FROM 
				OPPORTUNITY_LOG AS OL
				INNER JOIN
				OPPORTUNITY_AMOUNT_SPLIT AS OAS ON OL.OPPORTUNITY_ID = OAS.OPPORTUNITY_ID
				WHERE 1=1
				AND OL.TEMP_FLAG = 'N'
				<choose>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('y') ">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 YEAR and #{endDate} - INTERVAL 1 YEAR
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('q')">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</when>
					<when test="dateCategory != null and dateCategory.equalsIgnoreCase('m') ">
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 MONTH and #{endDate} - INTERVAL 1 MONTH
					</when>
					<otherwise>
						AND OAS.SPLIT_DATE BETWEEN #{startDate} - INTERVAL 1 QUARTER and #{endDate} - INTERVAL 1 QUARTER
					</otherwise>
				</choose>
				AND (OL.CLOSE_CATEGORY IS NULL OR OL.CLOSE_CATEGORY = '1')   
				GROUP BY OAS.MEMBER_ID_NUM
			) AS OAS_LAST ON OMI.MEMBER_ID_NUM = OAS_LAST.MEMBER_ID_NUM
			GROUP BY OMI.MEMBER_DIVISION, ODI.DIVISION_NAME,OMI.MEMBER_TEAM,OTI.TEAM_NAME,OMI.MEMBER_ID_NUM,OMI.HAN_NAME
			HAVING 1=1
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
					AND OMI.MEMBER_TEAM = #{searchTeam}
				</when>
				<when test="global_role_code.contains('ROLE_MEMBER')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
					<!-- AND OMI.MEMBER_ID_NUM = #{global_member_id} -->
				</when>
			</choose>
	</select>
	
	<!-- 영업기회 대시보드 고객별 -->
	<select id="selectOpportunityDashBoardCompanyGroup" parameterType="hashmap" resultType="hashmap">
	<![CDATA[
			SELECT 
				CIS.SEGMENT_CODE,
				CIS.SEGMENT_HAN_NAME,
				
				SUM(IFNULL(ESA_TCV_QTD.ACTUAL_TCV,0)) AS  ACTUAL_TCV_AMOUNT_QTD,
				SUM(IFNULL(ESA_QTD.ACTUAL_REV,0)) AS  ACTUAL_REV_AMOUNT_QTD,
				SUM(IFNULL(ESA_QTD.ACTUAL_GP,0)) AS ACTUAL_GP_AMOUNT_QTD,
				
				SUM(IFNULL(ESA_TCV.ACTUAL_TCV,0)) AS  ACTUAL_TCV_AMOUNT,
				SUM(IFNULL(ESA.ACTUAL_REV,0)) AS  ACTUAL_REV_AMOUNT,
				SUM(IFNULL(ESA.ACTUAL_GP,0)) AS ACTUAL_GP_AMOUNT,
				
				SUM(IFNULL(OL_TCV.IN_BASIS_PLAN_TCV_AMOUNT,0)) AS TCV_FC_IN,
				SUM(IFNULL(OL_TCV.OUT_BASIS_PLAN_TCV_AMOUNT,0)) AS TCV_FC_OUT,
				SUM(IFNULL(OL.IN_BASIS_PLAN_REVENUE_AMOUNT,0)) AS REV_FC_IN,
				SUM(IFNULL(OL.OUT_BASIS_PLAN_REVENUE_AMOUNT,0)) AS REV_FC_OUT,
				SUM(IFNULL(OL.IN_BASIS_PLAN_GP_AMOUNT,0)) AS GP_FC_IN,
				SUM(IFNULL(OL.OUT_BASIS_PLAN_GP_AMOUNT,0)) AS GP_FC_OUT,
				
				SUM(IFNULL(OL_LAST_TCV.IN_BASIS_PLAN_TCV_AMOUNT,0)) AS LAST_TCV_FC_IN,
				SUM(IFNULL(OL_LAST_TCV.OUT_BASIS_PLAN_TCV_AMOUNT,0)) AS LAST_TCV_FC_OUT,
				SUM(IFNULL(OL_LAST.IN_BASIS_PLAN_REVENUE_AMOUNT,0)) AS LAST_REV_FC_IN,
				SUM(IFNULL(OL_LAST.OUT_BASIS_PLAN_REVENUE_AMOUNT,0)) AS LAST_REV_FC_OUT,
				SUM(IFNULL(OL_LAST.IN_BASIS_PLAN_GP_AMOUNT,0)) AS LAST_GP_FC_IN,
				SUM(IFNULL(OL_LAST.OUT_BASIS_PLAN_GP_AMOUNT,0)) AS LAST_GP_FC_OUT 
		FROM 
				CLIENT_COMPANY_INFO AS CCI
				INNER JOIN
				CODE_INDUSTRY_SEGMENT AS CIS ON CCI.SEGMENT_CODE = CIS.SEGMENT_CODE
				-- 현재 분기 FC IN TCV, FC OUT TCV
				INNER JOIN
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OL.CONTRACT_AMOUNT 
						ELSE 0
						END) AS IN_BASIS_PLAN_TCV_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OL.CONTRACT_AMOUNT 
							ELSE 0
						END) AS OUT_BASIS_PLAN_TCV_AMOUNT
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					OUR_MEMBERS_INFO AS OMI ON OL.OWNER_ID = OMI.MEMBER_ID_NUM
					INNER JOIN 
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					WHERE 1=1
					AND YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
					AND QUARTER(OL.CONTRACT_DATE) = QUARTER(#{searchDate}) -- 변경
		]]>
					<choose>
						<when test="global_role_code.contains('ROLE_CEO')">
						</when>
						<when test="global_role_code.contains('ROLE_CFO')">
						</when>
						<when test="global_role_code.contains('ROLE_DIVISION')">
							AND OMI.MEMBER_DIVISION = #{global_member_division}
						</when>
						<when test="global_role_code.contains('ROLE_TEAM')">
							AND OMI.MEMBER_DIVISION = #{global_member_division}
							AND OMI.MEMBER_TEAM = #{global_member_team}
						</when>
						<when test="global_role_code.contains('ROLE_MEMBER')">
							AND OMI.MEMBER_DIVISION = #{global_member_division}
							AND OMI.MEMBER_TEAM = #{global_member_team}
							<!-- AND OMI.MEMBER_ID_NUM = #{global_member_id} -->
						</when>
					</choose>
					GROUP BY CCI.COMPANY_ID
				) AS OL_TCV ON OL_TCV.COMPANY_ID = CCI.COMPANY_ID
		<![CDATA[
				-- 현재 분기 FC IN REV GP, FC OUT REV GP
				LEFT OUTER JOIN
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
						END) AS IN_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
							ELSE 0
						END) AS OUT_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS IN_BASIS_PLAN_GP_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS OUT_BASIS_PLAN_GP_AMOUNT
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN 
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
					AND QUARTER(OA.BASIS_MONTH) = QUARTER(#{searchDate}) -- 변경
					GROUP BY CCI.COMPANY_ID
				) AS OL ON OL.COMPANY_ID = CCI.COMPANY_ID 
				LEFT OUTER JOIN -- QTD
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(OL.CONTRACT_AMOUNT) AS ACTUAL_TCV
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					WHERE 1=1
					AND YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
					AND QUARTER(OL.CONTRACT_DATE) <= QUARTER(#{searchDate}) -- 변경
					GROUP BY CCI.COMPANY_ID
				) AS ESA_TCV_QTD ON ESA_TCV_QTD.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN -- QTD
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(OA.BASIS_PLAN_REVENUE_AMOUNT) AS ACTUAL_REV,
						SUM(OA.BASIS_PLAN_GP_AMOUNT) AS ACTUAL_GP
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
					AND QUARTER(OA.BASIS_MONTH) <= QUARTER(#{searchDate}) -- 변경
					GROUP BY CCI.COMPANY_ID
				) AS ESA_QTD ON ESA_QTD.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN -- 현재 분기 실적 TCV
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(OL.CONTRACT_AMOUNT) AS ACTUAL_TCV
					FROM 
					OPPORTUNITY_LOG AS OL
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					WHERE 1=1
					AND YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
					AND QUARTER(OL.CONTRACT_DATE) = QUARTER(#{searchDate}) -- 변경
					GROUP BY CCI.COMPANY_ID
				) AS ESA_TCV ON ESA_TCV.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN -- 현재 분기 실적 REV, GP
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(OA.BASIS_PLAN_REVENUE_AMOUNT) AS ACTUAL_REV,
						SUM(OA.BASIS_PLAN_GP_AMOUNT) AS ACTUAL_GP
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
					AND QUARTER(OA.BASIS_MONTH) = QUARTER(#{searchDate}) -- 변경
					GROUP BY CCI.COMPANY_ID
				) AS ESA ON ESA.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN -- 지난분기 영업기회 TCV
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OL.CONTRACT_AMOUNT 
						ELSE 0
						END) AS IN_BASIS_PLAN_TCV_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OL.CONTRACT_AMOUNT 
							ELSE 0
						END) AS OUT_BASIS_PLAN_TCV_AMOUNT
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					WHERE 1=1
					AND CASE 
								WHEN QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER)) = 4 
								THEN YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})-1
								ELSE YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
							END 
					AND QUARTER(OL.CONTRACT_DATE) = QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER))
					GROUP BY CCI.COMPANY_ID
				) AS OL_LAST_TCV ON OL_LAST_TCV.COMPANY_ID = CCI.COMPANY_ID
				LEFT OUTER JOIN -- 지난분기 영업기회 REV, GP
				(
					SELECT 
						CCI.COMPANY_ID,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
						END) AS IN_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
							ELSE 0
						END) AS OUT_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS IN_BASIS_PLAN_GP_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS OUT_BASIS_PLAN_GP_AMOUNT
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND CASE 
								WHEN QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER)) = 4 
								THEN YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})-1
								ELSE YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
							END 
					AND QUARTER(OA.BASIS_MONTH) = QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER))
					GROUP BY CCI.COMPANY_ID
				) AS OL_LAST ON OL_LAST.COMPANY_ID = CCI.COMPANY_ID
		GROUP BY CIS.SEGMENT_CODE,CIS.SEGMENT_HAN_NAME
		HAVING 1=1
		]]>
	</select>
	
	
	<select id="selectOpportunityDashBoardComapny" parameterType="hashmap" resultType="hashmap">
			<![CDATA[
				SELECT 
					CCI.COMPANY_ID,
					CCI.COMPANY_NAME,
					CIS.SEGMENT_CODE,
					
					SUM(IFNULL(ESA_TCV_QTD.ACTUAL_TCV,0)) AS  ACTUAL_TCV_AMOUNT_QTD,
					SUM(IFNULL(ESA_QTD.ACTUAL_REV,0)) AS  ACTUAL_REV_AMOUNT_QTD,
					SUM(IFNULL(ESA_QTD.ACTUAL_GP,0)) AS ACTUAL_GP_AMOUNT_QTD,
					
					SUM(IFNULL(ESA_TCV.ACTUAL_TCV,0)) AS  ACTUAL_TCV_AMOUNT,
					SUM(IFNULL(ESA.ACTUAL_REV,0)) AS  ACTUAL_REV_AMOUNT,
					SUM(IFNULL(ESA.ACTUAL_GP,0)) AS ACTUAL_GP_AMOUNT,
					
					SUM(IFNULL(OL_TCV.IN_BASIS_PLAN_TCV_AMOUNT,0)) AS TCV_FC_IN,
					SUM(IFNULL(OL_TCV.OUT_BASIS_PLAN_TCV_AMOUNT,0)) AS TCV_FC_OUT,
					SUM(IFNULL(OL.IN_BASIS_PLAN_REVENUE_AMOUNT,0)) AS REV_FC_IN,
					SUM(IFNULL(OL.OUT_BASIS_PLAN_REVENUE_AMOUNT,0)) AS REV_FC_OUT,
					SUM(IFNULL(OL.IN_BASIS_PLAN_GP_AMOUNT,0)) AS GP_FC_IN,
					SUM(IFNULL(OL.OUT_BASIS_PLAN_GP_AMOUNT,0)) AS GP_FC_OUT,
					
					SUM(IFNULL(OL_LAST_TCV.IN_BASIS_PLAN_TCV_AMOUNT,0)) AS LAST_TCV_FC_IN,
					SUM(IFNULL(OL_LAST_TCV.OUT_BASIS_PLAN_TCV_AMOUNT,0)) AS LAST_TCV_FC_OUT,
					SUM(IFNULL(OL_LAST.IN_BASIS_PLAN_REVENUE_AMOUNT,0)) AS LAST_REV_FC_IN,
					SUM(IFNULL(OL_LAST.OUT_BASIS_PLAN_REVENUE_AMOUNT,0)) AS LAST_REV_FC_OUT,
					SUM(IFNULL(OL_LAST.IN_BASIS_PLAN_GP_AMOUNT,0)) AS LAST_GP_FC_IN,
					SUM(IFNULL(OL_LAST.OUT_BASIS_PLAN_GP_AMOUNT,0)) AS LAST_GP_FC_OUT 
			FROM 
					CLIENT_COMPANY_INFO AS CCI
					INNER JOIN
					CODE_INDUSTRY_SEGMENT AS CIS ON CCI.SEGMENT_CODE = CIS.SEGMENT_CODE
					-- 현재 분기 FC IN TCV, FC OUT TCV
					INNER JOIN
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'In' 
								THEN OL.CONTRACT_AMOUNT 
							ELSE 0
							END) AS IN_BASIS_PLAN_TCV_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'Out' 
								THEN OL.CONTRACT_AMOUNT 
								ELSE 0
							END) AS OUT_BASIS_PLAN_TCV_AMOUNT
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN
						OUR_MEMBERS_INFO AS OMI ON OL.OWNER_ID = OMI.MEMBER_ID_NUM
						INNER JOIN 
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						WHERE 1=1
						AND YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
						AND QUARTER(OL.CONTRACT_DATE) = QUARTER(#{searchDate}) -- 변경
			]]>
						<choose>
							<when test="global_role_code.contains('ROLE_CEO')">
							</when>
							<when test="global_role_code.contains('ROLE_CFO')">
							</when>
							<when test="global_role_code.contains('ROLE_DIVISION')">
								AND OMI.MEMBER_DIVISION = #{global_member_division}
							</when>
							<when test="global_role_code.contains('ROLE_TEAM')">
								AND OMI.MEMBER_DIVISION = #{global_member_division}
								AND OMI.MEMBER_TEAM = #{global_member_team}
							</when>
							<when test="global_role_code.contains('ROLE_MEMBER')">
								AND OMI.MEMBER_DIVISION = #{global_member_division}
								AND OMI.MEMBER_TEAM = #{global_member_team}
								<!-- AND OMI.MEMBER_ID_NUM = #{global_member_id} -->
							</when>
						</choose>
						GROUP BY CCI.COMPANY_ID
					) AS OL_TCV ON OL_TCV.COMPANY_ID = CCI.COMPANY_ID
			<![CDATA[
					-- 현재 분기 FC IN REV GP, FC OUT REV GP
					LEFT OUTER JOIN
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'In' 
								THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
							ELSE 0
							END) AS IN_BASIS_PLAN_REVENUE_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'Out' 
								THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
								ELSE 0
							END) AS OUT_BASIS_PLAN_REVENUE_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'In' 
								THEN OA.BASIS_PLAN_GP_AMOUNT
								ELSE 0
							END) AS IN_BASIS_PLAN_GP_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'Out' 
								THEN OA.BASIS_PLAN_GP_AMOUNT
								ELSE 0
							END) AS OUT_BASIS_PLAN_GP_AMOUNT
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN 
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						INNER JOIN
						OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
						WHERE 1=1
						AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
						AND QUARTER(OA.BASIS_MONTH) = QUARTER(#{searchDate}) -- 변경
						GROUP BY CCI.COMPANY_ID
					) AS OL ON OL.COMPANY_ID = CCI.COMPANY_ID 
					LEFT OUTER JOIN -- QTD
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(OL.CONTRACT_AMOUNT) AS ACTUAL_TCV
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						WHERE 1=1
						AND YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
						AND QUARTER(OL.CONTRACT_DATE) <= QUARTER(#{searchDate}) -- 변경
						GROUP BY CCI.COMPANY_ID
					) AS ESA_TCV_QTD ON ESA_TCV_QTD.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN -- QTD
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(OA.BASIS_PLAN_REVENUE_AMOUNT) AS ACTUAL_REV,
							SUM(OA.BASIS_PLAN_GP_AMOUNT) AS ACTUAL_GP
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						INNER JOIN
						OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
						WHERE 1=1
						AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
						AND QUARTER(OA.BASIS_MONTH) <= QUARTER(#{searchDate}) -- 변경
						GROUP BY CCI.COMPANY_ID
					) AS ESA_QTD ON ESA_QTD.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN -- 현재 분기 실적 TCV
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(OL.CONTRACT_AMOUNT) AS ACTUAL_TCV
						FROM 
						OPPORTUNITY_LOG AS OL
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						WHERE 1=1
						AND YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
						AND QUARTER(OL.CONTRACT_DATE) = QUARTER(#{searchDate}) -- 변경
						GROUP BY CCI.COMPANY_ID
					) AS ESA_TCV ON ESA_TCV.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN -- 현재 분기 실적 REV, GP
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(OA.BASIS_PLAN_REVENUE_AMOUNT) AS ACTUAL_REV,
							SUM(OA.BASIS_PLAN_GP_AMOUNT) AS ACTUAL_GP
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						INNER JOIN
						OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
						WHERE 1=1
						AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
						AND QUARTER(OA.BASIS_MONTH) = QUARTER(#{searchDate}) -- 변경
						GROUP BY CCI.COMPANY_ID
					) AS ESA ON ESA.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN -- 지난분기 영업기회 TCV
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'In' 
								THEN OL.CONTRACT_AMOUNT 
							ELSE 0
							END) AS IN_BASIS_PLAN_TCV_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'Out' 
								THEN OL.CONTRACT_AMOUNT 
								ELSE 0
							END) AS OUT_BASIS_PLAN_TCV_AMOUNT
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						WHERE 1=1
						AND CASE 
									WHEN QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER)) = 4 
									THEN YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})-1
									ELSE YEAR(OL.CONTRACT_DATE) = YEAR(#{searchDate})
								END 
						AND QUARTER(OL.CONTRACT_DATE) = QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER))
						GROUP BY CCI.COMPANY_ID
					) AS OL_LAST_TCV ON OL_LAST_TCV.COMPANY_ID = CCI.COMPANY_ID
					LEFT OUTER JOIN -- 지난분기 영업기회 REV, GP
					(
						SELECT 
							CCI.COMPANY_ID,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'In' 
								THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
							ELSE 0
							END) AS IN_BASIS_PLAN_REVENUE_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'Out' 
								THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
								ELSE 0
							END) AS OUT_BASIS_PLAN_REVENUE_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'In' 
								THEN OA.BASIS_PLAN_GP_AMOUNT
								ELSE 0
							END) AS IN_BASIS_PLAN_GP_AMOUNT,
							SUM(CASE 
								WHEN OL.FORECAST_YN = 'Out' 
								THEN OA.BASIS_PLAN_GP_AMOUNT
								ELSE 0
							END) AS OUT_BASIS_PLAN_GP_AMOUNT
						FROM 
						OPPORTUNITY_LOG AS OL 
						INNER JOIN
						CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
						INNER JOIN
						OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
						WHERE 1=1
						AND CASE 
									WHEN QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER)) = 4 
									THEN YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})-1
									ELSE YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
								END 
						AND QUARTER(OA.BASIS_MONTH) = QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER))
						GROUP BY CCI.COMPANY_ID
					) AS OL_LAST ON OL_LAST.COMPANY_ID = CCI.COMPANY_ID
			WHERE 1=1
			]]>
			<if test="searchCategory != null and searchCategory != '' ">
			AND CCI.SEGMENT_CODE = #{searchCategory}
			</if>
			GROUP BY CCI.COMPANY_ID,CCI.COMPANY_NAME
			HAVING 1=1
	</select>
	
	<!-- 영업기회 대시보드 제품별 -->
	<select id="selectOpportunityDashBoardProduct" parameterType="hashmap" resultType="hashmap">
			SELECT 
				OPI.PRODUCT_NO,
				OPI.PRODUCT_NAME,
				
				SUM(IFNULL(ESA_QTD.ACTUAL_REV,0)) AS  ACTUAL_REV_AMOUNT_QTD,
				SUM(IFNULL(ESA_QTD.ACTUAL_GP,0)) AS ACTUAL_GP_AMOUNT_QTD,
				
				SUM(IFNULL(ESA.ACTUAL_REV,0)) AS  ACTUAL_REV_AMOUNT,
				SUM(IFNULL(ESA.ACTUAL_GP,0)) AS ACTUAL_GP_AMOUNT,
				
				SUM(IFNULL(OL.IN_BASIS_PLAN_REVENUE_AMOUNT,0)) AS REV_FC_IN,
				SUM(IFNULL(OL.OUT_BASIS_PLAN_REVENUE_AMOUNT,0)) AS REV_FC_OUT,
				SUM(IFNULL(OL.IN_BASIS_PLAN_GP_AMOUNT,0)) AS GP_FC_IN,
				SUM(IFNULL(OL.OUT_BASIS_PLAN_GP_AMOUNT,0)) AS GP_FC_OUT,
				
				SUM(IFNULL(OL_LAST.IN_BASIS_PLAN_REVENUE_AMOUNT,0)) AS LAST_REV_FC_IN,
				SUM(IFNULL(OL_LAST.OUT_BASIS_PLAN_REVENUE_AMOUNT,0)) AS LAST_REV_FC_OUT,
				SUM(IFNULL(OL_LAST.IN_BASIS_PLAN_GP_AMOUNT,0)) AS LAST_GP_FC_IN,
				SUM(IFNULL(OL_LAST.OUT_BASIS_PLAN_GP_AMOUNT,0)) AS LAST_GP_FC_OUT 
		FROM 
				OUR_PRODUCT_INFO AS OPI
				INNER JOIN -- 현재 분기 FC IN REV GP, FC OUT REV GP
				(
					SELECT 
						OA.PRODUCT_NO,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
						END) AS IN_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
							ELSE 0
						END) AS OUT_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS IN_BASIS_PLAN_GP_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS OUT_BASIS_PLAN_GP_AMOUNT
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
					AND QUARTER(OA.BASIS_MONTH) = QUARTER(#{searchDate}) -- 변경
					GROUP BY OA.PRODUCT_NO
				) AS OL ON OL.PRODUCT_NO = OPI.PRODUCT_NO 
				LEFT OUTER JOIN -- QTD
				(
					SELECT 
						OA.PRODUCT_NO,
						SUM(OA.BASIS_PLAN_REVENUE_AMOUNT) AS ACTUAL_REV,
						SUM(OA.BASIS_PLAN_GP_AMOUNT) AS ACTUAL_GP
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					<![CDATA[
					AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
					AND QUARTER(OA.BASIS_MONTH) <= QUARTER(#{searchDate}) -- 변경
					]]>
					GROUP BY OA.PRODUCT_NO
				) AS ESA_QTD ON ESA_QTD.PRODUCT_NO = OPI.PRODUCT_NO
				LEFT OUTER JOIN -- 현재 분기 실적 REV, GP
				(
					SELECT 
						OA.PRODUCT_NO,
						SUM(OA.BASIS_PLAN_REVENUE_AMOUNT) AS ACTUAL_REV,
						SUM(OA.BASIS_PLAN_GP_AMOUNT) AS ACTUAL_GP
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
					AND QUARTER(OA.BASIS_MONTH) = QUARTER(#{searchDate}) -- 변경
					GROUP BY OA.PRODUCT_NO
				) AS ESA ON ESA.PRODUCT_NO = OPI.PRODUCT_NO
				LEFT OUTER JOIN -- 지난분기 영업기회 REV, GP
				(
					SELECT 
						OA.PRODUCT_NO,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
						ELSE 0
						END) AS IN_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_REVENUE_AMOUNT 
							ELSE 0
						END) AS OUT_BASIS_PLAN_REVENUE_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'In' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS IN_BASIS_PLAN_GP_AMOUNT,
						SUM(CASE 
							WHEN OL.FORECAST_YN = 'Out' 
							THEN OA.BASIS_PLAN_GP_AMOUNT
							ELSE 0
						END) AS OUT_BASIS_PLAN_GP_AMOUNT
					FROM 
					OPPORTUNITY_LOG AS OL 
					INNER JOIN
					CLIENT_COMPANY_INFO AS CCI ON CCI.COMPANY_ID = OL.COMPANY_ID
					INNER JOIN
					OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
					WHERE 1=1
					AND CASE 
								WHEN QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER)) = 4 
								THEN YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})-1
								ELSE YEAR(OA.BASIS_MONTH) = YEAR(#{searchDate})
							END 
					AND QUARTER(OA.BASIS_MONTH) = QUARTER(DATE_SUB(#{searchDate}, INTERVAL 1 QUARTER))
					GROUP BY OA.PRODUCT_NO
			) AS OL_LAST ON OL_LAST.PRODUCT_NO = OPI.PRODUCT_NO
			GROUP BY OPI.PRODUCT_NO,OPI.PRODUCT_NAME
			HAVING 1=1
			ORDER BY OPI.PRODUCT_NO
	</select>
	
	
	
	<!-- 잠재영업기회 대시보드  고객사별 그룹 -->
	<select id="selectHiddenOpportunityDashBoardCompanyGroup" parameterType="hashmap" resultType="hashmap">
		<![CDATA[ 
			SELECT 
				CCI.SEGMENT_CODE,
				CIS.SEGMENT_HAN_NAME,
				COUNT(OHL.OPPORTUNITY_HIDDEN_ID) AS TOTAL_COUNT,
				SUM(OHL.OPPORTUNITY_AMOUNT) AS TOTAL_AMOUNT,
				SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS CHANGE_COUNT,
				SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS CHANGE_AMOUNT,
				SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS OVERDUE_COUNT,
				SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS OVERDUE_AMOUNT,
				SUM(CASE 
							WHEN 
								DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
								LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
							THEN 1 
							ELSE 0 
						END) AS MONTH_NEW_COUNT,
				SUM(CASE 
							WHEN 
								DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
								LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
							THEN OHL.OPPORTUNITY_AMOUNT 
							ELSE 0 
						END) AS MONTH_NEW_AMOUNT,
						OHL.SALESMAN_ID
			FROM 
				OPPORTUNITY_HIDDEN_LOG AS OHL 
				INNER JOIN
				CLIENT_COMPANY_INFO AS CCI ON OHL.COMPANY_ID = CCI.COMPANY_ID
				INNER JOIN
				CODE_INDUSTRY_SEGMENT AS CIS ON CCI.SEGMENT_CODE = CIS.SEGMENT_CODE
				INNER JOIN
				OUR_MEMBERS_INFO AS OMI ON OMI.MEMBER_ID_NUM = OHL.SALESMAN_ID
				LEFT OUTER JOIN
				OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID
			WHERE 1=1
			AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
			AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
			AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
			]]>
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
				<when test="global_role_code.contains('ROLE_MEMBER')">
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
			</choose>
			GROUP BY CCI.SEGMENT_CODE
	</select>
	
	<!-- 잠재영업기회 대시보드 고객사 -->
	<select id="selectHiddenOpportunityDashBoardCompany" parameterType="hashmap" resultType="hashmap">
	<![CDATA[ 
		SELECT 
			CCI.COMPANY_ID,
			CCI.COMPANY_NAME,
			CCI.SEGMENT_CODE,
			COUNT(OHL.OPPORTUNITY_HIDDEN_ID) AS TOTAL_COUNT,
			SUM(OHL.OPPORTUNITY_AMOUNT) AS TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS CHANGE_COUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS CHANGE_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS OVERDUE_COUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS OVERDUE_AMOUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN 1 
						ELSE 0 
					END) AS MONTH_NEW_COUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN OHL.OPPORTUNITY_AMOUNT 
						ELSE 0 
					END) AS MONTH_NEW_AMOUNT,
			OHL.SALESMAN_ID
		FROM 
				OPPORTUNITY_HIDDEN_LOG AS OHL 
				INNER JOIN
				CLIENT_COMPANY_INFO AS CCI ON OHL.COMPANY_ID = CCI.COMPANY_ID
				INNER JOIN
				CODE_INDUSTRY_SEGMENT AS CIS ON CCI.SEGMENT_CODE = CIS.SEGMENT_CODE
				INNER JOIN
				OUR_MEMBERS_INFO AS OMI ON OMI.MEMBER_ID_NUM = OHL.SALESMAN_ID
				LEFT OUTER JOIN
				OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID
			WHERE 1=1
			AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
			AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
			AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
		]]>
			<if test="searchCategory != null and searchCategory != '' ">
				AND CCI.SEGMENT_CODE = #{searchCategory}
			</if>
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
			</when>
			<when test="global_role_code.contains('ROLE_CFO')">
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND OMI.MEMBER_DIVISION = #{global_member_division}
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
			</when>
		</choose>
		GROUP BY CCI.COMPANY_ID
	</select>
	
	<!-- 잠재영업기회 대시보드 _본부별 -->
	<select id="selectHiddenOpportunityDashBoardDivision" parameterType="hashmap" resultType="hashmap">
	<if test="deviceCheck == 'mobile'">
		SELECT * FROM (
	</if>
	<![CDATA[ 
		SELECT 
			OMI.MEMBER_DIVISION,
			ODI.DIVISION_NAME,
			COUNT(OHL.OPPORTUNITY_HIDDEN_ID) AS TOTAL_COUNT,
			SUM(OHL.OPPORTUNITY_AMOUNT) AS TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS CHANGE_COUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS CHANGE_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS OVERDUE_COUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS OVERDUE_AMOUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN 1 
						ELSE 0 
					END) AS MONTH_NEW_COUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN OHL.OPPORTUNITY_AMOUNT 
						ELSE 0 
					END) AS MONTH_NEW_AMOUNT,
			COALESCE(ODI.DIVISION_NAME,'회사전체') AS TARGET_NAME,
			(SUM(OHL.OPPORTUNITY_AMOUNT) / 1000000)  AS M_TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS GREEN_CNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS GREEN_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS YELLOW_CNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS YELLOW_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS RED_CNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS RED_AMOUNT,
			SUM(CASE 
				WHEN 
					DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
					LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
				THEN OHL.OPPORTUNITY_AMOUNT 
				ELSE 0 
			END) / 1000000 AS M_MONTH_NEW_AMOUNT
		FROM 
			OPPORTUNITY_HIDDEN_LOG AS OHL 
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON OHL.SALESMAN_ID = OMI.MEMBER_ID_NUM
			LEFT OUTER JOIN
			OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID
			LEFT OUTER JOIN
			OUR_DIVISION_INFO AS ODI ON OMI.MEMBER_DIVISION = ODI.DIVISION_NO
		WHERE 1=1
		]]>		
		<if test="deviceCheck != 'mobile'">
			<![CDATA[ 
				AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
				AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
				AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
				GROUP BY OMI.MEMBER_DIVISION WITH ROLLUP
				HAVING 1=1 
			]]>
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
			</choose>
		</if>				
		
		<if test="deviceCheck == 'mobile'">
			<![CDATA[ 
				AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(CURDATE())
				AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(CURDATE())
				GROUP BY ODI.DIVISION_NAME WITH ROLLUP
				HAVING 1=1 
				AND TOTAL_COUNT > 0	
			]]>
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
			</choose>
			) AS A
			ORDER BY A.DIVISION_NAME ASC
		</if>	
	</select>
	
	<!-- 잠재영업기회 대시보드 _팀별 -->
	<select id="selectHiddenOpportunityDashBoardTeam" parameterType="hashmap" resultType="hashmap">
	<if test="deviceCheck == 'mobile'">
		SELECT * FROM (
	</if>
	<![CDATA[ 
		SELECT 
			OMI.MEMBER_DIVISION,
			OMI.MEMBER_TEAM,
			OTI.TEAM_NAME,
			COUNT(OHL.OPPORTUNITY_HIDDEN_ID) AS TOTAL_COUNT,
			SUM(OHL.OPPORTUNITY_AMOUNT) AS TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS CHANGE_COUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS CHANGE_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS OVERDUE_COUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS OVERDUE_AMOUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN 1 
						ELSE 0 
					END) AS MONTH_NEW_COUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN OHL.OPPORTUNITY_AMOUNT 
						ELSE 0 
					END) AS MONTH_NEW_AMOUNT,
			COALESCE(OTI.TEAM_NAME,'본부전체') AS TARGET_NAME,
			(SUM(OHL.OPPORTUNITY_AMOUNT) / 1000000)  AS M_TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS GREEN_CNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS GREEN_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS YELLOW_CNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS YELLOW_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS RED_CNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS RED_AMOUNT,
			SUM(CASE 
				WHEN 
					DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
					LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
				THEN OHL.OPPORTUNITY_AMOUNT 
				ELSE 0 
			END) / 1000000 AS M_MONTH_NEW_AMOUNT
		FROM 
			OPPORTUNITY_HIDDEN_LOG AS OHL 
			INNER JOIN
			OUR_MEMBERS_INFO AS OMI ON OHL.SALESMAN_ID = OMI.MEMBER_ID_NUM
			LEFT OUTER JOIN
			OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID
			LEFT OUTER JOIN
			OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		WHERE 1=1
		]]>
		<if test="deviceCheck != 'mobile'">
			<![CDATA[ 
				AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
				AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
				AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
				GROUP BY OMI.MEMBER_DIVISION,OMI.MEMBER_TEAM
				HAVING 1=1 
			]]>
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{searchDivision}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
			</choose>
		</if>				
		
		<if test="deviceCheck == 'mobile'">
			<![CDATA[ 
				AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(CURDATE())
				AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(CURDATE())
				GROUP BY OMI.MEMBER_DIVISION, OTI.TEAM_NAME WITH ROLLUP
				HAVING 1=1 
				AND TOTAL_COUNT > 0	
			]]>
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
			</choose>
			) AS A
			ORDER BY A.TEAM_NAME ASC
		</if>		
	</select>
	
	
	<!-- 잠재영업기회 대시보드 _직원 -->
	<select id="selectHiddenOpportunityDashBoardMember" parameterType="hashmap" resultType="hashmap">
	<if test="deviceCheck == 'mobile'">
		SELECT * FROM (
	</if>
	<![CDATA[ 
		SELECT 
			OMI.MEMBER_DIVISION,
			OMI.MEMBER_TEAM,
			OMI.MEMBER_ID_NUM,
			OMI.HAN_NAME,
			COUNT(OHL.OPPORTUNITY_HIDDEN_ID) AS TOTAL_COUNT,
			SUM(OHL.OPPORTUNITY_AMOUNT) AS TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS CHANGE_COUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS CHANGE_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS OVERDUE_COUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS OVERDUE_AMOUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN 1 
						ELSE 0 
					END) AS MONTH_NEW_COUNT,
			SUM(CASE 
						WHEN 
							DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
							LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
						THEN OHL.OPPORTUNITY_AMOUNT 
						ELSE 0 
					END) AS MONTH_NEW_AMOUNT,
			COALESCE(OMI.HAN_NAME,'팀전체') AS TARGET_NAME,
			(SUM(OHL.OPPORTUNITY_AMOUNT) / 1000000 ) AS M_TOTAL_AMOUNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS GREEN_CNT,
			SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS GREEN_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS YELLOW_CNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS YELLOW_AMOUNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS RED_CNT,
			SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN OHL.OPPORTUNITY_AMOUNT / 1000000 ELSE 0 END) AS RED_AMOUNT,
			SUM(CASE 
				WHEN 
					DATE_FORMAT(NOW() ,'%Y-%m-01') <=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d') AND 
					LAST_DAY(NOW()) >=  DATE_FORMAT(OHL.SYS_REGISTER_DATE,'%Y-%m-%d')
				THEN OHL.OPPORTUNITY_AMOUNT 
				ELSE 0 
			END) / 1000000 AS M_MONTH_NEW_AMOUNT
		FROM 
			OPPORTUNITY_HIDDEN_LOG AS OHL 
			LEFT OUTER JOIN
			OUR_MEMBERS_INFO AS OMI ON OHL.SALESMAN_ID = OMI.MEMBER_ID_NUM
			LEFT OUTER JOIN
			OUR_MEMBERS_INFO AS OMI2 ON OHL.CREATOR_ID = OMI2.MEMBER_ID_NUM
			LEFT OUTER JOIN
			OPPORTUNITY_LOG AS OL ON OHL.OPPORTUNITY_HIDDEN_ID = OL.OPPORTUNITY_HIDDEN_ID
		WHERE 1=1
		]]>
		
		<if test="deviceCheck != 'mobile'">
			<![CDATA[ 
				AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(#{searchDate})
				AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(#{searchDate})
				AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(#{searchDate}),QUARTER(#{searchDate})) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))				
			]]>
				<choose>
					<when test="global_role_code.contains('ROLE_CEO')">
						AND OMI.MEMBER_DIVISION = #{searchDivision}
						AND OMI.MEMBER_TEAM = #{searchTeam}
					</when>
					<when test="global_role_code.contains('ROLE_CFO')">
						AND OMI.MEMBER_DIVISION = #{searchDivision}
						AND OMI.MEMBER_TEAM = #{searchTeam}
					</when>
					<when test="global_role_code.contains('ROLE_DIVISION')">
						AND OMI.MEMBER_DIVISION = #{searchDivision}
						AND OMI.MEMBER_TEAM = #{searchTeam}
					</when>
					<when test="global_role_code.contains('ROLE_TEAM')">
						AND OMI.MEMBER_DIVISION = #{searchDivision}
						AND OMI.MEMBER_TEAM = #{searchTeam}
					</when>
					<when test="global_role_code.contains('ROLE_MEMBER')">
						AND OMI.MEMBER_TEAM = #{global_member_team}
					</when>
				</choose>
				GROUP BY OMI.MEMBER_DIVISION,OMI.MEMBER_TEAM,OMI.MEMBER_ID_NUM
		</if>				
		
		<if test="deviceCheck == 'mobile'">
			<![CDATA[ 
				AND YEAR(OHL.SYS_REGISTER_DATE) =  YEAR(CURDATE())
				AND QUARTER(OHL.SYS_REGISTER_DATE) =  QUARTER(CURDATE())
			]]>
			<choose>
				<when test="global_role_code.contains('ROLE_CEO')">
					GROUP BY OMI.MEMBER_DIVISION, OMI.MEMBER_TEAM, OMI.HAN_NAME WITH ROLLUP
					HAVING 1=1 
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
				<when test="global_role_code.contains('ROLE_CFO')">
					GROUP BY OMI.MEMBER_DIVISION, OMI.MEMBER_TEAM, OMI.HAN_NAME WITH ROLLUP
					HAVING 1=1 
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					GROUP BY OMI.MEMBER_DIVISION, OMI.MEMBER_TEAM, OMI.HAN_NAME WITH ROLLUP
					HAVING 1=1 
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
				<when test="global_role_code.contains('ROLE_TEAM')">
					GROUP BY OMI.MEMBER_DIVISION, OMI.MEMBER_TEAM, OMI.HAN_NAME WITH ROLLUP
					HAVING 1=1 
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
				<when test="global_role_code.contains('ROLE_MEMBER')">
					GROUP BY OMI.MEMBER_DIVISION, OMI.MEMBER_TEAM, OMI.HAN_NAME
					HAVING 1=1 
					AND OMI.MEMBER_TEAM = #{global_member_team}
				</when>
			</choose>
				AND TOTAL_COUNT > 0	
				) AS A 
				ORDER BY A.HAN_NAME ASC
		</if>	
	</select>
	
	
	
	<!-- 고객명 복수 입력 -->
	<delete id="deleteClientList" parameterType="hashmap">
		DELETE FROM COM_CLIENT_LIST 
		WHERE 1=1
		AND CATEGORY  = #{clientListCategory}
		<choose>
			<when test="filePK != null and filePK != '' ">
				AND LOG_ID = #{filePK}
			</when>
			<otherwise>
				AND LOG_ID=#{hiddenModalPK};
			</otherwise>
		</choose>
	</delete>
	
	<insert id="insertClientList" parameterType="hashmap">
	        INSERT INTO COM_CLIENT_LIST
			(	
				LOG_ID, 
				CLIENT_ID, 
				CATEGORY, 
				SYS_REGISTER_DATE, 
				SYS_UPDATE_DATE
			)
			VALUES
			<foreach collection="clientArray" item="item" index="index" separator=",">
			(
	            <choose>
					<when test="filePK != null and filePK != '' ">
						#{filePK},
					</when>
					<otherwise>
						#{hiddenModalPK},
					</otherwise>
				</choose>
	           #{item},
	           #{clientListCategory},
	            CURRENT_TIMESTAMP,
	            CURRENT_TIMESTAMP
			)
	        </foreach>
	</insert>
	
	<update id="updateOppKeyDeal" parameterType="hashmap">
		UPDATE OPPORTUNITY_LOG
		SET 
			KEY_DEAL_YN = #{hiddenModalKeyDealYN}
		WHERE 1=1
		AND OPPORTUNITY_ID = #{hiddenModalPK}
	</update>
	
	<update id="updateOppSalesCycle" parameterType="hashmap">
		UPDATE OPPORTUNITY_LOG
		SET 
			REBATE_YN = 'Y', 
			SALES_CYCLE = '5',
			CLOSE_CATEGORY = '1'
		WHERE 1=1
		AND OPPORTUNITY_ID = #{hiddenModalPK}
	</update>
	
	<insert id="insertOpportunityScCheck" parameterType="hashmap">
			INSERT INTO OPPORTUNITY_SALESCYCLE_CHECK
			(
				OPPORTUNITY_ID, 
				CHECK_YN, 
				CHECK_SEQ 
			)
			VALUES
			<foreach item="list" index="index" collection="list" open="" separator="," close="">
			(
				#{list.pkNo},
				#{list.check_yn},
				#{list.check_seq}
			)
			</foreach>
			ON DUPLICATE KEY UPDATE 
				OPPORTUNITY_ID   = VALUES(OPPORTUNITY_ID),
				CHECK_YN         = VALUES(CHECK_YN),
				CHECK_SEQ        = VALUES(CHECK_SEQ)
	</insert>
	
	<!-- 모바일 고객영업활동 -> 영업기회 리스트 -> Sales Cyle 현황 -->
	<select id="selectSalesCycle" parameterType="hashmap" resultType="hashmap">
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				SELECT
					ODI.DIVISION_NAME AS TARGET,
					SUM(1) AS TOTAL ,
					SUM(IF(OL.SALES_CYCLE = 1, 1, 0)) AS IV,
					SUM(IF(OL.SALES_CYCLE = 2, 1, 0)) AS QUALIFICATION,
					SUM(IF(OL.SALES_CYCLE = 3, 1, 0)) AS NEGOTIATION,
					SUM(IF(OL.SALES_CYCLE = 4 OR OL.SALES_CYCLE = 5, 1, 0)) AS CLOSE
				FROM
					OUR_MEMBERS_INFO AS OMI 
					INNER JOIN
					OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
					INNER JOIN
					OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
					INNER JOIN
					OPPORTUNITY_LOG AS OL ON OL.IDENTIFIER_ID = OMI.MEMBER_ID_NUM
				WHERE 1=1
				AND YEAR(OL.SYS_REGISTER_DATE) = YEAR(#{searchStartDate})
				GROUP BY ODI.DIVISION_NAME
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				SELECT
						OTI.TEAM_NAME AS TARGET,
						SUM(1) AS TOTAL ,
						SUM(IF(OL.SALES_CYCLE = 1, 1, 0)) AS IV,
						SUM(IF(OL.SALES_CYCLE = 2, 1, 0)) AS QUALIFICATION,
						SUM(IF(OL.SALES_CYCLE = 3, 1, 0)) AS NEGOTIATION,
						SUM(IF(OL.SALES_CYCLE = 4 OR OL.SALES_CYCLE = 5, 1, 0)) AS CLOSE
					FROM
						OUR_MEMBERS_INFO AS OMI 
						INNER JOIN
						OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
						INNER JOIN
						OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
						INNER JOIN
						OPPORTUNITY_LOG AS OL ON OL.IDENTIFIER_ID = OMI.MEMBER_ID_NUM
					WHERE 1=1
					AND YEAR(OL.SYS_REGISTER_DATE) = YEAR(#{searchStartDate})
					AND OMI.MEMBER_DIVISION = #{global_member_division}
					GROUP BY OTI.TEAM_NAME
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				SELECT
					OMI.HAN_NAME AS TARGET,
					SUM(1) AS TOTAL ,
					SUM(IF(OL.SALES_CYCLE = 1, 1, 0)) AS IV,
					SUM(IF(OL.SALES_CYCLE = 2, 1, 0)) AS QUALIFICATION,
					SUM(IF(OL.SALES_CYCLE = 3, 1, 0)) AS NEGOTIATION,
					SUM(IF(OL.SALES_CYCLE = 4 OR OL.SALES_CYCLE = 5, 1, 0)) AS CLOSE
				FROM
					OUR_MEMBERS_INFO AS OMI 
					INNER JOIN
					OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
					INNER JOIN
					OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
					INNER JOIN
					OPPORTUNITY_LOG AS OL ON OL.IDENTIFIER_ID = OMI.MEMBER_ID_NUM
				WHERE 1=1
				AND YEAR(OL.SYS_REGISTER_DATE) = YEAR(#{searchStartDate})
				AND OMI.MEMBER_DIVISION = #{global_member_division}
				AND OMI.MEMBER_TEAM = #{global_member_team}
				GROUP BY OMI.HAN_NAME
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				SELECT
					OMI.HAN_NAME AS TARGET,
					SUM(1) AS TOTAL ,
					SUM(IF(OL.SALES_CYCLE = 1, 1, 0)) AS IV,
					SUM(IF(OL.SALES_CYCLE = 2, 1, 0)) AS QUALIFICATION,
					SUM(IF(OL.SALES_CYCLE = 3, 1, 0)) AS NEGOTIATION,
					SUM(IF(OL.SALES_CYCLE = 4 OR OL.SALES_CYCLE = 5, 1, 0)) AS CLOSE
				FROM
					OUR_MEMBERS_INFO AS OMI 
					INNER JOIN
					OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
					INNER JOIN
					OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
					INNER JOIN
					OPPORTUNITY_LOG AS OL ON OL.IDENTIFIER_ID = OMI.MEMBER_ID_NUM
				WHERE 1=1
				AND YEAR(OL.SYS_REGISTER_DATE) = YEAR(#{searchStartDate})
				AND OMI.MEMBER_DIVISION = #{global_member_division}
				AND OMI.MEMBER_TEAM = #{global_member_team}
				GROUP BY OMI.HAN_NAME
			</when>
		</choose>
	</select>
	
	<select id="selectOpportunityDashBoardOpp" parameterType="hashmap" resultType="hashmap">
		SELECT 	
			<choose>
				<when test="global_role_code.contains('ROLE_CEO') or global_role_code.contains('ROLE_ADMIN')">
					ODI.DIVISION_NAME AS TARGET_NAME,
				</when>
				<when test="global_role_code.contains('ROLE_DIVISION')">
					OTI.TEAM_NAME AS TARGET_NAME,
				</when>
				<otherwise>
					OMI.MEMBER_ID_NUM AS TARGET_NAME,
				</otherwise>
			</choose>
			SUM(IFNULL(ESA.1Q_ACTUAL_REV_AMOUNT,0) + IFNULL(ESA.2Q_ACTUAL_REV_AMOUNT,0) + IFNULL(ESA.3Q_ACTUAL_REV_AMOUNT,0) + IFNULL(ESA.4Q_ACTUAL_REV_AMOUNT,0)) AS RESULT_AMOUNT,
			SUM(IFNULL(TARGET_REV,0)) AS TAGET_AMOUNT,
			SUM(IFNULL(OA.REV_FC_IN,0)) AS IN_AMOUNT,
			SUM(IFNULL(OA.REV_FC_OUT,0)) AS OUT_AMOUNT
		FROM 
		OUR_MEMBERS_INFO AS OMI  
		INNER JOIN
		OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION AND ODI.DIVISION_TYPE = 'S' -- AND OMI.POSITION_TYPE = '영업직'
		INNER JOIN
		OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM AND OTI.TEAM_TYPE = 'S'
		LEFT OUTER JOIN
		(
			SELECT 
				MEMBER_ID_NUM,
				SUM(TARGET_REVENUE_AMOUNT) AS TARGET_REV,
				SUM(TARGET_GP_AMOUNT) AS TARGET_GP
			FROM ERP_SALES_PLAN
			WHERE 1=1
			AND YEAR(BASIS_MONTH) = YEAR(#{searchStartDate})
			GROUP BY MEMBER_ID_NUM
		) AS ESP ON ESP.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM  
		LEFT OUTER JOIN
		ERP_SALES_ACTUAL AS ESA ON ESA.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM 
		AND ESA.ACTUAL_DATE = (
									SELECT MAX(ACTUAL_DATE) 
									FROM ERP_SALES_ACTUAL
									WHERE 1=1
									AND YEAR(ACTUAL_DATE) = YEAR(#{searchStartDate})
								)
		LEFT OUTER JOIN
		(
			SELECT 
				OA.MEMBER_ID_NUM,
				SUM(CASE 
					WHEN OL.FORECAST_YN = 'In' 
					THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
					ELSE 0
				END) AS REV_FC_IN,
				SUM(CASE 
					WHEN OL.FORECAST_YN = 'Out'  
					THEN OA.BASIS_PLAN_REVENUE_AMOUNT - IFNULL(OA.ERP_REV,0)
					ELSE 0
				END) AS REV_FC_OUT,				
				SUM(CASE 
					WHEN OL.FORECAST_YN = 'In' 
					THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)  
					ELSE 0
				END) AS GP_FC_IN,
				SUM(CASE 
					WHEN OL.FORECAST_YN = 'Out'  
					THEN OA.BASIS_PLAN_GP_AMOUNT - IFNULL(OA.ERP_GP,0)
					ELSE 0
				END) AS GP_FC_OUT
			FROM 
			OPPORTUNITY_LOG AS OL
			INNER JOIN
			OPPORTUNITY_AMOUNT AS OA ON OL.OPPORTUNITY_ID = OA.OPPORTUNITY_ID
			WHERE 1=1
			AND OL.TEMP_FLAG = 'N'
			AND YEAR(OA.BASIS_MONTH) = YEAR(#{searchStartDate})
			AND OL.SALES_CYCLE != '5' 
			GROUP BY OA.MEMBER_ID_NUM
		) AS OA ON OA.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		<choose>
			<when test="global_role_code.contains('ROLE_CEO') or global_role_code.contains('ROLE_ADMIN')">
				GROUP BY ODI.DIVISION_NAME
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				WHERE 1=1
				AND OMI.MEMBER_DIVISION = #{global_member_division}
				GROUP BY OTI.TEAM_NAME
			</when>
			<otherwise>
				WHERE 1=1
				AND OMI.MEMBER_DIVISION = #{global_member_team}
				GROUP BY OMI.MEMBER_ID_NUM
			</otherwise>
		</choose>
	</select>
	
	<!-- 모바일 고객영업활동 -> 고객컨택내용 -> 대시보드 기간별 추이 차트 selectbox option  (팀장권한) -->
	<select id="lineGraphSelectTEAMOption" parameterType="hashmap" resultType="hashmap">
		SELECT
		OTI.TEAM_NAME AS NAMES
		,OTI.TEAM_NO AS NUMS
		FROM OUR_MEMBERS_INFO OMI

		INNER JOIN OUR_TEAM_INFO OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		INNER JOIN
		OUR_DIVISION_INFO ODI
		ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION

		WHERE ODI.DIVISION_NO = #{global_member_division}
		AND OTI.TEAM_TYPE = 'S'
		AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK = '팀장')
		GROUP BY
		OTI.TEAM_NAME
	</select>
	
	<!-- 모바일 고객영업활동 -> 영업기회 -> 영업 현황 (영업대표) -->
	<select id="selectOpportunityDashBoardOppMember" parameterType="hashmap" resultType="hashmap">
		SELECT
		OMI.HAN_NAME
		,IFNULL((
		SELECT COUNT(ESP2.TARGET_REVENUE_AMOUNT) FROM ERP_SALES_PLAN ESP2
		WHERE ESP2.BASIS_MONTH LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OTI.TEAM_NO = ESP2.MEMBER_TEAM
		),0) AS TAGET_AMOUNT_CNT
		,IFNULL(ROUND((
		SELECT IFNULL(SUM(ESP2.TARGET_REVENUE_AMOUNT),0) FROM ERP_SALES_PLAN ESP2
		WHERE ESP2.BASIS_MONTH LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OMI.MEMBER_ID_NUM = MEMBER_ID_NUM
		) / 1000000), 0) AS TAGET_AMOUNT

		,IFNULL((
		SELECT COUNT(OL2.GP_AMOUNT) FROM OPPORTUNITY_LOG OL2
		INNER JOIN OUR_MEMBERS_INFO OMI2
		ON OMI2.MEMBER_ID_NUM = OL2.IDENTIFIER_ID
		WHERE OL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OL2.FORECAST_YN = 'in'
		AND (OL2.SALES_CYCLE = '3' OR OL2.SALES_CYCLE = '4')

		AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM

		), 0) AS RESULT_AMOUNT_CNT
		,IFNULL(ROUND((
		SELECT IFNULL(SUM(OL2.GP_AMOUNT),0) FROM OPPORTUNITY_LOG OL2
		INNER JOIN OUR_MEMBERS_INFO OMI2
		ON OMI2.MEMBER_ID_NUM = OL2.IDENTIFIER_ID
		WHERE OL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OL2.FORECAST_YN = 'in'
		AND (OL2.SALES_CYCLE = '3' OR OL2.SALES_CYCLE = '4')
		AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		) / 1000000), 0) AS RESULT_AMOUNT

		,IFNULL((
		SELECT COUNT(OL2.GP_AMOUNT) FROM OPPORTUNITY_LOG OL2
		INNER JOIN OUR_MEMBERS_INFO OMI2
		ON OMI2.MEMBER_ID_NUM = OL2.IDENTIFIER_ID
		WHERE OL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OL2.SALES_CYCLE != '4'
		AND OL2.SALES_CYCLE != '3'
		AND OL2.FORECAST_YN = 'IN'

		AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		GROUP BY OMI2.MEMBER_TEAM

		), 0) AS IN_AMOUNT_CNT

		,IFNULL(ROUND((
		SELECT IFNULL(SUM(OL2.GP_AMOUNT),0) FROM OPPORTUNITY_LOG OL2
		INNER JOIN OUR_MEMBERS_INFO OMI2
		ON OMI2.MEMBER_ID_NUM = OL2.IDENTIFIER_ID
		WHERE OL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OL2.SALES_CYCLE != '4'
		AND OL2.SALES_CYCLE != '3'
		AND OL2.FORECAST_YN = 'IN'
		AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		GROUP BY OMI2.MEMBER_TEAM
		) / 1000000), 0) AS IN_AMOUNT

		,IFNULL((
		SELECT COUNT(OL2.GP_AMOUNT) FROM OPPORTUNITY_LOG OL2
		INNER JOIN OUR_MEMBERS_INFO OMI2
		ON OMI2.MEMBER_ID_NUM = OL2.IDENTIFIER_ID
		WHERE OL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()),'%')
		<!-- AND SALES_CYCLE != '4'
		AND SALES_CYCLE != '3' -->
		AND OL2.FORECAST_YN = 'Out'

		AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		GROUP BY OMI2.MEMBER_TEAM

		), 0) AS OUT_AMOUNT_CNT
		,IFNULL(ROUND((
		SELECT IFNULL(SUM(OL2.GP_AMOUNT),0) FROM OPPORTUNITY_LOG OL2
		INNER JOIN OUR_MEMBERS_INFO OMI2
		ON OMI2.MEMBER_ID_NUM = OL2.IDENTIFIER_ID
		WHERE OL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()),'%')
		<!-- AND SALES_CYCLE != '4'
		AND SALES_CYCLE != '3' -->
		AND OL2.FORECAST_YN = 'Out'
		AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
		GROUP BY OMI2.MEMBER_TEAM
		) / 1000000), 0) AS OUT_AMOUNT

		FROM OUR_MEMBERS_INFO OMI
		LEFT OUTER JOIN OUR_TEAM_INFO OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		LEFT OUTER JOIN OPPORTUNITY_LOG OL
		ON OMI.MEMBER_ID_NUM = OL.IDENTIFIER_ID
		LEFT OUTER JOIN OUR_DIVISION_INFO
		ODI
		ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
		LEFT OUTER JOIN ERP_SALES_PLAN
		ESP
		ON ODI.DIVISION_NO = ESP.MEMBER_DIVISION


		WHERE ESP.BASIS_MONTH LIKE CONCAT(YEAR(CURDATE()),'%')
		AND OMI.MEMBER_ID_NUM
		= #{global_member_id}
		GROUP BY OMI.MEMBER_ID_NUM, TAGET_AMOUNT,
		RESULT_AMOUNT, IN_AMOUNT, OUT_AMOUNT
	</select>
	
	<!-- 모바일 고객영업활동 -> 영업기회 -> 영업기회 현황 (전체등록, 진행중) -->
	<select id="selectOpportunityCountM" parameterType="hashmap" resultType="hashmap">
		SELECT
			COUNT(*) AS TOTAL_COUNT
			,COUNT(
				CASE 
					WHEN OL.SALES_CYCLE NOT IN (5) AND OL.CLOSE_CATEGORY IS NULL
					THEN 1
				END
			) AS ING_COUNT
		FROM
			OUR_MEMBERS_INFO AS OMI 
			INNER JOIN
			OUR_TEAM_INFO AS OTI ON OTI.TEAM_NO = OMI.MEMBER_TEAM
			INNER JOIN
			OUR_DIVISION_INFO AS ODI ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
			INNER JOIN
			OPPORTUNITY_LOG AS OL ON OL.IDENTIFIER_ID = OMI.MEMBER_ID_NUM
		WHERE 1=1
		AND YEAR(OL.SYS_REGISTER_DATE) = YEAR(#{searchStartDate})
		<choose>
			<when test="global_role_code.contains('CEO')">
			</when>
			<when test="global_role_code.contains('DIVISION')">
				AND ODI.DIVISION_NO = #{global_member_division}
			</when>
			<when test="global_role_code.contains('TEAM')">
				AND OTI.TEAM_NO = #{global_member_team}
			</when>
			<when test="global_role_code.contains('MEMBER')">
				AND OMI.MEMBER_ID_NUM = #{global_member_id}
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
					</when>
					<otherwise>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
	</select>
	
	<!-- 모바일 영업기회 대시보드 _ forecast right -->
	<select id="selectOpportunityDashBoardOpp2" parameterType="hashmap" resultType="hashmap">
		SELECT
		@ROWNUM := @ROWNUM + 1 WEEK
		,DATE_ADD(END_DATE, INTERVAL (S_WEEK-1)*-1 DAY) START_DATE
		,END_DATE
		,S_WEEK,
		IFNULL(ROUND(SUM(
		CASE WHEN SALES_CYCLE != '3' AND SALES_CYCLE != '4' AND FORECAST_YN = 'IN'
		AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
		(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
		AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
		'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
		THEN IFNULL(GP_AMOUNT,0)
		END
		) / 1000000), 0) AS FORECAST_IN
		,
		IFNULL(ROUND(SUM(
		CASE WHEN SALES_CYCLE != '3' AND SALES_CYCLE != '4' AND FORECAST_YN =
		'OUT'
		AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
		(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
		AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
		'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
		THEN GP_AMOUNT
		END
		) / 1000000), 0) AS FORECAST_OUT
		,
		IFNULL(ROUND(SUM(
		CASE WHEN (SALES_CYCLE = '3' OR SALES_CYCLE = '4') AND FORECAST_YN = 'IN'
		AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
		(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
		AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
		'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
		THEN GP_AMOUNT
		END
		) /1000000), 0) AS RESULT_AMOUNT

		FROM
		(
		SELECT
		CASE
				 <![CDATA[
					WHEN DI.S_WEEK = 7 THEN DI.S_DATE
					WHEN DI.S_WEEK <> 7 AND DI.S_DATE = CURDATE() THEN CURDATE()
				  ]]>
		END END_DATE
		,DI.S_WEEK
		,TEAM_NAME
		,SYS_UPDATE_DATE
		,SYS_REGISTER_DATE
		,SALES_CYCLE
		,FORECAST_YN
		,GP_AMOUNT
		,HAN_NAME
		FROM DATE_INFO DI
		INNER JOIN
		(
		SELECT
		OTI.TEAM_NAME
		,OL.SYS_UPDATE_DATE
		,OL.SYS_REGISTER_DATE
		,OL.SALES_CYCLE
		,OL.FORECAST_YN
		,OL.GP_AMOUNT
		,OMI.HAN_NAME
		FROM OUR_MEMBERS_INFO OMI
		INNER JOIN OUR_TEAM_INFO OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		INNER JOIN opportunity_log OL
		ON OMI.MEMBER_ID_NUM = OL.IDENTIFIER_ID
		INNER JOIN OUR_DIVISION_INFO ODI
		ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
		WHERE 1=1
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				<choose>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND ODI.DIVISION_NO = #{global_member_division}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{selectValue}
							</otherwise>
						</choose>
					</when>
				</choose>
			</when>

			<when test="global_role_code.contains('ROLE_DIVISION')">
				<choose>
					<when test="TeamValue != null and TeamValue != '' ">
						<choose>
							<when test="TeamValue == 'all'">
								AND ODI.DIVISION_NO = #{global_member_division}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{TeamValue}
							</otherwise>
						</choose>
					</when>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND OTI.TEAM_NO = #{global_member_team}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{selectValue}
							</otherwise>
						</choose>
					</when>
				</choose>
			</when>

			<when test="global_role_code.contains('ROLE_TEAM')">
				<choose>
					<!-- <when test="TeamValue != null and TeamValue != '' "> <choose> <when 
						test="TeamValue == 'all'"> AND ODI.DIVISION_NO = #{global_member_division} 
						</when> <otherwise> AND OTI.TEAM_NO = #{TeamValue} </otherwise> </choose> 
						</when> -->
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND OTI.TEAM_NO = #{global_member_team}
							</when>
							<otherwise>
								AND OMI.MEMBER_ID_NUM = #{selectValue}
							</otherwise>
						</choose>
					</when>
				</choose>
				AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장'))
			</when>

			<when test="global_role_code.contains('ROLE_MEMBER')">
				<choose>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND OTI.TEAM_NO = #{global_member_team}
							</when>
							<otherwise>
								AND OMI.MEMBER_ID_NUM = #{selectValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND OMI.MEMBER_ID_NUM = #{global_member_id}
					</otherwise>
				</choose>
			</when>

		</choose>
		) AS AA
		WHERE DI.S_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL -7 WEEK) AND CURDATE()

		) TBL
		,(SELECT @ROWNUM := 0) TMP
		WHERE END_DATE IS NOT NULL
		GROUP BY
		START_DATE,END_DATE
	</select>
	
	<!-- 모바일 영업기회 대시보드 _ forecast right -->
	<select id="selectOpportunityNumberDashBoardOpp2" parameterType="hashmap"
		resultType="hashmap">
		SELECT
		@ROWNUM := @ROWNUM + 1 WEEK
		,DATE_ADD(END_DATE, INTERVAL (S_WEEK-1)*-1 DAY) START_DATE
		,END_DATE
		,S_WEEK,
		COUNT(
		CASE WHEN SALES_CYCLE != '3' AND SALES_CYCLE != '4' AND FORECAST_YN = 'IN'
		AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
		(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
		AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
		'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
		THEN IFNULL(GP_AMOUNT,0)
		END
		) AS FORECAST_IN
		,
		COUNT(
		CASE WHEN SALES_CYCLE != '3' AND SALES_CYCLE != '4' AND FORECAST_YN =
		'OUT'
		AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
		(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
		AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
		'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
		THEN GP_AMOUNT
		END
		) AS FORECAST_OUT
		,
		COUNT(
		CASE WHEN (SALES_CYCLE = '3' OR SALES_CYCLE = '4') AND FORECAST_YN = 'IN'
		AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
		(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
		AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
		'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
		THEN GP_AMOUNT
		END
		) AS RESULT_AMOUNT

		FROM
		(
		SELECT
		CASE
				<![CDATA[
					WHEN DI.S_WEEK = 7 THEN DI.S_DATE
					WHEN DI.S_WEEK <> 7 AND DI.S_DATE = CURDATE() THEN CURDATE()
				]]>
		END END_DATE
		,DI.S_WEEK
		,TEAM_NAME
		,SYS_UPDATE_DATE
		,SYS_REGISTER_DATE
		,SALES_CYCLE
		,FORECAST_YN
		,GP_AMOUNT
		,HAN_NAME
		FROM DATE_INFO DI
		INNER JOIN
		(
		SELECT
		OTI.TEAM_NAME
		,OL.SYS_UPDATE_DATE
		,OL.SYS_REGISTER_DATE
		,OL.SALES_CYCLE
		,OL.FORECAST_YN
		,OL.GP_AMOUNT
		,OMI.HAN_NAME
		FROM OUR_MEMBERS_INFO OMI
		INNER JOIN OUR_TEAM_INFO OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		INNER JOIN opportunity_log OL
		ON OMI.MEMBER_ID_NUM = OL.CREATOR_ID
		<!-- OR OMI.MEMBER_ID_NUM = OL.IDENTIFIER_ID -->
		INNER JOIN OUR_DIVISION_INFO ODI
		ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
		WHERE 1=1
		<choose>

			<when test="global_role_code.contains('ROLE_CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">
										AND ODI.DIVISION_NO = #{global_member_division}
									</when>
									<otherwise>
										AND OTI.TEAM_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
							<otherwise>
								AND ODI.DIVISION_NO = #{global_member_division}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">

									</when>
									<otherwise>
										AND ODI.DIVISION_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
						</choose>
					</otherwise>
				</choose>
			</when>

			<when test="global_role_code.contains('ROLE_DIVISION')">
				<choose>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND ODI.DIVISION_NO = #{global_member_division}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{selectValue}
							</otherwise>
						</choose>
					</when>
					<when test="TeamValue != null and TeamValue != '' ">
						<choose>
							<when test="TeamValue == 'all'">
								AND ODI.DIVISION_NO = #{global_member_division}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{TeamValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND ODI.DIVISION_NO = #{global_member_division}
					</otherwise>
				</choose>
			</when>

			<when test="global_role_code.contains('ROLE_TEAM')">
				<choose>
					<!-- <when test="TeamValue != null and TeamValue != '' "> <choose> <when 
						test="TeamValue == 'all'"> AND ODI.DIVISION_NO = #{global_member_division} 
						</when> <otherwise> AND OTI.TEAM_NO = #{TeamValue} </otherwise> </choose> 
						</when> -->
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND OTI.TEAM_NO = #{global_member_team}
							</when>
							<otherwise>
								AND OMI.MEMBER_ID_NUM = #{selectValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND OTI.TEAM_NO = #{global_member_team}
					</otherwise>
				</choose>
				AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장'))
			</when>

			<when test="global_role_code.contains('ROLE_MEMBER')">
				<choose>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND OTI.TEAM_NO = #{global_member_team}
							</when>
							<otherwise>
								AND OMI.MEMBER_ID_NUM = #{selectValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND OMI.MEMBER_ID_NUM = #{global_member_id}
					</otherwise>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">
										AND ODI.DIVISION_NO = #{global_member_division}
									</when>
									<otherwise>
										AND OTI.TEAM_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
							<otherwise>
								AND ODI.DIVISION_NO = #{global_member_division}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">

									</when>
									<otherwise>
										AND ODI.DIVISION_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
						</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		) AS AA
		WHERE DI.S_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL -7 WEEK) AND CURDATE()

		) TBL
		,(SELECT @ROWNUM := 0) TMP
		WHERE END_DATE IS NOT NULL
		GROUP BY
		START_DATE,END_DATE
	</select>
	
	<!-- 모바일 고객영업활동 -> 고객컨택내용 -> 컨택현황_전체 컨택수 -->
	<select id="selectClientContactTotalCnt" parameterType="hashmap" resultType="hashmap">
		SELECT
			COUNT(CEL.EVENT_ID) AS CONTACT_CNT
		FROM OUR_MEMBERS_INFO AS OMI
		LEFT OUTER JOIN
			CLIENT_EVENT_LOG AS CEL
			ON OMI.MEMBER_ID_NUM = CEL.CREATOR_ID
		LEFT OUTER JOIN
			OUR_TEAM_INFO AS OTI
			ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		LEFT OUTER JOIN
			OUR_DIVISION_INFO AS ODI
			ON ODI.DIVISION_NO = OTI.DIVISION_NO 
				OR ODI.DIVISION_NO = OMI.MEMBER_DIVISION
		WHERE OMI.USE_YN = 'Y'

		<choose>
			<when test="global_role_code.contains('CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<!-- AND ODI.DIVISION_NO = #{global_member_division} -->
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND (OMI.POSITION_TYPE IN ('영업직'))
					</when>
					<otherwise>
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND (OMI.POSITION_TYPE IN ('영업직'))
					</otherwise>
				</choose>
			</when>
			<when test="global_role_code.contains('DIVISION')">
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장','본부장')) -->
				AND (OMI.POSITION_TYPE IN ('영업직'))
				AND ODI.DIVISION_NO =	#{global_member_division}
			</when>
			<when test="global_role_code.contains('TEAM')">
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장')) -->
				AND (OMI.POSITION_TYPE IN ('영업직'))
				AND OTI.TEAM_NO =	#{global_member_team}
			</when>
			<when test="global_role_code.contains('MEMBER')">
				AND OMI.MEMBER_ID_NUM = #{global_member_id}
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND (OMI.POSITION_TYPE IN ('영업직'))
					</when>
					<otherwise>
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND (OMI.POSITION_TYPE IN ('영업직'))
					</otherwise>
				</choose>
			</otherwise>
		</choose>
	</select>
	
	<!-- 모바일 고객사 및 고객개인정보 -> 고객개인 게이트 -> 금주 신규 고객 -->
	<select id="selectWeekContactCnt" parameterType="hashmap" resultType="Integer">
		SELECT
		COUNT(
		CASE WHEN CEL.SYS_UPDATE_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL
		(DAYOFWEEK(CURDATE())-1) * -1 DAY) AND DATE_ADD(CURDATE(), INTERVAL
		(DAYOFWEEK(CURDATE())-7) * -1 DAY)
		THEN '주간카운트'
		END
		) AS WEEK_CNT

		FROM
		CLIENT_EVENT_LOG AS CEL
		LEFT OUTER JOIN
		OPPORTUNITY_HIDDEN_LOG AS OHL ON CEL.EVENT_ID = OHL.EVENT_ID
		LEFT OUTER JOIN
		CLIENT_ISSUE_LOG AS CIL ON CEL.EVENT_ID = CIL.EVENT_ID
		INNER JOIN
		OUR_MEMBERS_INFO AS OMI ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI ON OMI.MEMBER_DIVISION = ODI.DIVISION_NO
		WHERE 1=1
		AND
		YEAR(CEL.SYS_REGISTER_DATE) = YEAR(CURDATE())
		AND
		QUARTER(CEL.SYS_REGISTER_DATE) = QUARTER( CURDATE())

		<choose>
			<when test="global_role_code.contains('CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<!-- AND ODI.DIVISION_NO = #{global_member_division} -->
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND OMI.POSITION_TYPE = '영업직'

					</when>
					<otherwise>
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND OMI.POSITION_TYPE = '영업직'

					</otherwise>
				</choose>
			</when>
			<when test="global_role_code.contains('DIVISION')">
				AND ODI.DIVISION_NO = #{global_member_division}
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장','본부장')) -->
				AND OMI.POSITION_TYPE = '영업직'
				GROUP BY ODI.DIVISION_NO
			</when>
			<when test="global_role_code.contains('TEAM')">
				AND OMI.MEMBER_TEAM = #{global_member_team}
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장')) -->
				AND OMI.POSITION_TYPE = '영업직'
				GROUP BY OMI.MEMBER_TEAM
			</when>
			<when test="global_role_code.contains('MEMBER')">
				AND OMI.MEMBER_ID_NUM = #{global_member_id}
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND OMI.POSITION_TYPE = '영업직'

					</when>
					<otherwise>
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						AND OMI.POSITION_TYPE = '영업직'

					</otherwise>
				</choose>
			</otherwise>
		</choose>
	</select>
	
	<!-- 모바일 고객영업활동 -> 영업기회 리스트  -> 컨택방법별 현황 -->
	<select id="clientContactMethod" parameterType="hashmap" resultType="hashmap">
		SELECT
		REPLACE(T.TARGET_NAME, 'CEO', '임원') AS TARGET_NAME
		,CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('@',T.CATEGORY_CNT)+1,
		LOCATE('|',T.CATEGORY_CNT)-LOCATE('@',T.CATEGORY_CNT)-1) AS unsigned)
		AS TOTAL_COUNT
		,CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('|',T.CATEGORY_CNT)+1,
		LOCATE('/',T.CATEGORY_CNT)-LOCATE('|',T.CATEGORY_CNT)-1) AS unsigned)
		AS VISIT_CNT
		,CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('/',T.CATEGORY_CNT)+1,
		LOCATE(',',T.CATEGORY_CNT)-LOCATE('/',T.CATEGORY_CNT)-1) AS unsigned)
		AS MARKETING_CNT
		,CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE(',',T.CATEGORY_CNT)+1,
		LOCATE('^',T.CATEGORY_CNT)-LOCATE(',',T.CATEGORY_CNT)-1) AS unsigned)
		AS SNS_CNT
		,CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('^',T.CATEGORY_CNT)+1,
		LOCATE('#',T.CATEGORY_CNT)-LOCATE('^',T.CATEGORY_CNT)-1) AS unsigned)
		AS EMAIL_CNT
		,CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('#',T.CATEGORY_CNT)+1,
		LOCATE('/',T.CATEGORY_CNT)-LOCATE('|',T.CATEGORY_CNT)-1) AS unsigned)
		AS PHONE_CNT
		FROM
		(
		SELECT
		<choose>
			<when test="global_role_code.contains('CEO')">
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						REPLACE(OTI.TEAM_NAME, 'CEO', '임원') AS TARGET_NAME
					</when>
					<otherwise> -->
						ODI.DIVISION_NAME AS TARGET_NAME
					<!-- </otherwise>
				</choose> -->
			</when>
			<when test="global_role_code.contains('DIVISION')">
				OTI.TEAM_NAME AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('TEAM')">
				OMI.HAN_NAME AS TARGET_NAME
			</when>
			<otherwise>
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						REPLACE(OTI.TEAM_NAME, 'CEO', '임원') AS TARGET_NAME
					</when>
					<otherwise> -->
						ODI.DIVISION_NAME AS TARGET_NAME
					<!-- </otherwise>
				</choose> -->
			</otherwise>
		</choose>
		,(
		SELECT
		CONCAT(
		'@'
		,COUNT(CEL.EVENT_CATEGORY)
		,'|'
		,
		COUNT(
		CASE WHEN CEL.EVENT_CATEGORY = '방문' THEN 1 END
		)
		,'/'
		,
		COUNT(
		CASE WHEN CEL.EVENT_CATEGORY = '마케팅' THEN 1 END
		)
		,','
		,
		COUNT(
		CASE WHEN CEL.EVENT_CATEGORY = 'SNS' THEN 1 END
		)
		,'^'
		,
		COUNT(
		CASE WHEN CEL.EVENT_CATEGORY = 'E-mail' THEN 1 END
		)
		,'#'
		,
		COUNT(
		CASE WHEN CEL.EVENT_CATEGORY = '전화' THEN 1 END
		)
		)
		FROM CLIENT_EVENT_LOG AS CEL
		LEFT OUTER JOIN
		OUR_MEMBERS_INFO AS OMI2
		ON CEL.CREATOR_ID = OMI2.MEMBER_ID_NUM
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI2
		ON OTI2.TEAM_NO = OMI2.MEMBER_TEAM
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI2
		ON ODI2.DIVISION_NO = OTI2.DIVISION_NO
		WHERE CEL.SYS_REGISTER_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		<choose>
			<when test="global_role_code.contains('CEO')">
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND OTI2.TEAM_NO = OTI.TEAM_NO
					</when>
					<otherwise> -->
						AND ODI2.DIVISION_NO = ODI.DIVISION_NO
					<!-- </otherwise>
				</choose> -->
			</when>
			<when test="global_role_code.contains('DIVISION')">
				AND OTI2.TEAM_NO = OTI.TEAM_NO
			</when>
			<when test="global_role_code.contains('TEAM')">
				AND OMI.MEMBER_ID_NUM = OMI2.MEMBER_ID_NUM
			</when>
			<when test="global_role_code.contains('MEMBER')">

			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND OTI2.TEAM_NO = OTI.TEAM_NO
					</when>
					<otherwise>
						AND ODI2.DIVISION_NO = ODI.DIVISION_NO
					</otherwise>
				</choose>
			</otherwise>
		</choose>

		) AS CATEGORY_CNT
		FROM OUR_MEMBERS_INFO AS OMI
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI
		ON ODI.DIVISION_NO = OTI.DIVISION_NO
		WHERE OMI.USE_YN = 'Y'
		
		<choose>
			<when test="global_role_code.contains('CEO')">
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
						AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK = 
							'팀장')
						AND (OMI.POSITION_TYPE IN ('영업직'))
						AND OTI.TEAM_NO IN (
						SELECT OTI2.TEAM_NO FROM OUR_TEAM_INFO AS OTI2
						LEFT OUTER JOIN
						OUR_MEMBERS_INFO AS OMI2
						ON OMI2.MEMBER_TEAM = OTI2.TEAM_NO
						WHERE OMI2.POSITION_TYPE IN ('영업직', '임원')
						GROUP BY OTI2.TEAM_NO
						)
						GROUP BY OTI.TEAM_NO
						ORDER BY FIELD(TARGET_NAME, '임원')DESC, TARGET_NAME ASC
					</when>
					<otherwise> -->
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						<!-- AND (OMI.POSITION_TYPE IN ('영업직')) -->
						AND ODI.DIVISION_NO IS NOT NULL
						GROUP BY ODI.DIVISION_NO
						ORDER BY TARGET_NAME ASC
					<!-- </otherwise>
				</choose> -->
			</when>
			<when test="global_role_code.contains('DIVISION')">
				AND ODI.DIVISION_NO = #{global_member_division}
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장','본부장')) -->
				<!-- AND (OMI.POSITION_TYPE IN ('영업직')) -->
				GROUP BY OTI.TEAM_NO
				ORDER BY TARGET_NAME ASC
			</when>
			<when test="global_role_code.contains('TEAM')">
				AND OTI.TEAM_NO = #{global_member_team}
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK = '팀장') -->
				<!-- AND (OMI.POSITION_TYPE IN ('영업직')) -->
				GROUP BY TARGET_NAME
				ORDER BY FIELD(
				TARGET_NAME,
				(
				SELECT
				HAN_NAME
				FROM OUR_MEMBERS_INFO
				WHERE MEMBER_TEAM = #{global_member_team}
				AND POSITION_STATUS = '팀장'
				AND HAN_NAME NOT IN ('팀장')
				)
				) DESC, TARGET_NAME ASC
			</when>
			<when test="global_role_code.contains('MEMBER')">
			</when>
			<otherwise>
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
						AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK = 
							'팀장')
						AND (OMI.POSITION_TYPE IN ('영업직'))
						AND OTI.TEAM_NO IN (
						SELECT OTI2.TEAM_NO FROM OUR_TEAM_INFO AS OTI2
						LEFT OUTER JOIN
						OUR_MEMBERS_INFO AS OMI2
						ON OMI2.MEMBER_TEAM = OTI2.TEAM_NO
						WHERE OMI2.POSITION_TYPE IN ('영업직', '임원')
						GROUP BY OTI2.TEAM_NO
						)
						GROUP BY OTI.TEAM_NO
						ORDER BY FIELD(TARGET_NAME, '임원')DESC, TARGET_NAME ASC
					</when>
					<otherwise> -->
						<!-- AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN 
							('팀장','본부장')) -->
						<!-- AND (OMI.POSITION_TYPE IN ('영업직')) -->
						AND ODI.DIVISION_NO IS NOT NULL
						GROUP BY ODI.DIVISION_NO
						ORDER BY TARGET_NAME ASC
					<!-- </otherwise>
				</choose> -->
			</otherwise>
		</choose>

		) AS T
		<![CDATA[
			GROUP BY TARGET_NAME
			HAVING TOTAL_COUNT > 0
		]]>
	</select>
	
	<!-- 모바일 고객영업활동 -> 영업기회 리스트  -> 연관이슈 ㆍ연관잠재영업기회 현황 -->
	<select id="issueOppStatusCnt" parameterType="hashmap" resultType="hashmap">
		SELECT
		<choose>
			<when test="global_role_code.contains('CEO')">
				COALESCE(T.TARGET_NAME2,'회사전체') AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('DIVISION')">
				COALESCE(T.TARGET_NAME2,'본부전체') AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('TEAM')">
				COALESCE(T.TARGET_NAME2,'팀전체') AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('MEMBER')">

			</when>
			<otherwise>
				COALESCE(T.TARGET_NAME2,'회사전체') AS TARGET_NAME
			</otherwise>
		</choose>
		,(
		CASE WHEN T.TARGET_NAME2 IS NULL THEN 1
		ELSE BLANK_CNT2
		END
		) AS BLANK_CNT
		,T.*
		FROM
		(
		SELECT
		<choose>
			<when test="global_role_code.contains('CEO')">
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						OTI.TEAM_NAME AS TARGET_NAME2
						,(
						CASE WHEN OMI.POSITION_TYPE = '임원' THEN 2
						ELSE 3
						END
						) AS BLANK_CNT2
					</when>
					<otherwise> -->
						ODI.DIVISION_NAME AS TARGET_NAME2
						,(
						CASE WHEN OMI.POSITION_TYPE = '임원' THEN 2
						ELSE 3
						END
						) AS BLANK_CNT2
					<!-- </otherwise>
				</choose> -->
			</when>
			<when test="global_role_code.contains('DIVISION')">
				OTI.TEAM_NAME AS TARGET_NAME2
				,(
				CASE WHEN OMI.POSITION_RANK = '본부장' THEN 2
				ELSE 3
				END
				) AS BLANK_CNT2
			</when>
			<when test="global_role_code.contains('TEAM')">
				OMI.HAN_NAME AS TARGET_NAME2
				,(
				CASE WHEN OMI.POSITION_RANK = '팀장' THEN 2
				ELSE 3
				END
				) AS BLANK_CNT2
			</when>
			<when test="global_role_code.contains('MEMBER')">

			</when>
			<otherwise>
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						OTI.TEAM_NAME AS TARGET_NAME2
						,(
						CASE WHEN OMI.POSITION_TYPE = '임원' THEN 2
						ELSE 3
						END
						) AS BLANK_CNT2
					</when>
					<otherwise> -->
						ODI.DIVISION_NAME AS TARGET_NAME2
						,(
						CASE WHEN OMI.POSITION_TYPE = '임원' THEN 2
						ELSE 3
						END
						) AS BLANK_CNT2
					<!-- </otherwise>
				</choose> -->
			</otherwise>
		</choose>
		,(
		(
		SELECT
		COUNT(CIL2.EVENT_ID)
		FROM CLIENT_ISSUE_LOG CIL2
		WHERE CIL2.EVENT_ID IN (GROUP_CONCAT(CIL.EVENT_ID))
		AND CIL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		)
		+
		(
		SELECT
		COUNT(OHL2.EVENT_ID)
		FROM OPPORTUNITY_HIDDEN_LOG OHL2
		WHERE OHL2.EVENT_ID IN (GROUP_CONCAT(OHL.EVENT_ID))
		AND OHL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		)
		) AS TOTAL_CNT

		,(
		SELECT
		COUNT(CIL2.EVENT_ID)
		FROM CLIENT_ISSUE_LOG CIL2
		WHERE CIL2.EVENT_ID IN (GROUP_CONCAT(CIL.EVENT_ID))
		AND CIL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		) AS ISSUE_CNT

		,(
		SELECT
		COUNT(OHL2.EVENT_ID)
		FROM OPPORTUNITY_HIDDEN_LOG OHL2
		WHERE OHL2.EVENT_ID IN (GROUP_CONCAT(OHL.EVENT_ID))
		AND OHL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		) AS HIDDENOPP_CNT


		FROM OUR_MEMBERS_INFO AS OMI
		LEFT OUTER JOIN
		CLIENT_EVENT_LOG AS CEL
		ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI
		ON OMI.MEMBER_TEAM = OTI.TEAM_NO
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI
		ON OTI.DIVISION_NO = ODI.DIVISION_NO
		LEFT OUTER JOIN
		OPPORTUNITY_HIDDEN_LOG AS OHL
		ON OHL.EVENT_ID = CEL.EVENT_ID
		LEFT OUTER JOIN
		CLIENT_ISSUE_LOG AS CIL
		ON CIL.EVENT_ID = CEL.EVENT_ID
		WHERE OMI.USE_YN = 'Y'

		<choose>
			<when test="global_role_code.contains('CEO')">
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
						AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN
						('팀장'))
					</when>
					<otherwise>
						AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN
						('팀장','본부장'))
						AND ODI.DIVISION_NO IS NOT NULL
					</otherwise>
				</choose> -->
			</when>
			<when test="global_role_code.contains('DIVISION')">
				AND ODI.DIVISION_NO = #{global_member_division}
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장','본부장')) -->
			</when>
			<when test="global_role_code.contains('TEAM')">
				AND OTI.TEAM_NO = #{global_member_team}
				<!-- AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK = '팀장') -->
			</when>
			<when test="global_role_code.contains('MEMBER')">

			</when>
			<otherwise>
				<!-- <choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
						AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN
						('팀장'))
					</when>
					<otherwise>
						AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN
						('팀장','본부장'))
						AND ODI.DIVISION_NO IS NOT NULL
					</otherwise>
				</choose> -->
			</otherwise>
		</choose>
		GROUP BY TARGET_NAME2 WITH ROLLUP
		) AS T
		<![CDATA[
		GROUP BY TARGET_NAME
		HAVING TOTAL_CNT > 0
		]]>
		ORDER BY FIELD(BLANK_CNT,
		1,2,3) ASC, TARGET_NAME ASC
	</select>
	
	<!-- 모바일 고객영업활동 -> 고객컨택내용 -> 컨택현황_전체 컨택수 -->
	<select id="clientContactIndividualMethod" parameterType="hashmap"
		resultType="hashmap">
		SELECT
		OMI.HAN_NAME AS TARGET_NAME
		,COUNT(EVENT_CATEGORY) AS TOTAL_CNT
		,COUNT(
		CASE WHEN EVENT_CATEGORY = '방문' THEN 1 END
		) AS VISIT_CNT
		,COUNT(
		CASE WHEN EVENT_CATEGORY = '마케팅' THEN 1 END
		) AS MARKETING_CNT
		,COUNT(
		CASE WHEN EVENT_CATEGORY = 'SNS' THEN 1 END
		) AS SNS_CNT
		,COUNT(
		CASE WHEN EVENT_CATEGORY = 'E-mail' THEN 1 END
		) AS EMAIL_CNT
		,COUNT(
		CASE WHEN EVENT_CATEGORY = '전화' THEN 1 END
		) AS PHONE_CNT
		FROM CLIENT_EVENT_LOG AS CEL
		LEFT OUTER JOIN
		OUR_MEMBERS_INFO AS OMI
		ON OMI.MEMBER_ID_NUM = CEL.CREATOR_ID
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI
		ON OTI.TEAM_NO = MEMBER_TEAM
		WHERE 1=1
		AND OMI.USE_YN = 'Y'
		<!-- AND
		OMI.POSITION_TYPE = '영업직' -->
		AND OMI.MEMBER_ID_NUM = #{global_member_id}
		AND CEL.SYS_REGISTER_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
	</select>
	
	<!-- 모바일 고객영업활동 -> 고객컨택내용 -> 컨택현황_전체 컨택수 -->
	<select id="issueOppStatusIndividualCnt" parameterType="hashmap"
		resultType="hashmap">
		SELECT
		OMI.HAN_NAME AS TARGET_NAME
		,(
		(
		SELECT
		COUNT(OHL2.EVENT_ID)
		FROM OPPORTUNITY_HIDDEN_LOG OHL2
		WHERE OHL2.EVENT_ID IN (GROUP_CONCAT(OHL.EVENT_ID))
		AND OHL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		)
		+
		(
		SELECT
		COUNT(CIL2.EVENT_ID)
		FROM CLIENT_ISSUE_LOG CIL2
		WHERE CIL2.EVENT_ID IN (GROUP_CONCAT(CIL.EVENT_ID))
		AND CIL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		)
		) AS TOTAL_CNT
		,(
		SELECT
		COUNT(OHL2.EVENT_ID)
		FROM OPPORTUNITY_HIDDEN_LOG OHL2
		WHERE OHL2.EVENT_ID IN (GROUP_CONCAT(OHL.EVENT_ID))
		AND OHL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		) AS HIDDENOPP_CNT,
		(
		SELECT
		COUNT(CIL2.EVENT_ID)
		FROM CLIENT_ISSUE_LOG CIL2
		WHERE CIL2.EVENT_ID IN (GROUP_CONCAT(CIL.EVENT_ID))
		AND CIL2.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		) AS ISSUE_CNT
		FROM OUR_MEMBERS_INFO AS OMI
		LEFT OUTER JOIN
		CLIENT_EVENT_LOG AS CEL
		ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI
		ON OMI.MEMBER_TEAM = OTI.TEAM_NO
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI
		ON OTI.DIVISION_NO = ODI.DIVISION_NO
		LEFT OUTER JOIN
		OPPORTUNITY_HIDDEN_LOG AS OHL
		ON OHL.EVENT_ID = CEL.EVENT_ID
		LEFT OUTER JOIN
		CLIENT_ISSUE_LOG AS CIL
		ON CIL.EVENT_ID = CEL.EVENT_ID
		WHERE OMI.USE_YN = 'Y'
		<!-- AND
		OMI.POSITION_TYPE = '영업직' -->
		AND OMI.MEMBER_ID_NUM = #{global_member_id}
	</select>
	
	<!-- 모바일 고객영업활동 -> 고객컨택내용 -> 대시보드 BarChart -->
	<select id="quarterContactBarchart" parameterType="hashmap"
		resultType="hashmap">
		SELECT
		CONCAT(#{searchQuarter}, '분기') as NOW_QUARTOR
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '방문' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchYM}, '%') THEN '방문' END) END) AS QUARTER_VISTED
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'E-MAIL' THEN (CASE WHEN
		CEL.SYS_REGISTER_DATE LIKE CONCAT(#{searchYM}, '%') THEN 'E-MAIL' END)
		END) AS QUARTER_EMAIL
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'SNS' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchYM}, '%') THEN 'SNS' END) END) AS
		QUARTER_MARKETING
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '마케팅' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchYM}, '%') THEN '마케팅' END) END) AS QUARTER_SNS
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '전화' THEN (CASE WHEN
		CEL.SYS_REGISTER_DATE LIKE CONCAT(#{searchYM}, '%') THEN '전화' END)
		END) AS QUARTER_PHONE

		,SUBSTR(#{searchMonth1}, -2) AS MONTH1
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '방문' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth1}, '%') THEN '방문' END ) END) AS
		QUARTER_VISTED_1
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'E-MAIL' THEN (CASE WHEN
		CEL.SYS_REGISTER_DATE LIKE CONCAT(#{searchMonth1}, '%') THEN 'E-MAIL'
		END ) END) AS QUARTER_EMAIL_1
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '마케팅' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth1}, '%') THEN '마케팅' END ) END) AS
		QUARTER_MARKETING_1
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'SNS' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth1}, '%') THEN 'SNS' END ) END) AS
		QUARTER_SNS_1
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '전화' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth1}, '%') THEN '전화' END ) END) AS
		QUARTER_PHONE_1

		,SUBSTR(#{searchMonth2}, -2) AS MONTH2
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '방문' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth2}, '%') THEN '방문' END ) END) AS
		QUARTER_VISTED_2
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'E-MAIL' THEN (CASE WHEN
		CEL.SYS_REGISTER_DATE LIKE CONCAT(#{searchMonth2}, '%') THEN 'E-MAIL'
		END ) END) AS QUARTER_EMAIL_2
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '마케팅' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth2}, '%') THEN '마케팅' END ) END) AS
		QUARTER_MARKETING_2
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'SNS' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth2}, '%') THEN 'SNS' END ) END) AS
		QUARTER_SNS_2
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '전화' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth2}, '%') THEN '전화' END ) END) AS
		QUARTER_PHONE_2

		,SUBSTR(#{searchMonth3}, -2) AS MONTH3
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '방문' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth3}, '%') THEN '방문' END ) END) AS
		QUARTER_VISTED_3
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'E-MAIL' THEN (CASE WHEN
		CEL.SYS_REGISTER_DATE LIKE CONCAT(#{searchMonth3}, '%') THEN 'E-MAIL'
		END ) END) AS QUARTER_EMAIL_3
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '마케팅' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth3}, '%') THEN '마케팅' END ) END) AS
		QUARTER_MARKETING_3
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = 'SNS' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth3}, '%') THEN 'SNS' END ) END) AS
		QUARTER_SNS_3
		,COUNT(CASE WHEN CEL.EVENT_CATEGORY = '전화' THEN (CASE WHEN CEL.SYS_REGISTER_DATE
		LIKE CONCAT(#{searchMonth3}, '%') THEN '전화' END ) END) AS
		QUARTER_PHONE_3
		FROM OUR_MEMBERS_INFO OMI

		INNER JOIN OUR_TEAM_INFO OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		INNER JOIN
		CLIENT_EVENT_LOG CEL
		on omi.member_id_num = CEL.creator_id
		INNER JOIN
		our_division_info ODI
		on ODI.DIVISION_NO = OMI.MEMBER_DIVISION
		WHERE 1=1

		<choose>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OTI.TEAM_NO = #{global_member_team}
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND CEL.CREATOR_ID = #{global_member_id}
			</when>
		</choose>
	</select>
	
	<!-- 고객영업활동 -> 고객컨택내용 -> 대시보드 PieChart -->
	<select id="quarterPieChart" parameterType="hashmap" resultType="hashmap">
		SELECT
		'방문' as '방문t'
		,COUNT(CASE WHEN QUARTER(CEL.EVENT_DATE) = #{searchQuarter} THEN (CASE WHEN
		CEL.EVENT_CATEGORY = '방문' THEN '방문' END) END ) AS QUARTER_VISTED
		,'E-mail' as 'E-mail'
		,COUNT(CASE WHEN QUARTER(CEL.EVENT_DATE) = #{searchQuarter} THEN (CASE WHEN
		CEL.EVENT_CATEGORY = 'E-MAIL' THEN 'E-MAIL' END) END ) AS
		QUARTER_EMAIL
		,'마케팅' as '마케팅s'
		,COUNT(CASE WHEN QUARTER(CEL.EVENT_DATE) = #{searchQuarter} THEN (CASE WHEN
		CEL.EVENT_CATEGORY = '마케팅' THEN '마케팅' END) END ) AS QUARTER_MARKETING
		,'SNS' as 'SNS'
		,COUNT(CASE WHEN QUARTER(CEL.EVENT_DATE) = #{searchQuarter} THEN (CASE WHEN
		CEL.EVENT_CATEGORY = 'SNS' THEN 'SNS' END) END ) AS QUARTER_SNS
		,'전화' as '전화dd'
		,COUNT(CASE WHEN QUARTER(CEL.EVENT_DATE) = #{searchQuarter} THEN (CASE WHEN
		CEL.EVENT_CATEGORY = '전화' THEN '전화' END) END ) AS QUARTER_PHONE
		FROM
		CLIENT_EVENT_LOG CEL
		<!-- WHERE CREATOR_ID = #{global_member_id} -->
		WHERE CEL.SYS_REGISTER_DATE LIKE CONCAT(#{searchYear}, '%')
	</select>
	
	<!-- 고객영업활동 -> 고객컨택내용 -> 대시보드 c3차트 (고객컨택) 데이터 -->
	<select id="ContactStatusData" parameterType="hashmap" resultType="hashmap">
		SELECT
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				COALESCE(T1.TARGET_NAME2, '회사전체') AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				COALESCE(T1.TARGET_NAME2, '본부전체') AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				COALESCE(T1.TARGET_NAME2, '팀전체') AS TARGET_NAME
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				COALESCE(T1.TARGET_NAME2, '팀전체') AS TARGET_NAME
			</when>
			<otherwise>
				COALESCE(T1.TARGET_NAME2, '회사전체') AS TARGET_NAME
			</otherwise>
		</choose>
		,T1.*
		FROM(
		SELECT
		REPLACE(T.NAME, 'CEO', '임원') AS TARGET_NAME2
		<if test="global_role_code.contains('ROLE_MEMBER')">
			,T.M_NUM
		</if>
						<![CDATA[
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('@',T.CATEGORY_CNT)+1, LOCATE('}',T.CATEGORY_CNT)-LOCATE('@',T.CATEGORY_CNT)-1) AS unsigned)) AS WEEK_CONTACT_0
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('}',T.CATEGORY_CNT)+1, LOCATE(':',T.CATEGORY_CNT)-LOCATE('}',T.CATEGORY_CNT)-1) AS unsigned)) AS WEEK_CONTACT_1
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE(':',T.CATEGORY_CNT)+1, LOCATE('"',T.CATEGORY_CNT)-LOCATE(':',T.CATEGORY_CNT)-1) AS unsigned)) AS WEEK_CONTACT_2
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('"',T.CATEGORY_CNT)+1, LOCATE('<',T.CATEGORY_CNT)-LOCATE('"',T.CATEGORY_CNT)-1) AS unsigned)) AS WEEK_CONTACT_3
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('<',T.CATEGORY_CNT)+1, LOCATE('^',T.CATEGORY_CNT)-LOCATE('<',T.CATEGORY_CNT)-1) AS unsigned)) AS WEEK_CONTACT_4
						
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('^',T.CATEGORY_CNT)+1, LOCATE('#',T.CATEGORY_CNT)-LOCATE('^',T.CATEGORY_CNT)-1) AS unsigned)) AS QUARTER_VISTED
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('#',T.CATEGORY_CNT)+1, LOCATE('$',T.CATEGORY_CNT)-LOCATE('#',T.CATEGORY_CNT)-1) AS unsigned)) AS QUARTER_EMAIL
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('$',T.CATEGORY_CNT)+1, LOCATE('%',T.CATEGORY_CNT)-LOCATE('$',T.CATEGORY_CNT)-1) AS unsigned)) AS QUARTER_SNS
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('%',T.CATEGORY_CNT)+1, LOCATE('&',T.CATEGORY_CNT)-LOCATE('%',T.CATEGORY_CNT)-1) AS unsigned)) AS QUARTER_MARKETING
						,SUM(CAST(SUBSTRING(T.CATEGORY_CNT, LOCATE('&',T.CATEGORY_CNT)+1, LOCATE(':',T.CATEGORY_CNT)-LOCATE('}',T.CATEGORY_CNT)-1) AS unsigned)) AS QUARTER_PHONE
						]]>

		FROM(
		SELECT
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						REPLACE(OTI.TEAM_NAME, 'CEO', '임원') AS NAME,
					</when>
					<otherwise>
						ODI.DIVISION_NAME AS NAME,
					</otherwise>
				</choose>
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				OTI.TEAM_NAME AS NAME,
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				OMI.HAN_NAME AS NAME,
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				OMI.HAN_NAME AS NAME,
				OMI.MEMBER_ID_NUM AS M_NUM,
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						OTI.TEAM_NAME AS NAME,
					</when>
					<otherwise>
						ODI.DIVISION_NAME AS NAME,
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		(
		SELECT
		CONCAT(
		'@',
		COUNT(
		CASE WHEN CEL2.EVENT_CATEGORY = '방문'
		AND CEL2.SYS_UPDATE_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL
		(DAYOFWEEK(CURDATE())-1) * -1 DAY)
		AND DATE_ADD(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE())-7) * -1 DAY)
		THEN CEL2.EVENT_CATEGORY = '방문'
		END
		),
		'}',
		COUNT(
		CASE WHEN CEL2.EVENT_CATEGORY = 'E-MAIL'
		AND CEL2.SYS_UPDATE_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL
		(DAYOFWEEK(CURDATE())-1) * -1 DAY)
		AND DATE_ADD(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE())-7) * -1 DAY)
		THEN CEL2.EVENT_CATEGORY = 'E-MAIL'
		END
		),
		':',
		COUNT(
		CASE WHEN CEL2.EVENT_CATEGORY = 'SNS'
		AND CEL2.SYS_UPDATE_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL
		(DAYOFWEEK(CURDATE())-1) * -1 DAY)
		AND DATE_ADD(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE())-7) * -1 DAY)
		THEN CEL2.EVENT_CATEGORY = 'SNS'
		END
		),
		'"',
		COUNT(
		CASE WHEN CEL2.EVENT_CATEGORY = '마케팅'
		AND CEL2.SYS_UPDATE_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL
		(DAYOFWEEK(CURDATE())-1) * -1 DAY)
		AND DATE_ADD(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE())-7) * -1 DAY)
		THEN CEL2.EVENT_CATEGORY = '마케팅'
		END
		), 
										<![CDATA[
										'<',
										COUNT(
											CASE WHEN CEL2.EVENT_CATEGORY = '전화'
												AND CEL2.SYS_UPDATE_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE())-1) * -1 DAY)
												AND DATE_ADD(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE())-7) * -1 DAY)
											THEN CEL2.EVENT_CATEGORY = '전화'
											END
										),
										
										'^',
										IFNULL(SUM(CASE 
											WHEN CEL2.EVENT_CATEGORY = '방문'
											THEN 1
											ELSE 0 
										END), 0),
										'#',
										IFNULL(SUM(CASE 
											WHEN CEL2.EVENT_CATEGORY = 'E-mail'
											THEN 1
											ELSE 0 
										END), 0),
										'$',
										IFNULL(SUM(CASE 
											WHEN CEL2.EVENT_CATEGORY = 'SNS'
											THEN 1
											ELSE 0 
										END), 0),
										'%',
										IFNULL(SUM(CASE 
											WHEN CEL2.EVENT_CATEGORY = '마케팅'
											THEN 1
											ELSE 0 
										END), 0),
										'&',
										IFNULL(SUM(CASE 
											WHEN CEL2.EVENT_CATEGORY = '전화'
											THEN 1
											ELSE 0 
										END), 0)
										]]>
		)

		FROM OUR_MEMBERS_INFO AS OMI2
		LEFT OUTER JOIN
		CLIENT_EVENT_LOG AS CEL2
		ON CEL2.CREATOR_ID = OMI2.MEMBER_ID_NUM
		LEFT OUTER JOIN
		OPPORTUNITY_HIDDEN_LOG AS OHL2
		ON CEL2.EVENT_ID = OHL2.EVENT_ID
		LEFT OUTER JOIN
		CLIENT_ISSUE_LOG AS CIL2
		ON CEL2.EVENT_ID = CIL2.EVENT_ID
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI2
		ON OMI2.MEMBER_TEAM = OTI2.TEAM_NO
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI2
		ON ODI2.DIVISION_NO = OTI2.DIVISION_NO
		WHERE YEAR(CEL2.SYS_REGISTER_DATE) = YEAR(CURDATE())
		AND QUARTER(CEL2.SYS_REGISTER_DATE) = #{searchQuarter}
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI2.DIVISION_NO = ODI.DIVISION_NO
						AND OTI2.TEAM_NO = OTI.TEAM_NO
					</when>
					<otherwise>
						AND ODI2.DIVISION_NO = ODI.DIVISION_NO
						<!-- AND OTI2.TEAM_NO = OTI.TEAM_NO -->
					</otherwise>
				</choose>
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND ODI2.DIVISION_NO = ODI.DIVISION_NO
				AND OTI2.TEAM_NO = OTI.TEAM_NO
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND ODI2.DIVISION_NO = ODI.DIVISION_NO
				AND OTI2.TEAM_NO = OTI.TEAM_NO
				AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND ODI2.DIVISION_NO = ODI.DIVISION_NO
				AND OTI2.TEAM_NO = OTI.TEAM_NO
				AND OMI2.MEMBER_ID_NUM = OMI.MEMBER_ID_NUM
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI2.DIVISION_NO = ODI.DIVISION_NO
						AND OTI2.TEAM_NO = OTI.TEAM_NO
					</when>
					<otherwise>
						AND ODI2.DIVISION_NO = ODI.DIVISION_NO
						<!-- AND OTI2.TEAM_NO = OTI.TEAM_NO -->
					</otherwise>
				</choose>
			</otherwise>
		</choose>

		) AS CATEGORY_CNT



		FROM OUR_MEMBERS_INFO AS OMI
		LEFT OUTER JOIN
		CLIENT_EVENT_LOG AS CEL
		ON CEL.CREATOR_ID = OMI.MEMBER_ID_NUM
		LEFT OUTER JOIN
		OPPORTUNITY_HIDDEN_LOG AS OHL
		ON CEL.EVENT_ID = OHL.EVENT_ID
		LEFT OUTER JOIN
		CLIENT_ISSUE_LOG AS CIL
		ON CEL.EVENT_ID = CIL.EVENT_ID
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI
		ON OMI.MEMBER_TEAM = OTI.TEAM_NO
		LEFT OUTER JOIN
		OUR_DIVISION_INFO AS ODI
		ON ODI.DIVISION_NO = OTI.DIVISION_NO
		WHERE 1=1
		AND OTI.TEAM_TYPE = 'S'
		AND OMI.USE_YN = 'Y'
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<!-- AND ODI.DIVISION_NO = #{global_member_division} -->
						<!-- AND YEAR(CEL.SYS_REGISTER_DATE) = YEAR(CURDATE()) AND QUARTER(CEL.SYS_REGISTER_DATE) 
							= #{searchQuarter} -->
								<![CDATA[
									AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
								]]>
						GROUP BY OTI.TEAM_NO
					</when>
					<otherwise>
								<![CDATA[
									AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
								]]>
						GROUP BY OTI.DIVISION_NO
					</otherwise>
				</choose>
			</when>
			<when test="global_role_code.contains('ROLE_DIVISION')">
				AND ODI.DIVISION_NO = #{global_member_division}
						<![CDATA[
							AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
						]]>
				GROUP BY OTI.TEAM_NO
			</when>
			<when test="global_role_code.contains('ROLE_TEAM')">
				AND OTI.TEAM_NO = #{global_member_team}
				AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장'))
						<![CDATA[
							AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
						]]>
				GROUP BY OMI.MEMBER_ID_NUM
			</when>
			<when test="global_role_code.contains('ROLE_MEMBER')">
				AND OTI.TEAM_NO = #{global_member_team}
				<!-- AND OMI.MEMBER_ID_NUM = #{global_member_id} -->
				AND (OMI.POSITION_TYPE IN ('영업직'))
						
						<![CDATA[
							AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
						]]>
				GROUP BY OMI.MEMBER_ID_NUM
			</when>
			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						AND ODI.DIVISION_NO = #{global_member_division}
								<![CDATA[
									AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
								]]>
						GROUP BY OTI.TEAM_NO
					</when>
					<otherwise>
								<![CDATA[
									AND (OMI.STOP_DATE IS NULL OR (CONCAT(YEAR(CURDATE()),QUARTER(CURDATE())) <= CONCAT(YEAR(OMI.STOP_DATE),QUARTER(OMI.STOP_DATE))))
								]]>
						GROUP BY OTI.DIVISION_NO
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		) AS T
		GROUP BY TARGET_NAME2 WITH ROLLUP
		) AS T1
		<if test="global_role_code.contains('ROLE_MEMBER')">
			<!-- HAVING 1=1 AND T1.M_NUM = #{global_member_id} -->
		</if>
		ORDER BY T1.TARGET_NAME2 IS NULL DESC, FIELD(T1.TARGET_NAME2,'임원')
		DESC, TARGET_NAME ASC
	</select>
	
	<!-- 고객영업활동 -> 고객컨택내용 -> 대시보드 c3차트 (고객컨택) 데이터 -->
	<select id="ContactTransitionData" parameterType="hashmap"
		resultType="hashmap">
		SELECT
		@ROWNUM := @ROWNUM + 1 WEEK
		,DATE_ADD(END_DATE, INTERVAL (S_WEEK-1)*-1 DAY) START_DATE
		,END_DATE
		,S_WEEK,

		<foreach collection="contactValue" item="item" index="index"
			separator=",">
			COUNT(
			CASE WHEN EVENT_CATEGORY = #{item}
			AND DATEDIFF(SYS_UPDATE_DATE, DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL
			(S_WEEK-1)*-1 DAY), '%y/%m/%d 00:00:00')) >= 0
			AND DATEDIFF(DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL (S_WEEK-7)*-1 DAY),
			'%y/%m/%d 23:59:59'), SYS_UPDATE_DATE) >= 0
			THEN #{item}
			END
			) AS CONTACT_${index}
		</foreach>
		FROM
		(
		SELECT
		CASE
				<![CDATA[
					WHEN DI.S_WEEK = 7 THEN DI.S_DATE
					WHEN DI.S_WEEK <> 7 AND DI.S_DATE = CURDATE() THEN CURDATE()
				 ]]>
		END END_DATE
		,DI.S_WEEK
		,TEAM_NAME
		,SYS_UPDATE_DATE
		,SYS_REGISTER_DATE
		,EVENT_CATEGORY
		,HAN_NAME
		FROM DATE_INFO DI
		INNER JOIN
		(
		SELECT
		OTI.TEAM_NAME
		,CEL.SYS_UPDATE_DATE
		,CEL.SYS_REGISTER_DATE
		,CEL.EVENT_CATEGORY
		,OMI.HAN_NAME
		FROM OUR_MEMBERS_INFO AS OMI
		LEFT OUTER JOIN
		OUR_TEAM_INFO AS OTI
		ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		LEFT OUTER JOIN
		CLIENT_EVENT_LOG AS CEL
		ON OMI.MEMBER_ID_NUM = CEL.CREATOR_ID
		LEFT OUTER JOIN OUR_DIVISION_INFO AS ODI
		ON ODI.DIVISION_NO = OTI.DIVISION_NO
		WHERE 1=1
		<choose>
			<when test="global_role_code.contains('ROLE_CEO')">
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">
										AND ODI.DIVISION_NO = #{global_member_division}
									</when>
									<otherwise>
										AND OTI.TEAM_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
						</choose>
					</when>

					<otherwise>
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">
										<!-- AND ODI.DIVISION_NO = #{global_member_division} -->
									</when>
									<otherwise>
										<!-- AND OTI.TEAM_NO = #{selectValue} -->
										AND ODI.DIVISION_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
						</choose>
					</otherwise>
				</choose>
				AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN
				('팀장','본부장'))
			</when>

			<when test="global_role_code.contains('ROLE_DIVISION')">
				<choose>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND ODI.DIVISION_NO = #{global_member_division}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{selectValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND ODI.DIVISION_NO = #{global_member_division}
					</otherwise>
				</choose>
				AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN
				('팀장','본부장'))
			</when>

			<when test="global_role_code.contains('ROLE_TEAM')">
				<choose>
					<when test="TeamValue != null and TeamValue != '' ">
						<choose>
							<when test="TeamValue == 'all'">
								AND ODI.DIVISION_NO = #{global_member_division}
							</when>
							<otherwise>
								AND OTI.TEAM_NO = #{TeamValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND ODI.DIVISION_NO = #{global_member_division}
					</otherwise>
				</choose>
				<if test="TeamValue != 'all'">
					<choose>
						<when test="selectValue != null and selectValue != '' ">
							<choose>
								<when test="selectValue == 'all'">
									AND OTI.TEAM_NO = #{global_member_team}
								</when>
								<otherwise>
									AND OMI.MEMBER_ID_NUM = #{selectValue}
								</otherwise>
							</choose>
						</when>
						<otherwise>
							AND OTI.TEAM_NO = #{global_member_team}
						</otherwise>
					</choose>
				</if>
				<if test="TeamValue != 'all'">
					AND (OMI.POSITION_TYPE IN ('영업직') OR OMI.POSITION_RANK IN ('팀장'))
				</if>
				<if test="TeamValue == 'all'">
					AND (OMI.POSITION_TYPE IN ('영업직','임원') OR OMI.POSITION_RANK IN
					('팀장','본부장'))
				</if>
			</when>

			<when test="global_role_code.contains('ROLE_MEMBER')">
				<choose>
					<when test="selectValue != null and selectValue != '' ">
						<choose>
							<when test="selectValue == 'all'">
								AND OTI.TEAM_NO = #{global_member_team}
							</when>
							<otherwise>
								AND OMI.MEMBER_ID_NUM = #{selectValue}
							</otherwise>
						</choose>
					</when>
					<otherwise>
						AND OTI.TEAM_NO = #{global_member_team}
						AND OMI.MEMBER_ID_NUM = #{global_member_id}
					</otherwise>
				</choose>
			</when>

			<otherwise>
				<choose>
					<when test="global_division_type == null or global_division_type == '' ">
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">
										AND ODI.DIVISION_NO = #{global_member_division}
									</when>
									<otherwise>
										AND OTI.TEAM_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
						</choose>
					</when>

					<otherwise>
						<choose>
							<when test="selectValue != null and selectValue != '' ">
								<choose>
									<when test="selectValue == 'all'">
										<!-- AND ODI.DIVISION_NO = #{global_member_division} -->
									</when>
									<otherwise>
										<!-- AND OTI.TEAM_NO = #{selectValue} -->
										AND ODI.DIVISION_NO = #{selectValue}
									</otherwise>
								</choose>
							</when>
						</choose>
					</otherwise>
				</choose>
			</otherwise>

		</choose>
		) AS AA
		WHERE DI.S_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL -7 WEEK) AND CURDATE()
		) TBL
		,(SELECT @ROWNUM := 0) TMP
		WHERE END_DATE IS NOT NULL
		GROUP BY
		START_DATE,END_DATE
	</select>
	
	<!-- 모바일 고객영업활동 -> 잠재영업기회 리스트 -> 잠재영업기회 현황(전체잠재기회, 진행중기회 건수) -->
	<select id="ConversionRateCount" parameterType="hashmap" resultType="hashmap">
		SELECT
			COUNT(*) AS TOTAL_CNT
			,SUM(CASE WHEN (OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d')) THEN 1 ELSE 0 END) AS ING_CNT 
		FROM OUR_MEMBERS_INFO OMI2
		INNER JOIN OUR_TEAM_INFO OTI
			ON OTI.TEAM_NO = OMI2.MEMBER_TEAM
		INNER JOIN OPPORTUNITY_HIDDEN_LOG OHL
			ON OMI2.MEMBER_ID_NUM = OHL.SALESMAN_ID
		INNER JOIN OUR_DIVISION_INFO ODI
			ON ODI.DIVISION_NO = OMI2.MEMBER_DIVISION
		WHERE OHL.SYS_UPDATE_DATE LIKE
			CONCAT(YEAR(CURDATE()), '%')
		AND OMI2.USE_YN = 'Y'
		<include refid="hiddenOpportunityWhere" />
	</select>
	
	<!-- 모바일 고객영업활동 -> 잠재영업기회 리스트 -> 영업기회전환 -->
	<select id="ConversionRate" parameterType="hashmap" resultType="hashmap">
		SELECT
			IFNULL(FLOOR(TB.OPPORTUNITY_HIDDEN_ID / TOTAL_CNT * 100), 0) AS CONVERSIONRATE
			,(CASE WHEN TB.OPPORTUNITY_HIDDEN_ID = 0
					THEN 0
				ELSE IFNULL(TB.CHANGE_AMOUNT, 0) / 1000000
				END
			) AS CONVERSIONAMOUNT
		FROM
		(
		SELECT
			COUNT(*) AS TOTAL_CNT
			,COUNT(
				CASE WHEN OHL.SALES_RESULT = 'Y'
					THEN OHL.SALES_RESULT = 'Y'
				END
			) AS GREEN_CNT
			,IFNULL(FLOOR(SUM(
				AC.CONTRACT_AMOUNT
				) /1000000), 0) AS GREEN_AMOUNT
			,SUM(CASE WHEN AC.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND AC.OPPORTUNITY_HIDDEN_ID != '' THEN OHL.OPPORTUNITY_AMOUNT ELSE 0 END) AS CHANGE_AMOUNT			
			,COUNT(AC.OPPORTUNITY_HIDDEN_ID) AS OPPORTUNITY_HIDDEN_ID
		FROM OUR_MEMBERS_INFO OMI2

		LEFT OUTER JOIN
			OUR_TEAM_INFO AS OTI
			ON OTI.TEAM_NO = OMI2.MEMBER_TEAM
		LEFT OUTER JOIN
			OPPORTUNITY_HIDDEN_LOG AS OHL
			ON OMI2.MEMBER_ID_NUM = OHL.SALESMAN_ID
		LEFT OUTER JOIN
			OUR_DIVISION_INFO AS ODI
			ON ODI.DIVISION_NO = OTI.DIVISION_NO
		LEFT OUTER JOIN
			OPPORTUNITY_LOG AS AC ON AC.OPPORTUNITY_HIDDEN_ID = OHL.OPPORTUNITY_HIDDEN_ID

		WHERE OHL.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		AND OMI2.USE_YN = 'Y'
		<include refid="hiddenOpportunityWhere" />

		) AS TB
	</select>
	
	<!-- 모바일 고객영업활동 -> 잠재영업기회 리스트 -> 전환계획 ststus -->
	<select id="changePlanStatusMember" parameterType="hashmap"	resultType="hashmap">
		SELECT
			OMI.HAN_NAME AS TARGET_NAME
			,COUNT(*) AS TOTAL_CNT
			,IFNULL(FLOOR(SUM(OHL.OPPORTUNITY_AMOUNT) /1000000), 0) AS TOTAL_AMOUNT

			,SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN 1 ELSE 0 END) AS GREEN_CNT
			,SUM(CASE WHEN OL.OPPORTUNITY_HIDDEN_ID IS NOT NULL AND OL.OPPORTUNITY_HIDDEN_ID != '' THEN (OHL.OPPORTUNITY_AMOUNT / 1000000) ELSE 0 END) AS GREEN_AMOUNT		
			
			<![CDATA[
			,SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS YELLOW_CNT 
			,SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE >= date_format(NOW(),'%Y-%m-%d') THEN (OHL.OPPORTUNITY_AMOUNT / 1000000)  ELSE 0 END) AS YELLOW_AMOUNT
				
			,SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN 1 ELSE 0 END) AS RED_CNT 
			,SUM(CASE WHEN (OL.OPPORTUNITY_HIDDEN_ID IS NULL OR OL.OPPORTUNITY_HIDDEN_ID = '') AND OHL.SALES_CHANGE_DATE < date_format(NOW(),'%Y-%m-%d') THEN (OHL.OPPORTUNITY_AMOUNT / 1000000)  ELSE 0 END) AS RED_AMOUNT
			
			 ]]>
		FROM OUR_MEMBERS_INFO OMI

		INNER JOIN OUR_TEAM_INFO OTI
			ON OTI.TEAM_NO = OMI.MEMBER_TEAM
		INNER JOIN OPPORTUNITY_HIDDEN_LOG OHL
			ON OMI.MEMBER_ID_NUM = OHL.SALESMAN_ID
		INNER JOIN OUR_DIVISION_INFO ODI
			ON ODI.DIVISION_NO = OMI.MEMBER_DIVISION
		LEFT OUTER JOIN
			OPPORTUNITY_LOG AS OL ON OL.OPPORTUNITY_HIDDEN_ID = OHL.OPPORTUNITY_HIDDEN_ID
		WHERE
			OHL.SYS_UPDATE_DATE LIKE CONCAT(YEAR(CURDATE()), '%')
		AND
			OMI.MEMBER_ID_NUM = #{global_member_id}
	</select>
</mapper>